{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment My Project }My Project}
{\comment Generated by doxygen 1.9.8.}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt My Project}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version \par\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\par \pard\plain 
\par \pard\plain 
\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Jogo de Fazenda :pig2: :baby_chick: :seedling: :corn:\par \pard\plain 
{\tc\tcl1 \v Jogo de Fazenda :pig2: :baby_chick:   :seedling: :corn:}
{\xe \v Jogo de Fazenda :pig2: :baby_chick:   :seedling: :corn:}
{\bkmkstart AAAAAAAAQG}
{\bkmkend AAAAAAAAQG}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\bkmkstart AAAAAAAAQH}
{\bkmkend AAAAAAAAQH}
\par
Trabalho de C++ do curso de Programa\'E7\'E3o e Desenvolvimento de Software II - UFMG\par
Professor Luigi Domenico\par
\par
{\bkmkstart AAAAAAAAQI}
{\bkmkend AAAAAAAAQI}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Sobre o projeto
\par}
{\tc\tcl2 \v Sobre o projeto}
No "nome do jogo", voc\'EA deve realizar a\'E7\'F5es para receber moedas e suir de n\'EDvel!\par
Transite entre as diferentes funcionalidades de um fazendeiro e obtenha os itens necess\'E1rios para valorizar seus pertences.\par
N\'E3o se esque\'E7a de fazer vendas na loja e aumentar sua produ\'E7\'E3o!\par
\par
\par}
{\bkmkstart AAAAAAAAQJ}
{\bkmkend AAAAAAAAQJ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Funcionalidades
\par}
{\tc\tcl2 \v Funcionalidades}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Interagir com as planta\'E7\'F5es\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Ganhar pontos e subir de n\'EDvel\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Compre e venda itens na loja.\par}
\par
\par
\par}
{\bkmkstart AAAAAAAAQK}
{\bkmkend AAAAAAAAQK}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Compila\'E7\'E3o e Execu\'E7\'E3o
\par}
{\tc\tcl2 \v Compila\'E7\'E3o e Execu\'E7\'E3o}
Para compilar e executar o programa, siga as instru\'E7\'F5es abaixo:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Clone o reposit\'F3rio ou fa\'E7a o download dos arquivos.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab Abra um terminal e navegue at\'E9 o diret\'F3rio do programa.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab Compile o programa com o seguinte comando:\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid colocar o comando\par
}
\par}
\par
\par
\par}
{\bkmkstart AAAAAAAAQL}
{\bkmkend AAAAAAAAQL}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Integrantes do grupo:
\par}
{\tc\tcl2 \v Integrantes do grupo:}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Emanuelle King Amaral\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Jean Pierry Alves Lopes\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Mateus Souza Barreto\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Naually Pereira Sejimo de Avila\par}
\par
Raissa Lauar Gon\'E7alves Navarro da Silva \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Index\par \pard\plain 
{\tc \v Namespace Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Namespace List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all namespaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b color} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Biblioteca para adi\'E7\'E3o de cores no terminal })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAVK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::assertType} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::Color} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::assertAction} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::binaryAssertComparison} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::TestCaseFailureReason} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest_detail_test_suite_ns} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Hierarchical Index\par \pard\plain 
{\tc \v Hierarchical Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class Hierarchy\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This inheritance list is sorted roughly, but not completely, alphabetically:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::Approx\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::AssertData\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYH \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::ResultBuilder\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
std::basic_istream< charT, traits >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::basic_ostream< charT, traits >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::char_traits< charT >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::Contains\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::Context\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::ContextOptions\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::CurrentTestCaseStats\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::enable_if< COND, T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::enable_if< true, T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::Expression_lhs< L >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::ExpressionDecomposer\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::false_type\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABON \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::deferred_false< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::has_insertion_operator< T, typename >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_array< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_pointer< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_rvalue_reference< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
Farmer\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::filldata< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::filldata< const char[N]>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::filldata< const void * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::filldata< T * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::filldata< T[N]>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Fisherman\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::IContextScope\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBP \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::ContextScopeBase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJP \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::ContextScope< L >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
}\par
doctest::detail::IExceptionTranslator\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLA \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::ExceptionTranslator< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
Inventory\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::IReporter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_enum< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::IsNaN< F >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Item\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Livestocker\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
LojaDeItens\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Menu\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::MessageData\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCP \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::MessageBuilder\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
Miner\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Player\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::QueryData\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::RelationalComparator< int, L, R >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::remove_const< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::remove_const< const T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::remove_reference< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::remove_reference< T & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::remove_reference< T && >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::Result\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::should_stringify_as_underlying_type< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Sistema\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
StorageManager< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAST \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
StorageManager< Item >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAST \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
ItemsStorage\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
doctest::String\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::AssertData::StringContains\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::StringMakerBase< C >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::StringMakerBase< detail::has_insertion_operator< T >::value||detail::types::is_pointer< T >::value||detail::types::is_array< T >::value >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMH \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::StringMaker< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
doctest::detail::StringMakerBase< true >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::Subcase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABML \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::SubcaseSignature\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::TestCaseData\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEH \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::TestCase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
doctest::TestCaseException\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::TestFailureException\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::TestRunStats\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::TestSuite\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::true_type\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPH \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::has_insertion_operator< T, decltype(operator<<(declval< std::ostream & >(), declval< const T & >()), void())>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_array< T[SIZE]>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_pointer< T * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_rvalue_reference< T && >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
std::tuple< Types >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::underlying_type< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b doctest::Approx} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::AssertData} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::basic_istream< charT, traits >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::basic_ostream< charT, traits >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::char_traits< charT >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::Contains} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::Context} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::ContextOptions} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT too many fields })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::ContextScope< L >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::ContextScopeBase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::CurrentTestCaseStats} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::deferred_false< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::enable_if< COND, T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::enable_if< true, T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::ExceptionTranslator< T >} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT destructor of virtual class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::Expression_lhs< L >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::ExpressionDecomposer} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::false_type} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABON \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Farmer} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um agricultor no jogo })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::filldata< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::filldata< const char[N]>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::filldata< const void * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::filldata< T * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::filldata< T[N]>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Fisherman} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um pescador no jogo })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::has_insertion_operator< T, typename >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::has_insertion_operator< T, decltype(operator<<(declval< std::ostream & >(), declval< const T & >()), void())>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::IContextScope} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::IExceptionTranslator} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Inventory} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa o invent\'E1rio de um jogador })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::IReporter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::is_array< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::is_array< T[SIZE]>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::is_enum< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::is_pointer< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::is_pointer< T * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::is_rvalue_reference< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::is_rvalue_reference< T && >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::IsNaN< F >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Item} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um item no sistema })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ItemsStorage} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gerencia o armazenamento de itens })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Livestocker} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um criador de animais no jogo })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b LojaDeItens} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa uma loja de itens no jogo })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Menu} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa um menu })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::MessageBuilder} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::MessageData} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Miner} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Player} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa um jogador })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::QueryData} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::RelationalComparator< int, L, R >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::remove_const< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::remove_const< const T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::remove_reference< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::remove_reference< T & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::remove_reference< T && >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::Result} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::ResultBuilder} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::should_stringify_as_underlying_type< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Sistema} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa o sistema do jogo })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b StorageManager< T >} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe modelo para gerenciamento de armazenamento })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAST \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::String} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::AssertData::StringContains} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::StringMaker< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::StringMakerBase< C >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::StringMakerBase< true >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::Subcase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABML \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::SubcaseSignature} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::TestCase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::TestCaseData} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::TestCaseException} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::TestFailureException} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::TestRunStats} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::TestSuite} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::true_type} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tuple< Types >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::underlying_type< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b doctest.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Farmer.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Farmer.hpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe {\b Farmer} })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Fisherman.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Fisherman.hpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe {\b Fisherman} })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Inventory.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Inventory.hpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe {\b Inventory} })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Item.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Item.hpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe {\b Item} })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ItemsStorage.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ItemsStorage.hpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe {\b ItemsStorage}, uma subclasse de {\b StorageManager} })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Livestocker.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Livestocker.hpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe {\b Livestocker} })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b LojaDeItens.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b LojaDeItens.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b main.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Menu.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Menu.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Miner.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b MIner.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Player.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Player.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Sistema.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Sistema.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b StorageManager.hpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe template {\b StorageManager} })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b tempCodeRunnerFile.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TerminalPalette.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b test.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b test2.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Documentation\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
color Namespace Reference\par \pard\plain 
{\tc\tcl2 \v color}
{\xe \v color}
{\bkmkstart AAAAAAAASW}
{\bkmkend AAAAAAAASW}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
biblioteca para adi\'E7\'E3o de cores no terminal }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b gray} = "\\e[30;10m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b grayn} = "\\e[30;1m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b grayf} = "\\e[30;2m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b grayi} = "\\e[30;3m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b grays} = "\\e[30;4m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b grayp} = "\\e[30;5m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b grayb} = "\\e[30;7m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b grayc} = "\\e[30;9m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b red} = "\\e[31;10m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b redn} = "\\e[31;1m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b redf} = "\\e[31;2m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b redi} = "\\e[31;3m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b reds} = "\\e[31;4m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b redp} = "\\e[31;5m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b redb} = "\\e[31;7m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b redc} = "\\e[31;9m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b green} = "\\e[32;10m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b greenn} = "\\e[32;1m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b greenf} = "\\e[32;2m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b greeni} = "\\e[32;3m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b greens} = "\\e[32;4m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b greenp} = "\\e[32;5m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b greenb} = "\\e[32;7m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b greenc} = "\\e[32;9m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b yellow} = "\\e[33;10m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b yellown} = "\\e[33;1m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b yellowf} = "\\e[33;2m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b yellowi} = "\\e[33;3m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b yellows} = "\\e[33;4m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b yellowp} = "\\e[33;5m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b yellowb} = "\\e[33;7m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b yellowc} = "\\e[33;9m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b blue} = "\\e[34;10m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b bluen} = "\\e[34;1m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b bluef} = "\\e[34;2m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b bluei} = "\\e[34;3m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b blues} = "\\e[34;4m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b bluep} = "\\e[34;5m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b blueb} = "\\e[34;7m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b bluec} = "\\e[34;9m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b purple} = "\\e[35;10m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b purplen} = "\\e[35;1m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b purplef} = "\\e[35;2m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b purplei} = "\\e[35;3m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b purples} = "\\e[35;4m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b purplep} = "\\e[35;5m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b purpleb} = "\\e[35;7m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b purplec} = "\\e[35;9m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b cyan} = "\\e[36;10m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b cyann} = "\\e[36;1m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b cyanf} = "\\e[36;2m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b cyani} = "\\e[36;3m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b cyans} = "\\e[36;4m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b cyanp} = "\\e[36;5m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b cyanb} = "\\e[36;7m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b cyanc} = "\\e[36;9m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b white} = "\\e[38;10m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b whiten} = "\\e[38;1m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b whitef} = "\\e[38;2m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b whitei} = "\\e[38;3m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b whites} = "\\e[38;4m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b whitep} = "\\e[38;5m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b whiteb} = "\\e[38;7m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b whitec} = "\\e[38;9m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b off} = "\\e[m"\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
biblioteca para adi\'E7\'E3o de cores no terminal \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v blue\:color}
{\xe \v color\:blue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::blue = "\\e[34;10m"}}
\par
{\bkmkstart AAAAAAAASX}
{\bkmkend AAAAAAAASX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v blueb\:color}
{\xe \v color\:blueb}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::blueb = "\\e[34;7m"}}
\par
{\bkmkstart AAAAAAAASY}
{\bkmkend AAAAAAAASY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v bluec\:color}
{\xe \v color\:bluec}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::bluec = "\\e[34;9m"}}
\par
{\bkmkstart AAAAAAAASZ}
{\bkmkend AAAAAAAASZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v bluef\:color}
{\xe \v color\:bluef}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::bluef = "\\e[34;2m"}}
\par
{\bkmkstart AAAAAAAATA}
{\bkmkend AAAAAAAATA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v bluei\:color}
{\xe \v color\:bluei}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::bluei = "\\e[34;3m"}}
\par
{\bkmkstart AAAAAAAATB}
{\bkmkend AAAAAAAATB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v bluen\:color}
{\xe \v color\:bluen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::bluen = "\\e[34;1m"}}
\par
{\bkmkstart AAAAAAAATC}
{\bkmkend AAAAAAAATC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v bluep\:color}
{\xe \v color\:bluep}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::bluep = "\\e[34;5m"}}
\par
{\bkmkstart AAAAAAAATD}
{\bkmkend AAAAAAAATD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v blues\:color}
{\xe \v color\:blues}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::blues = "\\e[34;4m"}}
\par
{\bkmkstart AAAAAAAATE}
{\bkmkend AAAAAAAATE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v cyan\:color}
{\xe \v color\:cyan}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::cyan = "\\e[36;10m"}}
\par
{\bkmkstart AAAAAAAATF}
{\bkmkend AAAAAAAATF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v cyanb\:color}
{\xe \v color\:cyanb}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::cyanb = "\\e[36;7m"}}
\par
{\bkmkstart AAAAAAAATG}
{\bkmkend AAAAAAAATG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v cyanc\:color}
{\xe \v color\:cyanc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::cyanc = "\\e[36;9m"}}
\par
{\bkmkstart AAAAAAAATH}
{\bkmkend AAAAAAAATH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v cyanf\:color}
{\xe \v color\:cyanf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::cyanf = "\\e[36;2m"}}
\par
{\bkmkstart AAAAAAAATI}
{\bkmkend AAAAAAAATI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v cyani\:color}
{\xe \v color\:cyani}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::cyani = "\\e[36;3m"}}
\par
{\bkmkstart AAAAAAAATJ}
{\bkmkend AAAAAAAATJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v cyann\:color}
{\xe \v color\:cyann}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::cyann = "\\e[36;1m"}}
\par
{\bkmkstart AAAAAAAATK}
{\bkmkend AAAAAAAATK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v cyanp\:color}
{\xe \v color\:cyanp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::cyanp = "\\e[36;5m"}}
\par
{\bkmkstart AAAAAAAATL}
{\bkmkend AAAAAAAATL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v cyans\:color}
{\xe \v color\:cyans}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::cyans = "\\e[36;4m"}}
\par
{\bkmkstart AAAAAAAATM}
{\bkmkend AAAAAAAATM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v gray\:color}
{\xe \v color\:gray}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::gray = "\\e[30;10m"}}
\par
{\bkmkstart AAAAAAAATN}
{\bkmkend AAAAAAAATN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v grayb\:color}
{\xe \v color\:grayb}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::grayb = "\\e[30;7m"}}
\par
{\bkmkstart AAAAAAAATO}
{\bkmkend AAAAAAAATO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v grayc\:color}
{\xe \v color\:grayc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::grayc = "\\e[30;9m"}}
\par
{\bkmkstart AAAAAAAATP}
{\bkmkend AAAAAAAATP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v grayf\:color}
{\xe \v color\:grayf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::grayf = "\\e[30;2m"}}
\par
{\bkmkstart AAAAAAAATQ}
{\bkmkend AAAAAAAATQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v grayi\:color}
{\xe \v color\:grayi}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::grayi = "\\e[30;3m"}}
\par
{\bkmkstart AAAAAAAATR}
{\bkmkend AAAAAAAATR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v grayn\:color}
{\xe \v color\:grayn}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::grayn = "\\e[30;1m"}}
\par
{\bkmkstart AAAAAAAATS}
{\bkmkend AAAAAAAATS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v grayp\:color}
{\xe \v color\:grayp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::grayp = "\\e[30;5m"}}
\par
{\bkmkstart AAAAAAAATT}
{\bkmkend AAAAAAAATT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v grays\:color}
{\xe \v color\:grays}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::grays = "\\e[30;4m"}}
\par
{\bkmkstart AAAAAAAATU}
{\bkmkend AAAAAAAATU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v green\:color}
{\xe \v color\:green}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::green = "\\e[32;10m"}}
\par
{\bkmkstart AAAAAAAATV}
{\bkmkend AAAAAAAATV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v greenb\:color}
{\xe \v color\:greenb}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::greenb = "\\e[32;7m"}}
\par
{\bkmkstart AAAAAAAATW}
{\bkmkend AAAAAAAATW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v greenc\:color}
{\xe \v color\:greenc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::greenc = "\\e[32;9m"}}
\par
{\bkmkstart AAAAAAAATX}
{\bkmkend AAAAAAAATX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v greenf\:color}
{\xe \v color\:greenf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::greenf = "\\e[32;2m"}}
\par
{\bkmkstart AAAAAAAATY}
{\bkmkend AAAAAAAATY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v greeni\:color}
{\xe \v color\:greeni}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::greeni = "\\e[32;3m"}}
\par
{\bkmkstart AAAAAAAATZ}
{\bkmkend AAAAAAAATZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v greenn\:color}
{\xe \v color\:greenn}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::greenn = "\\e[32;1m"}}
\par
{\bkmkstart AAAAAAAAUA}
{\bkmkend AAAAAAAAUA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v greenp\:color}
{\xe \v color\:greenp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::greenp = "\\e[32;5m"}}
\par
{\bkmkstart AAAAAAAAUB}
{\bkmkend AAAAAAAAUB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v greens\:color}
{\xe \v color\:greens}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::greens = "\\e[32;4m"}}
\par
{\bkmkstart AAAAAAAAUC}
{\bkmkend AAAAAAAAUC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v off\:color}
{\xe \v color\:off}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::off = "\\e[m"}}
\par
{\bkmkstart AAAAAAAAUD}
{\bkmkend AAAAAAAAUD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v purple\:color}
{\xe \v color\:purple}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::purple = "\\e[35;10m"}}
\par
{\bkmkstart AAAAAAAAUE}
{\bkmkend AAAAAAAAUE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v purpleb\:color}
{\xe \v color\:purpleb}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::purpleb = "\\e[35;7m"}}
\par
{\bkmkstart AAAAAAAAUF}
{\bkmkend AAAAAAAAUF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v purplec\:color}
{\xe \v color\:purplec}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::purplec = "\\e[35;9m"}}
\par
{\bkmkstart AAAAAAAAUG}
{\bkmkend AAAAAAAAUG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v purplef\:color}
{\xe \v color\:purplef}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::purplef = "\\e[35;2m"}}
\par
{\bkmkstart AAAAAAAAUH}
{\bkmkend AAAAAAAAUH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v purplei\:color}
{\xe \v color\:purplei}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::purplei = "\\e[35;3m"}}
\par
{\bkmkstart AAAAAAAAUI}
{\bkmkend AAAAAAAAUI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v purplen\:color}
{\xe \v color\:purplen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::purplen = "\\e[35;1m"}}
\par
{\bkmkstart AAAAAAAAUJ}
{\bkmkend AAAAAAAAUJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v purplep\:color}
{\xe \v color\:purplep}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::purplep = "\\e[35;5m"}}
\par
{\bkmkstart AAAAAAAAUK}
{\bkmkend AAAAAAAAUK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v purples\:color}
{\xe \v color\:purples}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::purples = "\\e[35;4m"}}
\par
{\bkmkstart AAAAAAAAUL}
{\bkmkend AAAAAAAAUL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v red\:color}
{\xe \v color\:red}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::red = "\\e[31;10m"}}
\par
{\bkmkstart AAAAAAAAUM}
{\bkmkend AAAAAAAAUM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v redb\:color}
{\xe \v color\:redb}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::redb = "\\e[31;7m"}}
\par
{\bkmkstart AAAAAAAAUN}
{\bkmkend AAAAAAAAUN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v redc\:color}
{\xe \v color\:redc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::redc = "\\e[31;9m"}}
\par
{\bkmkstart AAAAAAAAUO}
{\bkmkend AAAAAAAAUO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v redf\:color}
{\xe \v color\:redf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::redf = "\\e[31;2m"}}
\par
{\bkmkstart AAAAAAAAUP}
{\bkmkend AAAAAAAAUP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v redi\:color}
{\xe \v color\:redi}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::redi = "\\e[31;3m"}}
\par
{\bkmkstart AAAAAAAAUQ}
{\bkmkend AAAAAAAAUQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v redn\:color}
{\xe \v color\:redn}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::redn = "\\e[31;1m"}}
\par
{\bkmkstart AAAAAAAAUR}
{\bkmkend AAAAAAAAUR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v redp\:color}
{\xe \v color\:redp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::redp = "\\e[31;5m"}}
\par
{\bkmkstart AAAAAAAAUS}
{\bkmkend AAAAAAAAUS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v reds\:color}
{\xe \v color\:reds}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::reds = "\\e[31;4m"}}
\par
{\bkmkstart AAAAAAAAUT}
{\bkmkend AAAAAAAAUT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v white\:color}
{\xe \v color\:white}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::white = "\\e[38;10m"}}
\par
{\bkmkstart AAAAAAAAUU}
{\bkmkend AAAAAAAAUU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v whiteb\:color}
{\xe \v color\:whiteb}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::whiteb = "\\e[38;7m"}}
\par
{\bkmkstart AAAAAAAAUV}
{\bkmkend AAAAAAAAUV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v whitec\:color}
{\xe \v color\:whitec}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::whitec = "\\e[38;9m"}}
\par
{\bkmkstart AAAAAAAAUW}
{\bkmkend AAAAAAAAUW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v whitef\:color}
{\xe \v color\:whitef}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::whitef = "\\e[38;2m"}}
\par
{\bkmkstart AAAAAAAAUX}
{\bkmkend AAAAAAAAUX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v whitei\:color}
{\xe \v color\:whitei}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::whitei = "\\e[38;3m"}}
\par
{\bkmkstart AAAAAAAAUY}
{\bkmkend AAAAAAAAUY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v whiten\:color}
{\xe \v color\:whiten}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::whiten = "\\e[38;1m"}}
\par
{\bkmkstart AAAAAAAAUZ}
{\bkmkend AAAAAAAAUZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v whitep\:color}
{\xe \v color\:whitep}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::whitep = "\\e[38;5m"}}
\par
{\bkmkstart AAAAAAAAVA}
{\bkmkend AAAAAAAAVA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v whites\:color}
{\xe \v color\:whites}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::whites = "\\e[38;4m"}}
\par
{\bkmkstart AAAAAAAAVB}
{\bkmkend AAAAAAAAVB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v yellow\:color}
{\xe \v color\:yellow}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::yellow = "\\e[33;10m"}}
\par
{\bkmkstart AAAAAAAAVC}
{\bkmkend AAAAAAAAVC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v yellowb\:color}
{\xe \v color\:yellowb}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::yellowb = "\\e[33;7m"}}
\par
{\bkmkstart AAAAAAAAVD}
{\bkmkend AAAAAAAAVD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v yellowc\:color}
{\xe \v color\:yellowc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::yellowc = "\\e[33;9m"}}
\par
{\bkmkstart AAAAAAAAVE}
{\bkmkend AAAAAAAAVE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v yellowf\:color}
{\xe \v color\:yellowf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::yellowf = "\\e[33;2m"}}
\par
{\bkmkstart AAAAAAAAVF}
{\bkmkend AAAAAAAAVF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v yellowi\:color}
{\xe \v color\:yellowi}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::yellowi = "\\e[33;3m"}}
\par
{\bkmkstart AAAAAAAAVG}
{\bkmkend AAAAAAAAVG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v yellown\:color}
{\xe \v color\:yellown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::yellown = "\\e[33;1m"}}
\par
{\bkmkstart AAAAAAAAVH}
{\bkmkend AAAAAAAAVH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v yellowp\:color}
{\xe \v color\:yellowp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::yellowp = "\\e[33;5m"}}
\par
{\bkmkstart AAAAAAAAVI}
{\bkmkend AAAAAAAAVI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v yellows\:color}
{\xe \v color\:yellows}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string color::yellows = "\\e[33;4m"}}
\par
{\bkmkstart AAAAAAAAVJ}
{\bkmkend AAAAAAAAVJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest Namespace Reference\par \pard\plain 
{\tc\tcl2 \v doctest}
{\xe \v doctest}
{\bkmkstart AAAAAAAAVK}
{\bkmkend AAAAAAAAVK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b assertType}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b Color}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b detail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b TestCaseFailureReason}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Approx}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b AssertData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Contains}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Context}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ContextOptions}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT too many fields. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b CurrentTestCaseStats}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b IContextScope}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b IReporter}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b IsNaN}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b MessageData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b QueryData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b String}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b StringMaker}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b SubcaseSignature}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TestCaseData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TestCaseException}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TestRunStats}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b operator+} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator==} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator!=} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator<} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator>} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator<=} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator>=} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (const {\b Contains} &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator==} (const {\b String} &lhs, const {\b Contains} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator==} (const {\b Contains} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator!=} (const {\b String} &lhs, const {\b Contains} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator!=} (const {\b Contains} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b assertString} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b failureString} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b skipPathFromFilename} (const char *file)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b String} {\b toString} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T , typename {\b detail::types::enable_if}<!{\b detail::should_stringify_as_underlying_type}< T >::value, bool >::type  = true> {\b String} {\b toString} (const {\b DOCTEST_REF_WRAP}(T) value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} ({\b String} in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} ({\b std::nullptr_t})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (bool in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (float in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (double in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (double long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (char in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (char signed in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (char unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (short in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (short unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (signed in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (long unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (long long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (long long unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (const {\b Approx} &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const {\b ContextOptions} * {\b getContextOptions} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} ({\b IsNaN}< float > in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} ({\b IsNaN}< double > in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} ({\b IsNaN}< double long > in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (test_suite, const char *, "")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (description, const char *, "")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (skip, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (no_breaks, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (no_output, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (timeout, double, 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (may_fail, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (should_fail, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (expected_failures, int, 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > int {\b registerExceptionTranslator} ({\b String}(*translateFunction)(T))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Reporter > int {\b registerReporter} (const char *name, int priority, bool isReporter)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b is_running_in_test}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template struct {\b DOCTEST_INTERFACE_DECL} {\b IsNaN< float >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template struct {\b DOCTEST_INTERFACE_DECL} {\b IsNaN< double >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template struct {\b DOCTEST_INTERFACE_DECL} {\b IsNaN< long double >}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v assertString\:doctest}
{\xe \v doctest\:assertString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} const char * doctest::assertString ({\b assertType::Enum}  {\i at})}}
\par
{\bkmkstart AAAAAAAAVL}
{\bkmkend AAAAAAAAVL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (description , const char * , "" )}}
\par
{\bkmkstart AAAAAAAAVM}
{\bkmkend AAAAAAAAVM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (expected_failures , int , 0 )}}
\par
{\bkmkstart AAAAAAAAVN}
{\bkmkend AAAAAAAAVN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (may_fail , bool , true )}}
\par
{\bkmkstart AAAAAAAAVO}
{\bkmkend AAAAAAAAVO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (no_breaks , bool , true )}}
\par
{\bkmkstart AAAAAAAAVP}
{\bkmkend AAAAAAAAVP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (no_output , bool , true )}}
\par
{\bkmkstart AAAAAAAAVQ}
{\bkmkend AAAAAAAAVQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (should_fail , bool , true )}}
\par
{\bkmkstart AAAAAAAAVR}
{\bkmkend AAAAAAAAVR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (skip , bool , true )}}
\par
{\bkmkstart AAAAAAAAVS}
{\bkmkend AAAAAAAAVS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (test_suite , const char * , "" )}}
\par
{\bkmkstart AAAAAAAAVT}
{\bkmkend AAAAAAAAVT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (timeout , double , 0 )}}
\par
{\bkmkstart AAAAAAAAVU}
{\bkmkend AAAAAAAAVU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v failureString\:doctest}
{\xe \v doctest\:failureString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} const char * doctest::failureString ({\b assertType::Enum}  {\i at})}}
\par
{\bkmkstart AAAAAAAAVV}
{\bkmkend AAAAAAAAVV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getContextOptions\:doctest}
{\xe \v doctest\:getContextOptions}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} const {\b ContextOptions} * doctest::getContextOptions ()}}
\par
{\bkmkstart AAAAAAAAVW}
{\bkmkend AAAAAAAAVW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator!=\:doctest}
{\xe \v doctest\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator!= (const {\b Contains} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAAAVX}
{\bkmkend AAAAAAAAVX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator!=\:doctest}
{\xe \v doctest\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator!= (const {\b String} &  {\i lhs}, const {\b Contains} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAAAVY}
{\bkmkend AAAAAAAAVY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator!=\:doctest}
{\xe \v doctest\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator!= (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAAAVZ}
{\bkmkend AAAAAAAAVZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator+\:doctest}
{\xe \v doctest\:operator+}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::operator+ (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAAAWA}
{\bkmkend AAAAAAAAWA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<\:doctest}
{\xe \v doctest\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator< (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAAAWB}
{\bkmkend AAAAAAAAWB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<=\:doctest}
{\xe \v doctest\:operator<=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator<= (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAAAWC}
{\bkmkend AAAAAAAAWC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator==\:doctest}
{\xe \v doctest\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator== (const {\b Contains} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAAAWD}
{\bkmkend AAAAAAAAWD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator==\:doctest}
{\xe \v doctest\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator== (const {\b String} &  {\i lhs}, const {\b Contains} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAAAWE}
{\bkmkend AAAAAAAAWE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator==\:doctest}
{\xe \v doctest\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator== (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAAAWF}
{\bkmkend AAAAAAAAWF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>\:doctest}
{\xe \v doctest\:operator>}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator> (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAAAWG}
{\bkmkend AAAAAAAAWG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>=\:doctest}
{\xe \v doctest\:operator>=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator>= (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAAAWH}
{\bkmkend AAAAAAAAWH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v registerExceptionTranslator\:doctest}
{\xe \v doctest\:registerExceptionTranslator}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > int doctest::registerExceptionTranslator ({\b String}(*)(T)  {\i translateFunction})}}
\par
{\bkmkstart AAAAAAAAWI}
{\bkmkend AAAAAAAAWI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v registerReporter\:doctest}
{\xe \v doctest\:registerReporter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename Reporter > int doctest::registerReporter (const char *  {\i name}, int  {\i priority}, bool  {\i isReporter})}}
\par
{\bkmkstart AAAAAAAAWJ}
{\bkmkend AAAAAAAAWJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v skipPathFromFilename\:doctest}
{\xe \v doctest\:skipPathFromFilename}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} const char * doctest::skipPathFromFilename (const char *  {\i file})}}
\par
{\bkmkstart AAAAAAAAWK}
{\bkmkend AAAAAAAAWK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b String} doctest::toString ()}}
\par
{\bkmkstart AAAAAAAAWL}
{\bkmkend AAAAAAAAWL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (bool  {\i in})}}
\par
{\bkmkstart AAAAAAAAWM}
{\bkmkend AAAAAAAAWM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (char  {\i in})}}
\par
{\bkmkstart AAAAAAAAWN}
{\bkmkend AAAAAAAAWN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (char signed  {\i in})}}
\par
{\bkmkstart AAAAAAAAWO}
{\bkmkend AAAAAAAAWO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (char unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAAAWP}
{\bkmkend AAAAAAAAWP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (const {\b Approx} &  {\i in})}}
\par
{\bkmkstart AAAAAAAAWQ}
{\bkmkend AAAAAAAAWQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (const {\b Contains} &  {\i in})}}
\par
{\bkmkstart AAAAAAAAWR}
{\bkmkend AAAAAAAAWR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T , typename {\b detail::types::enable_if}<!{\b detail::should_stringify_as_underlying_type}< T >::value, bool >::type  = true> {\b String} doctest::toString (const {\b DOCTEST_REF_WRAP}(T)  {\i value})}}
\par
{\bkmkstart AAAAAAAAWS}
{\bkmkend AAAAAAAAWS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (double  {\i in})}}
\par
{\bkmkstart AAAAAAAAWT}
{\bkmkend AAAAAAAAWT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (double long  {\i in})}}
\par
{\bkmkstart AAAAAAAAWU}
{\bkmkend AAAAAAAAWU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (float  {\i in})}}
\par
{\bkmkstart AAAAAAAAWV}
{\bkmkend AAAAAAAAWV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString ({\b IsNaN}< double >  {\i in})}}
\par
{\bkmkstart AAAAAAAAWW}
{\bkmkend AAAAAAAAWW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString ({\b IsNaN}< double long >  {\i in})}}
\par
{\bkmkstart AAAAAAAAWX}
{\bkmkend AAAAAAAAWX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString ({\b IsNaN}< float >  {\i in})}}
\par
{\bkmkstart AAAAAAAAWY}
{\bkmkend AAAAAAAAWY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (long  {\i in})}}
\par
{\bkmkstart AAAAAAAAWZ}
{\bkmkend AAAAAAAAWZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (long long  {\i in})}}
\par
{\bkmkstart AAAAAAAAXA}
{\bkmkend AAAAAAAAXA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (long long unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAAAXB}
{\bkmkend AAAAAAAAXB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (long unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAAAXC}
{\bkmkend AAAAAAAAXC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (short  {\i in})}}
\par
{\bkmkstart AAAAAAAAXD}
{\bkmkend AAAAAAAAXD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (short unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAAAXE}
{\bkmkend AAAAAAAAXE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (signed  {\i in})}}
\par
{\bkmkstart AAAAAAAAXF}
{\bkmkend AAAAAAAAXF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString ({\b std::nullptr_t} )}}
\par
{\bkmkstart AAAAAAAAXG}
{\bkmkend AAAAAAAAXG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString ({\b String}  {\i in})}}
\par
{\bkmkstart AAAAAAAAXH}
{\bkmkend AAAAAAAAXH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAAAXI}
{\bkmkend AAAAAAAAXI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v is_running_in_test\:doctest}
{\xe \v doctest\:is_running_in_test}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::is_running_in_test{\f2 [extern]}}}
\par
{\bkmkstart AAAAAAAAXJ}
{\bkmkend AAAAAAAAXJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v IsNaN< double >\:doctest}
{\xe \v doctest\:IsNaN< double >}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template struct {\b DOCTEST_INTERFACE_DECL} {\b doctest::IsNaN}< double >{\f2 [extern]}}}
\par
{\bkmkstart AAAAAAAAXK}
{\bkmkend AAAAAAAAXK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v IsNaN< float >\:doctest}
{\xe \v doctest\:IsNaN< float >}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template struct {\b DOCTEST_INTERFACE_DECL} {\b doctest::IsNaN}< float >{\f2 [extern]}}}
\par
{\bkmkstart AAAAAAAAXL}
{\bkmkend AAAAAAAAXL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v IsNaN< long double >\:doctest}
{\xe \v doctest\:IsNaN< long double >}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template struct {\b DOCTEST_INTERFACE_DECL} {\b doctest::IsNaN}< long double >{\f2 [extern]}}}
\par
{\bkmkstart AAAAAAAAXM}
{\bkmkend AAAAAAAAXM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::assertType Namespace Reference\par \pard\plain 
{\tc\tcl2 \v doctest::assertType}
{\xe \v doctest::assertType}
{\bkmkstart AAAAAAABFE}
{\bkmkend AAAAAAABFE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b is_warn} = 1
, {\b is_check} = 2 * is_warn
, {\b is_require} = 2 * is_check
, {\b is_normal} = 2 * is_require
, {\b is_throws} = 2 * is_normal
, {\b is_throws_as} = 2 * is_throws
, {\b is_throws_with} = 2 * is_throws_as
, {\b is_nothrow} = 2 * is_throws_with
, {\b is_false} = 2 * is_nothrow
, {\b is_unary} = 2 * is_false
, {\b is_eq} = 2 * is_unary
, {\b is_ne} = 2 * is_eq
, {\b is_lt} = 2 * is_ne
, {\b is_gt} = 2 * is_lt
, {\b is_ge} = 2 * is_gt
, {\b is_le} = 2 * is_ge
, {\b DT_WARN} = is_normal | is_warn
, {\b DT_CHECK} = is_normal | is_check
, {\b DT_REQUIRE} = is_normal | is_require
, {\b DT_WARN_FALSE} = is_normal | is_false | is_warn
, {\b DT_CHECK_FALSE} = is_normal | is_false | is_check
, {\b DT_REQUIRE_FALSE} = is_normal | is_false | is_require
, {\b DT_WARN_THROWS} = is_throws | is_warn
, {\b DT_CHECK_THROWS} = is_throws | is_check
, {\b DT_REQUIRE_THROWS} = is_throws | is_require
, {\b DT_WARN_THROWS_AS} = is_throws_as | is_warn
, {\b DT_CHECK_THROWS_AS} = is_throws_as | is_check
, {\b DT_REQUIRE_THROWS_AS} = is_throws_as | is_require
, {\b DT_WARN_THROWS_WITH} = is_throws_with | is_warn
, {\b DT_CHECK_THROWS_WITH} = is_throws_with | is_check
, {\b DT_REQUIRE_THROWS_WITH} = is_throws_with | is_require
, {\b DT_WARN_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_warn
, {\b DT_CHECK_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_check
, {\b DT_REQUIRE_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_require
, {\b DT_WARN_NOTHROW} = is_nothrow | is_warn
, {\b DT_CHECK_NOTHROW} = is_nothrow | is_check
, {\b DT_REQUIRE_NOTHROW} = is_nothrow | is_require
, {\b DT_WARN_EQ} = is_normal | is_eq | is_warn
, {\b DT_CHECK_EQ} = is_normal | is_eq | is_check
, {\b DT_REQUIRE_EQ} = is_normal | is_eq | is_require
, {\b DT_WARN_NE} = is_normal | is_ne | is_warn
, {\b DT_CHECK_NE} = is_normal | is_ne | is_check
, {\b DT_REQUIRE_NE} = is_normal | is_ne | is_require
, {\b DT_WARN_GT} = is_normal | is_gt | is_warn
, {\b DT_CHECK_GT} = is_normal | is_gt | is_check
, {\b DT_REQUIRE_GT} = is_normal | is_gt | is_require
, {\b DT_WARN_LT} = is_normal | is_lt | is_warn
, {\b DT_CHECK_LT} = is_normal | is_lt | is_check
, {\b DT_REQUIRE_LT} = is_normal | is_lt | is_require
, {\b DT_WARN_GE} = is_normal | is_ge | is_warn
, {\b DT_CHECK_GE} = is_normal | is_ge | is_check
, {\b DT_REQUIRE_GE} = is_normal | is_ge | is_require
, {\b DT_WARN_LE} = is_normal | is_le | is_warn
, {\b DT_CHECK_LE} = is_normal | is_le | is_check
, {\b DT_REQUIRE_LE} = is_normal | is_le | is_require
, {\b DT_WARN_UNARY} = is_normal | is_unary | is_warn
, {\b DT_CHECK_UNARY} = is_normal | is_unary | is_check
, {\b DT_REQUIRE_UNARY} = is_normal | is_unary | is_require
, {\b DT_WARN_UNARY_FALSE} = is_normal | is_false | is_unary | is_warn
, {\b DT_CHECK_UNARY_FALSE} = is_normal | is_false | is_unary | is_check
, {\b DT_REQUIRE_UNARY_FALSE} = is_normal | is_false | is_unary | is_require
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v Enum\:doctest::assertType}
{\xe \v doctest::assertType\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::assertType::Enum}}}
\par
{\bkmkstart AAAAAAABFF}
{\bkmkend AAAAAAABFF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v is_warn\:doctest::assertType}
{\xe \v doctest::assertType\:is_warn}
{\qr is_warn{\bkmkstart AAAAAAABFG}
{\bkmkend AAAAAAABFG}
\cell }{\cell }{\row }
{\xe \v is_check\:doctest::assertType}
{\xe \v doctest::assertType\:is_check}
{\qr is_check{\bkmkstart AAAAAAABFH}
{\bkmkend AAAAAAABFH}
\cell }{\cell }{\row }
{\xe \v is_require\:doctest::assertType}
{\xe \v doctest::assertType\:is_require}
{\qr is_require{\bkmkstart AAAAAAABFI}
{\bkmkend AAAAAAABFI}
\cell }{\cell }{\row }
{\xe \v is_normal\:doctest::assertType}
{\xe \v doctest::assertType\:is_normal}
{\qr is_normal{\bkmkstart AAAAAAABFJ}
{\bkmkend AAAAAAABFJ}
\cell }{\cell }{\row }
{\xe \v is_throws\:doctest::assertType}
{\xe \v doctest::assertType\:is_throws}
{\qr is_throws{\bkmkstart AAAAAAABFK}
{\bkmkend AAAAAAABFK}
\cell }{\cell }{\row }
{\xe \v is_throws_as\:doctest::assertType}
{\xe \v doctest::assertType\:is_throws_as}
{\qr is_throws_as{\bkmkstart AAAAAAABFL}
{\bkmkend AAAAAAABFL}
\cell }{\cell }{\row }
{\xe \v is_throws_with\:doctest::assertType}
{\xe \v doctest::assertType\:is_throws_with}
{\qr is_throws_with{\bkmkstart AAAAAAABFM}
{\bkmkend AAAAAAABFM}
\cell }{\cell }{\row }
{\xe \v is_nothrow\:doctest::assertType}
{\xe \v doctest::assertType\:is_nothrow}
{\qr is_nothrow{\bkmkstart AAAAAAABFN}
{\bkmkend AAAAAAABFN}
\cell }{\cell }{\row }
{\xe \v is_false\:doctest::assertType}
{\xe \v doctest::assertType\:is_false}
{\qr is_false{\bkmkstart AAAAAAABFO}
{\bkmkend AAAAAAABFO}
\cell }{\cell }{\row }
{\xe \v is_unary\:doctest::assertType}
{\xe \v doctest::assertType\:is_unary}
{\qr is_unary{\bkmkstart AAAAAAABFP}
{\bkmkend AAAAAAABFP}
\cell }{\cell }{\row }
{\xe \v is_eq\:doctest::assertType}
{\xe \v doctest::assertType\:is_eq}
{\qr is_eq{\bkmkstart AAAAAAABFQ}
{\bkmkend AAAAAAABFQ}
\cell }{\cell }{\row }
{\xe \v is_ne\:doctest::assertType}
{\xe \v doctest::assertType\:is_ne}
{\qr is_ne{\bkmkstart AAAAAAABFR}
{\bkmkend AAAAAAABFR}
\cell }{\cell }{\row }
{\xe \v is_lt\:doctest::assertType}
{\xe \v doctest::assertType\:is_lt}
{\qr is_lt{\bkmkstart AAAAAAABFS}
{\bkmkend AAAAAAABFS}
\cell }{\cell }{\row }
{\xe \v is_gt\:doctest::assertType}
{\xe \v doctest::assertType\:is_gt}
{\qr is_gt{\bkmkstart AAAAAAABFT}
{\bkmkend AAAAAAABFT}
\cell }{\cell }{\row }
{\xe \v is_ge\:doctest::assertType}
{\xe \v doctest::assertType\:is_ge}
{\qr is_ge{\bkmkstart AAAAAAABFU}
{\bkmkend AAAAAAABFU}
\cell }{\cell }{\row }
{\xe \v is_le\:doctest::assertType}
{\xe \v doctest::assertType\:is_le}
{\qr is_le{\bkmkstart AAAAAAABFV}
{\bkmkend AAAAAAABFV}
\cell }{\cell }{\row }
{\xe \v DT_WARN\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN}
{\qr DT_WARN{\bkmkstart AAAAAAABFW}
{\bkmkend AAAAAAABFW}
\cell }{\cell }{\row }
{\xe \v DT_CHECK\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK}
{\qr DT_CHECK{\bkmkstart AAAAAAABFX}
{\bkmkend AAAAAAABFX}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE}
{\qr DT_REQUIRE{\bkmkstart AAAAAAABFY}
{\bkmkend AAAAAAABFY}
\cell }{\cell }{\row }
{\xe \v DT_WARN_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_FALSE}
{\qr DT_WARN_FALSE{\bkmkstart AAAAAAABFZ}
{\bkmkend AAAAAAABFZ}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_FALSE}
{\qr DT_CHECK_FALSE{\bkmkstart AAAAAAABGA}
{\bkmkend AAAAAAABGA}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_FALSE}
{\qr DT_REQUIRE_FALSE{\bkmkstart AAAAAAABGB}
{\bkmkend AAAAAAABGB}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS}
{\qr DT_WARN_THROWS{\bkmkstart AAAAAAABGC}
{\bkmkend AAAAAAABGC}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS}
{\qr DT_CHECK_THROWS{\bkmkstart AAAAAAABGD}
{\bkmkend AAAAAAABGD}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS}
{\qr DT_REQUIRE_THROWS{\bkmkstart AAAAAAABGE}
{\bkmkend AAAAAAABGE}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS_AS}
{\qr DT_WARN_THROWS_AS{\bkmkstart AAAAAAABGF}
{\bkmkend AAAAAAABGF}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS_AS}
{\qr DT_CHECK_THROWS_AS{\bkmkstart AAAAAAABGG}
{\bkmkend AAAAAAABGG}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS_AS}
{\qr DT_REQUIRE_THROWS_AS{\bkmkstart AAAAAAABGH}
{\bkmkend AAAAAAABGH}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS_WITH\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS_WITH}
{\qr DT_WARN_THROWS_WITH{\bkmkstart AAAAAAABGI}
{\bkmkend AAAAAAABGI}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS_WITH\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS_WITH}
{\qr DT_CHECK_THROWS_WITH{\bkmkstart AAAAAAABGJ}
{\bkmkend AAAAAAABGJ}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS_WITH\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS_WITH}
{\qr DT_REQUIRE_THROWS_WITH{\bkmkstart AAAAAAABGK}
{\bkmkend AAAAAAABGK}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS_WITH_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS_WITH_AS}
{\qr DT_WARN_THROWS_WITH_AS{\bkmkstart AAAAAAABGL}
{\bkmkend AAAAAAABGL}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS_WITH_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS_WITH_AS}
{\qr DT_CHECK_THROWS_WITH_AS{\bkmkstart AAAAAAABGM}
{\bkmkend AAAAAAABGM}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS_WITH_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS_WITH_AS}
{\qr DT_REQUIRE_THROWS_WITH_AS{\bkmkstart AAAAAAABGN}
{\bkmkend AAAAAAABGN}
\cell }{\cell }{\row }
{\xe \v DT_WARN_NOTHROW\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_NOTHROW}
{\qr DT_WARN_NOTHROW{\bkmkstart AAAAAAABGO}
{\bkmkend AAAAAAABGO}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_NOTHROW\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_NOTHROW}
{\qr DT_CHECK_NOTHROW{\bkmkstart AAAAAAABGP}
{\bkmkend AAAAAAABGP}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_NOTHROW\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_NOTHROW}
{\qr DT_REQUIRE_NOTHROW{\bkmkstart AAAAAAABGQ}
{\bkmkend AAAAAAABGQ}
\cell }{\cell }{\row }
{\xe \v DT_WARN_EQ\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_EQ}
{\qr DT_WARN_EQ{\bkmkstart AAAAAAABGR}
{\bkmkend AAAAAAABGR}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_EQ\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_EQ}
{\qr DT_CHECK_EQ{\bkmkstart AAAAAAABGS}
{\bkmkend AAAAAAABGS}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_EQ\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_EQ}
{\qr DT_REQUIRE_EQ{\bkmkstart AAAAAAABGT}
{\bkmkend AAAAAAABGT}
\cell }{\cell }{\row }
{\xe \v DT_WARN_NE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_NE}
{\qr DT_WARN_NE{\bkmkstart AAAAAAABGU}
{\bkmkend AAAAAAABGU}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_NE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_NE}
{\qr DT_CHECK_NE{\bkmkstart AAAAAAABGV}
{\bkmkend AAAAAAABGV}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_NE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_NE}
{\qr DT_REQUIRE_NE{\bkmkstart AAAAAAABGW}
{\bkmkend AAAAAAABGW}
\cell }{\cell }{\row }
{\xe \v DT_WARN_GT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_GT}
{\qr DT_WARN_GT{\bkmkstart AAAAAAABGX}
{\bkmkend AAAAAAABGX}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_GT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_GT}
{\qr DT_CHECK_GT{\bkmkstart AAAAAAABGY}
{\bkmkend AAAAAAABGY}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_GT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_GT}
{\qr DT_REQUIRE_GT{\bkmkstart AAAAAAABGZ}
{\bkmkend AAAAAAABGZ}
\cell }{\cell }{\row }
{\xe \v DT_WARN_LT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_LT}
{\qr DT_WARN_LT{\bkmkstart AAAAAAABHA}
{\bkmkend AAAAAAABHA}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_LT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_LT}
{\qr DT_CHECK_LT{\bkmkstart AAAAAAABHB}
{\bkmkend AAAAAAABHB}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_LT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_LT}
{\qr DT_REQUIRE_LT{\bkmkstart AAAAAAABHC}
{\bkmkend AAAAAAABHC}
\cell }{\cell }{\row }
{\xe \v DT_WARN_GE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_GE}
{\qr DT_WARN_GE{\bkmkstart AAAAAAABHD}
{\bkmkend AAAAAAABHD}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_GE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_GE}
{\qr DT_CHECK_GE{\bkmkstart AAAAAAABHE}
{\bkmkend AAAAAAABHE}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_GE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_GE}
{\qr DT_REQUIRE_GE{\bkmkstart AAAAAAABHF}
{\bkmkend AAAAAAABHF}
\cell }{\cell }{\row }
{\xe \v DT_WARN_LE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_LE}
{\qr DT_WARN_LE{\bkmkstart AAAAAAABHG}
{\bkmkend AAAAAAABHG}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_LE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_LE}
{\qr DT_CHECK_LE{\bkmkstart AAAAAAABHH}
{\bkmkend AAAAAAABHH}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_LE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_LE}
{\qr DT_REQUIRE_LE{\bkmkstart AAAAAAABHI}
{\bkmkend AAAAAAABHI}
\cell }{\cell }{\row }
{\xe \v DT_WARN_UNARY\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_UNARY}
{\qr DT_WARN_UNARY{\bkmkstart AAAAAAABHJ}
{\bkmkend AAAAAAABHJ}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_UNARY\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_UNARY}
{\qr DT_CHECK_UNARY{\bkmkstart AAAAAAABHK}
{\bkmkend AAAAAAABHK}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_UNARY\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_UNARY}
{\qr DT_REQUIRE_UNARY{\bkmkstart AAAAAAABHL}
{\bkmkend AAAAAAABHL}
\cell }{\cell }{\row }
{\xe \v DT_WARN_UNARY_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_UNARY_FALSE}
{\qr DT_WARN_UNARY_FALSE{\bkmkstart AAAAAAABHM}
{\bkmkend AAAAAAABHM}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_UNARY_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_UNARY_FALSE}
{\qr DT_CHECK_UNARY_FALSE{\bkmkstart AAAAAAABHN}
{\bkmkend AAAAAAABHN}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_UNARY_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_UNARY_FALSE}
{\qr DT_REQUIRE_UNARY_FALSE{\bkmkstart AAAAAAABHO}
{\bkmkend AAAAAAABHO}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::Color Namespace Reference\par \pard\plain 
{\tc\tcl2 \v doctest::Color}
{\xe \v doctest::Color}
{\bkmkstart AAAAAAABHP}
{\bkmkend AAAAAAABHP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b None} = 0
, {\b White}
, {\b Red}
, {\b Green}
, {\b Blue}
, {\b Cyan}
, {\b Yellow}
, {\b Grey}
, {\b Bright} = 0x10
, {\b BrightRed} = Bright | Red
, {\b BrightGreen} = Bright | Green
, {\b LightGrey} = Bright | Grey
, {\b BrightWhite} = Bright | White
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} & {\b operator<<} ({\b std::ostream} &s, {\b Color::Enum} code)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v Enum\:doctest::Color}
{\xe \v doctest::Color\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::Color::Enum}}}
\par
{\bkmkstart AAAAAAABHQ}
{\bkmkend AAAAAAABHQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v None\:doctest::Color}
{\xe \v doctest::Color\:None}
{\qr None{\bkmkstart AAAAAAABHR}
{\bkmkend AAAAAAABHR}
\cell }{\cell }{\row }
{\xe \v White\:doctest::Color}
{\xe \v doctest::Color\:White}
{\qr White{\bkmkstart AAAAAAABHS}
{\bkmkend AAAAAAABHS}
\cell }{\cell }{\row }
{\xe \v Red\:doctest::Color}
{\xe \v doctest::Color\:Red}
{\qr Red{\bkmkstart AAAAAAABHT}
{\bkmkend AAAAAAABHT}
\cell }{\cell }{\row }
{\xe \v Green\:doctest::Color}
{\xe \v doctest::Color\:Green}
{\qr Green{\bkmkstart AAAAAAABHU}
{\bkmkend AAAAAAABHU}
\cell }{\cell }{\row }
{\xe \v Blue\:doctest::Color}
{\xe \v doctest::Color\:Blue}
{\qr Blue{\bkmkstart AAAAAAABHV}
{\bkmkend AAAAAAABHV}
\cell }{\cell }{\row }
{\xe \v Cyan\:doctest::Color}
{\xe \v doctest::Color\:Cyan}
{\qr Cyan{\bkmkstart AAAAAAABHW}
{\bkmkend AAAAAAABHW}
\cell }{\cell }{\row }
{\xe \v Yellow\:doctest::Color}
{\xe \v doctest::Color\:Yellow}
{\qr Yellow{\bkmkstart AAAAAAABHX}
{\bkmkend AAAAAAABHX}
\cell }{\cell }{\row }
{\xe \v Grey\:doctest::Color}
{\xe \v doctest::Color\:Grey}
{\qr Grey{\bkmkstart AAAAAAABHY}
{\bkmkend AAAAAAABHY}
\cell }{\cell }{\row }
{\xe \v Bright\:doctest::Color}
{\xe \v doctest::Color\:Bright}
{\qr Bright{\bkmkstart AAAAAAABHZ}
{\bkmkend AAAAAAABHZ}
\cell }{\cell }{\row }
{\xe \v BrightRed\:doctest::Color}
{\xe \v doctest::Color\:BrightRed}
{\qr BrightRed{\bkmkstart AAAAAAABIA}
{\bkmkend AAAAAAABIA}
\cell }{\cell }{\row }
{\xe \v BrightGreen\:doctest::Color}
{\xe \v doctest::Color\:BrightGreen}
{\qr BrightGreen{\bkmkstart AAAAAAABIB}
{\bkmkend AAAAAAABIB}
\cell }{\cell }{\row }
{\xe \v LightGrey\:doctest::Color}
{\xe \v doctest::Color\:LightGrey}
{\qr LightGrey{\bkmkstart AAAAAAABIC}
{\bkmkend AAAAAAABIC}
\cell }{\cell }{\row }
{\xe \v BrightWhite\:doctest::Color}
{\xe \v doctest::Color\:BrightWhite}
{\qr BrightWhite{\bkmkstart AAAAAAABID}
{\bkmkend AAAAAAABID}
\cell }{\cell }{\row }
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v operator<<\:doctest::Color}
{\xe \v doctest::Color\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b std::ostream} & doctest::Color::operator<< ({\b std::ostream} &  {\i s}, {\b Color::Enum}  {\i code})}}
\par
{\bkmkstart AAAAAAABIE}
{\bkmkend AAAAAAABIE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail Namespace Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail}
{\xe \v doctest::detail}
{\bkmkstart AAAAAAABIF}
{\bkmkend AAAAAAABIF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b assertAction}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b binaryAssertComparison}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b types}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ContextScope}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ContextScopeBase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b deferred_false}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ExceptionTranslator}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT destructor of virtual class. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Expression_lhs}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ExpressionDecomposer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b filldata}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b filldata< const char[N]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b filldata< const void * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b filldata< T * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b filldata< T[N]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b has_insertion_operator}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b has_insertion_operator< T, decltype(operator<<(declval< std::ostream & >(), declval< const T & >()), void())>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b IExceptionTranslator}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b MessageBuilder}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b RelationalComparator}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Result}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ResultBuilder}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b should_stringify_as_underlying_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b StringMakerBase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b StringMakerBase< true >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Subcase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TestCase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TestFailureException}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TestSuite}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedefs\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b funcType} = void(*)()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b assert_handler} = void(*)(const {\b AssertData} &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b reporterCreatorFunc} = {\b IReporter} *(*)(const {\b ContextOptions} &)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > T && {\b declval} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class T > {\b DOCTEST_CONSTEXPR_FUNC} T && {\b forward} (typename {\b types::remove_reference}< T >::type &t) {\b DOCTEST_NOEXCEPT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class T > {\b DOCTEST_CONSTEXPR_FUNC} T && {\b forward} (typename {\b types::remove_reference}< T >::type &&t) {\b DOCTEST_NOEXCEPT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} * {\b tlssPush} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b tlssPop} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > void {\b filloss} ({\b std::ostream} *stream, const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T , size_t N> void {\b filloss} ({\b std::ostream} *stream, const T(&in)[N])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b String} {\b toStream} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b checkIfShouldThrow} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b throwException} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L , typename R > {\b String} {\b stringifyBinaryExpr} (const {\b DOCTEST_REF_WRAP}(L) lhs, const char *op, const {\b DOCTEST_REF_WRAP}(R) rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} int {\b regTest} (const {\b TestCase} &tc)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} int {\b setTestSuite} (const {\b TestSuite} &ts)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b isDebuggerActive} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > int {\b instantiationHelper} (const T &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b failed_out_of_a_testing_context} (const {\b AssertData} &ad)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b decomp_assert} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const {\b Result} &result)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<int comparison, typename L , typename R > {\b DOCTEST_NOINLINE} bool {\b binary_assert} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b DOCTEST_NOINLINE} bool {\b unary_assert} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const {\b DOCTEST_REF_WRAP}(L) val)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b registerExceptionTranslatorImpl} (const {\b IExceptionTranslator} *et)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b ContextScope}< L > {\b MakeContextScope} (const L &lambda)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b registerReporterImpl} (const char *name, int prio, {\b reporterCreatorFunc} c, bool isReporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Reporter > {\b IReporter} * {\b reporterCreator} (const {\b ContextOptions} &o)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b DOCTEST_INTERFACE} {\b TestCase}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedef Documentation\par
\pard\plain 
{\xe \v assert_handler\:doctest::detail}
{\xe \v doctest::detail\:assert_handler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b doctest::detail::assert_handler} = typedef void (*)(const {\b AssertData}&)}}
\par
{\bkmkstart AAAAAAABIG}
{\bkmkend AAAAAAABIG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v funcType\:doctest::detail}
{\xe \v doctest::detail\:funcType}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b doctest::detail::funcType} = typedef void (*)()}}
\par
{\bkmkstart AAAAAAABIH}
{\bkmkend AAAAAAABIH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v reporterCreatorFunc\:doctest::detail}
{\xe \v doctest::detail\:reporterCreatorFunc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b doctest::detail::reporterCreatorFunc} = typedef {\b IReporter}* (*)(const {\b ContextOptions}&)}}
\par
{\bkmkstart AAAAAAABII}
{\bkmkend AAAAAAABII}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v binary_assert\:doctest::detail}
{\xe \v doctest::detail\:binary_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<int comparison, typename L , typename R > {\b DOCTEST_NOINLINE} bool doctest::detail::binary_assert ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, const {\b DOCTEST_REF_WRAP}(L)  {\i lhs}, const {\b DOCTEST_REF_WRAP}(R)  {\i rhs})}}
\par
{\bkmkstart AAAAAAABIJ}
{\bkmkend AAAAAAABIJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v checkIfShouldThrow\:doctest::detail}
{\xe \v doctest::detail\:checkIfShouldThrow}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::detail::checkIfShouldThrow ({\b assertType::Enum}  {\i at})}}
\par
{\bkmkstart AAAAAAABIK}
{\bkmkend AAAAAAABIK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v declval\:doctest::detail}
{\xe \v doctest::detail\:declval}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > T && doctest::detail::declval ()}}
\par
{\bkmkstart AAAAAAABIL}
{\bkmkend AAAAAAABIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v decomp_assert\:doctest::detail}
{\xe \v doctest::detail\:decomp_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::detail::decomp_assert ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, const {\b Result} &  {\i result})}}
\par
{\bkmkstart AAAAAAABIM}
{\bkmkend AAAAAAABIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v failed_out_of_a_testing_context\:doctest::detail}
{\xe \v doctest::detail\:failed_out_of_a_testing_context}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::failed_out_of_a_testing_context (const {\b AssertData} &  {\i ad})}}
\par
{\bkmkstart AAAAAAABIN}
{\bkmkend AAAAAAABIN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v filloss\:doctest::detail}
{\xe \v doctest::detail\:filloss}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > void doctest::detail::filloss ({\b std::ostream} *  {\i stream}, const T &  {\i in})}}
\par
{\bkmkstart AAAAAAABIO}
{\bkmkend AAAAAAABIO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v filloss\:doctest::detail}
{\xe \v doctest::detail\:filloss}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T , size_t N> void doctest::detail::filloss ({\b std::ostream} *  {\i stream}, const T(&)  {\i in}[N])}}
\par
{\bkmkstart AAAAAAABIP}
{\bkmkend AAAAAAABIP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v forward\:doctest::detail}
{\xe \v doctest::detail\:forward}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > {\b DOCTEST_CONSTEXPR_FUNC} T && doctest::detail::forward (typename {\b types::remove_reference}< T >::type &&  {\i t})}}
\par
{\bkmkstart AAAAAAABIQ}
{\bkmkend AAAAAAABIQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v forward\:doctest::detail}
{\xe \v doctest::detail\:forward}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > {\b DOCTEST_CONSTEXPR_FUNC} T && doctest::detail::forward (typename {\b types::remove_reference}< T >::type &  {\i t})}}
\par
{\bkmkstart AAAAAAABIR}
{\bkmkend AAAAAAABIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v instantiationHelper\:doctest::detail}
{\xe \v doctest::detail\:instantiationHelper}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > int doctest::detail::instantiationHelper (const T & )}}
\par
{\bkmkstart AAAAAAABIS}
{\bkmkend AAAAAAABIS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v isDebuggerActive\:doctest::detail}
{\xe \v doctest::detail\:isDebuggerActive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::detail::isDebuggerActive ()}}
\par
{\bkmkstart AAAAAAABIT}
{\bkmkend AAAAAAABIT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MakeContextScope\:doctest::detail}
{\xe \v doctest::detail\:MakeContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b ContextScope}< L > doctest::detail::MakeContextScope (const L &  {\i lambda})}}
\par
{\bkmkstart AAAAAAABIU}
{\bkmkend AAAAAAABIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v registerExceptionTranslatorImpl\:doctest::detail}
{\xe \v doctest::detail\:registerExceptionTranslatorImpl}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::registerExceptionTranslatorImpl (const {\b IExceptionTranslator} *  {\i et})}}
\par
{\bkmkstart AAAAAAABIV}
{\bkmkend AAAAAAABIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v registerReporterImpl\:doctest::detail}
{\xe \v doctest::detail\:registerReporterImpl}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::registerReporterImpl (const char *  {\i name}, int  {\i prio}, {\b reporterCreatorFunc}  {\i c}, bool  {\i isReporter})}}
\par
{\bkmkstart AAAAAAABIW}
{\bkmkend AAAAAAABIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v regTest\:doctest::detail}
{\xe \v doctest::detail\:regTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} int doctest::detail::regTest (const {\b TestCase} &  {\i tc})}}
\par
{\bkmkstart AAAAAAABIX}
{\bkmkend AAAAAAABIX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v reporterCreator\:doctest::detail}
{\xe \v doctest::detail\:reporterCreator}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename Reporter > {\b IReporter} * doctest::detail::reporterCreator (const {\b ContextOptions} &  {\i o})}}
\par
{\bkmkstart AAAAAAABIY}
{\bkmkend AAAAAAABIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setTestSuite\:doctest::detail}
{\xe \v doctest::detail\:setTestSuite}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} int doctest::detail::setTestSuite (const {\b TestSuite} &  {\i ts})}}
\par
{\bkmkstart AAAAAAABIZ}
{\bkmkend AAAAAAABIZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v stringifyBinaryExpr\:doctest::detail}
{\xe \v doctest::detail\:stringifyBinaryExpr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L , typename R > {\b String} doctest::detail::stringifyBinaryExpr (const {\b DOCTEST_REF_WRAP}(L)  {\i lhs}, const char *  {\i op}, const {\b DOCTEST_REF_WRAP}(R)  {\i rhs})}}
\par
{\bkmkstart AAAAAAABJA}
{\bkmkend AAAAAAABJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v throwException\:doctest::detail}
{\xe \v doctest::detail\:throwException}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::throwException ()}}
\par
{\bkmkstart AAAAAAABJB}
{\bkmkend AAAAAAABJB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v tlssPop\:doctest::detail}
{\xe \v doctest::detail\:tlssPop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::detail::tlssPop ()}}
\par
{\bkmkstart AAAAAAABJC}
{\bkmkend AAAAAAABJC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v tlssPush\:doctest::detail}
{\xe \v doctest::detail\:tlssPush}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b std::ostream} * doctest::detail::tlssPush ()}}
\par
{\bkmkstart AAAAAAABJD}
{\bkmkend AAAAAAABJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toStream\:doctest::detail}
{\xe \v doctest::detail\:toStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b String} doctest::detail::toStream (const T &  {\i in})}}
\par
{\bkmkstart AAAAAAABJE}
{\bkmkend AAAAAAABJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v unary_assert\:doctest::detail}
{\xe \v doctest::detail\:unary_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b DOCTEST_NOINLINE} bool doctest::detail::unary_assert ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, const {\b DOCTEST_REF_WRAP}(L)  {\i val})}}
\par
{\bkmkstart AAAAAAABJF}
{\bkmkend AAAAAAABJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT bitwise operator in conditional\par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v TestCase\:doctest::detail}
{\xe \v doctest::detail\:TestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct {\b DOCTEST_INTERFACE} {\b doctest::detail::TestCase}}}
\par
{\bkmkstart AAAAAAABJG}
{\bkmkend AAAAAAABJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::assertAction Namespace Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction}
{\bkmkstart AAAAAAABNW}
{\bkmkend AAAAAAABNW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b nothing} = 0
, {\b dbgbreak} = 1
, {\b shouldthrow} = 2
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v Enum\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::detail::assertAction::Enum}}}
\par
{\bkmkstart AAAAAAABNX}
{\bkmkend AAAAAAABNX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v nothing\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:nothing}
{\qr nothing{\bkmkstart AAAAAAABNY}
{\bkmkend AAAAAAABNY}
\cell }{\cell }{\row }
{\xe \v dbgbreak\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:dbgbreak}
{\qr dbgbreak{\bkmkstart AAAAAAABNZ}
{\bkmkend AAAAAAABNZ}
\cell }{\cell }{\row }
{\xe \v shouldthrow\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:shouldthrow}
{\qr shouldthrow{\bkmkstart AAAAAAABOA}
{\bkmkend AAAAAAABOA}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::binaryAssertComparison Namespace Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison}
{\bkmkstart AAAAAAABOB}
{\bkmkend AAAAAAABOB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b eq} = 0
, {\b ne}
, {\b gt}
, {\b lt}
, {\b ge}
, {\b le}
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v Enum\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::detail::binaryAssertComparison::Enum}}}
\par
{\bkmkstart AAAAAAABOC}
{\bkmkend AAAAAAABOC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v eq\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:eq}
{\qr eq{\bkmkstart AAAAAAABOD}
{\bkmkend AAAAAAABOD}
\cell }{\cell }{\row }
{\xe \v ne\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:ne}
{\qr ne{\bkmkstart AAAAAAABOE}
{\bkmkend AAAAAAABOE}
\cell }{\cell }{\row }
{\xe \v gt\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:gt}
{\qr gt{\bkmkstart AAAAAAABOF}
{\bkmkend AAAAAAABOF}
\cell }{\cell }{\row }
{\xe \v lt\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:lt}
{\qr lt{\bkmkstart AAAAAAABOG}
{\bkmkend AAAAAAABOG}
\cell }{\cell }{\row }
{\xe \v ge\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:ge}
{\qr ge{\bkmkstart AAAAAAABOH}
{\bkmkend AAAAAAABOH}
\cell }{\cell }{\row }
{\xe \v le\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:le}
{\qr le{\bkmkstart AAAAAAABOI}
{\bkmkend AAAAAAABOI}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::types Namespace Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types}
{\xe \v doctest::detail::types}
{\bkmkstart AAAAAAABOJ}
{\bkmkend AAAAAAABOJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b enable_if}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b enable_if< true, T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b false_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b is_array}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b is_array< T[SIZE]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b is_enum}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b is_pointer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b is_pointer< T * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b is_rvalue_reference}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b is_rvalue_reference< T && >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b remove_const}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b remove_const< const T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b remove_reference}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b remove_reference< T & >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b remove_reference< T && >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b true_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b underlying_type}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::TestCaseFailureReason Namespace Reference\par \pard\plain 
{\tc\tcl2 \v doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason}
{\bkmkstart AAAAAAABPL}
{\bkmkend AAAAAAABPL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b None} = 0
, {\b AssertFailure} = 1
, {\b Exception} = 2
, {\b Crash} = 4
, {\b TooManyFailedAsserts} = 8
, {\b Timeout} = 16
, {\b ShouldHaveFailedButDidnt} = 32
, {\b ShouldHaveFailedAndDid} = 64
, {\b DidntFailExactlyNumTimes} = 128
, {\b FailedExactlyNumTimes} = 256
, {\b CouldHaveFailedAndDid} = 512
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v Enum\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::TestCaseFailureReason::Enum}}}
\par
{\bkmkstart AAAAAAABPM}
{\bkmkend AAAAAAABPM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v None\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:None}
{\qr None{\bkmkstart AAAAAAABPN}
{\bkmkend AAAAAAABPN}
\cell }{\cell }{\row }
{\xe \v AssertFailure\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:AssertFailure}
{\qr AssertFailure{\bkmkstart AAAAAAABPO}
{\bkmkend AAAAAAABPO}
\cell }{\cell }{\row }
{\xe \v Exception\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Exception}
{\qr Exception{\bkmkstart AAAAAAABPP}
{\bkmkend AAAAAAABPP}
\cell }{\cell }{\row }
{\xe \v Crash\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Crash}
{\qr Crash{\bkmkstart AAAAAAABPQ}
{\bkmkend AAAAAAABPQ}
\cell }{\cell }{\row }
{\xe \v TooManyFailedAsserts\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:TooManyFailedAsserts}
{\qr TooManyFailedAsserts{\bkmkstart AAAAAAABPR}
{\bkmkend AAAAAAABPR}
\cell }{\cell }{\row }
{\xe \v Timeout\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Timeout}
{\qr Timeout{\bkmkstart AAAAAAABPS}
{\bkmkend AAAAAAABPS}
\cell }{\cell }{\row }
{\xe \v ShouldHaveFailedButDidnt\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:ShouldHaveFailedButDidnt}
{\qr ShouldHaveFailedButDidnt{\bkmkstart AAAAAAABPT}
{\bkmkend AAAAAAABPT}
\cell }{\cell }{\row }
{\xe \v ShouldHaveFailedAndDid\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:ShouldHaveFailedAndDid}
{\qr ShouldHaveFailedAndDid{\bkmkstart AAAAAAABPU}
{\bkmkend AAAAAAABPU}
\cell }{\cell }{\row }
{\xe \v DidntFailExactlyNumTimes\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:DidntFailExactlyNumTimes}
{\qr DidntFailExactlyNumTimes{\bkmkstart AAAAAAABPV}
{\bkmkend AAAAAAABPV}
\cell }{\cell }{\row }
{\xe \v FailedExactlyNumTimes\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:FailedExactlyNumTimes}
{\qr FailedExactlyNumTimes{\bkmkstart AAAAAAABPW}
{\bkmkend AAAAAAABPW}
\cell }{\cell }{\row }
{\xe \v CouldHaveFailedAndDid\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:CouldHaveFailedAndDid}
{\qr CouldHaveFailedAndDid{\bkmkstart AAAAAAABPX}
{\bkmkend AAAAAAABPX}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest_detail_test_suite_ns Namespace Reference\par \pard\plain 
{\tc\tcl2 \v doctest_detail_test_suite_ns}
{\xe \v doctest_detail_test_suite_ns}
{\bkmkstart AAAAAAABPY}
{\bkmkend AAAAAAABPY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b doctest::detail::TestSuite} & {\b getCurrentTestSuite} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v getCurrentTestSuite\:doctest_detail_test_suite_ns}
{\xe \v doctest_detail_test_suite_ns\:getCurrentTestSuite}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b doctest::detail::TestSuite} & doctest_detail_test_suite_ns::getCurrentTestSuite ()}}
\par
{\bkmkstart AAAAAAABPZ}
{\bkmkend AAAAAAABPZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std Namespace Reference\par \pard\plain 
{\tc\tcl2 \v std}
{\xe \v std}
{\bkmkstart AAAAAAABQA}
{\bkmkend AAAAAAABQA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b basic_istream}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b basic_ostream}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b char_traits}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b tuple}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedefs\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef decltype(nullptr) {\b nullptr_t}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef decltype(sizeof(void *) {\b size_t})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef {\b basic_ostream}< char, {\b char_traits}< char > > {\b ostream}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef {\b basic_istream}< char, {\b char_traits}< char > > {\b istream}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class traits > {\b basic_ostream}< char, traits > & {\b operator<<} ({\b basic_ostream}< char, traits > &, const char *)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedef Documentation\par
\pard\plain 
{\xe \v istream\:std}
{\xe \v std\:istream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef {\b basic_istream}<char, {\b char_traits}<char> > {\b std::istream}}}
\par
{\bkmkstart AAAAAAABQB}
{\bkmkend AAAAAAABQB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v nullptr_t\:std}
{\xe \v std\:nullptr_t}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef decltype(nullptr) {\b std::nullptr_t}}}
\par
{\bkmkstart AAAAAAABQC}
{\bkmkend AAAAAAABQC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ostream\:std}
{\xe \v std\:ostream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef {\b basic_ostream}<char, {\b char_traits}<char> > {\b std::ostream}}}
\par
{\bkmkstart AAAAAAABQD}
{\bkmkend AAAAAAABQD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v size_t\:std}
{\xe \v std\:size_t}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef decltype(sizeof(void*) std::size_t) }}
\par
{\bkmkstart AAAAAAABQE}
{\bkmkend AAAAAAABQE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v operator<<\:std}
{\xe \v std\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class traits > {\b basic_ostream}< char, traits > & std::operator<< ({\b basic_ostream}< char, traits > & , const char * )}}
\par
{\bkmkstart AAAAAAABQF}
{\bkmkend AAAAAAABQF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::Approx Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::Approx}
{\xe \v doctest::Approx}
{\bkmkstart AAAAAAAAXN}
{\bkmkend AAAAAAAAXN}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Approx} (double value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Approx} {\b operator()} (double value) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Approx} & {\b epsilon} (double newEpsilon)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Approx} & {\b scale} (double newScale)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b m_epsilon}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b m_scale}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b m_value}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator==} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator==} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator!=} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator!=} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator<=} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator<=} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator>=} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator>=} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator<} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator<} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator>} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator>} (const {\b Approx} &lhs, double rhs)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Approx\:doctest::Approx}
{\xe \v doctest::Approx\:Approx}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Approx::Approx (double  {\i value})}}
\par
{\bkmkstart AAAAAAAAXO}
{\bkmkend AAAAAAAAXO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v epsilon\:doctest::Approx}
{\xe \v doctest::Approx\:epsilon}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Approx} & doctest::Approx::epsilon (double  {\i newEpsilon})}}
\par
{\bkmkstart AAAAAAAAXP}
{\bkmkend AAAAAAAAXP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator()\:doctest::Approx}
{\xe \v doctest::Approx\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Approx} doctest::Approx::operator() (double  {\i value}) const}}
\par
{\bkmkstart AAAAAAAAXQ}
{\bkmkend AAAAAAAAXQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v scale\:doctest::Approx}
{\xe \v doctest::Approx\:scale}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Approx} & doctest::Approx::scale (double  {\i newScale})}}
\par
{\bkmkstart AAAAAAAAXR}
{\bkmkend AAAAAAAAXR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends And Related Symbol Documentation\par
\pard\plain 
{\xe \v operator!=\:doctest::Approx}
{\xe \v doctest::Approx\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator!= (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAXS}
{\bkmkend AAAAAAAAXS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator!=\:doctest::Approx}
{\xe \v doctest::Approx\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator!= (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAXT}
{\bkmkend AAAAAAAAXT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<\:doctest::Approx}
{\xe \v doctest::Approx\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator< (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAXU}
{\bkmkend AAAAAAAAXU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<\:doctest::Approx}
{\xe \v doctest::Approx\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator< (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAXV}
{\bkmkend AAAAAAAAXV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<=\:doctest::Approx}
{\xe \v doctest::Approx\:operator<=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator<= (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAXW}
{\bkmkend AAAAAAAAXW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<=\:doctest::Approx}
{\xe \v doctest::Approx\:operator<=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator<= (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAXX}
{\bkmkend AAAAAAAAXX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator==\:doctest::Approx}
{\xe \v doctest::Approx\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator== (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAXY}
{\bkmkend AAAAAAAAXY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator==\:doctest::Approx}
{\xe \v doctest::Approx\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator== (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAXZ}
{\bkmkend AAAAAAAAXZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>\:doctest::Approx}
{\xe \v doctest::Approx\:operator>}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator> (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAYA}
{\bkmkend AAAAAAAAYA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>\:doctest::Approx}
{\xe \v doctest::Approx\:operator>}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator> (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAYB}
{\bkmkend AAAAAAAAYB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>=\:doctest::Approx}
{\xe \v doctest::Approx\:operator>=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator>= (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAYC}
{\bkmkend AAAAAAAAYC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>=\:doctest::Approx}
{\xe \v doctest::Approx\:operator>=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator>= (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAYD}
{\bkmkend AAAAAAAAYD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_epsilon\:doctest::Approx}
{\xe \v doctest::Approx\:m_epsilon}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double doctest::Approx::m_epsilon}}
\par
{\bkmkstart AAAAAAAAYE}
{\bkmkend AAAAAAAAYE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_scale\:doctest::Approx}
{\xe \v doctest::Approx\:m_scale}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double doctest::Approx::m_scale}}
\par
{\bkmkstart AAAAAAAAYF}
{\bkmkend AAAAAAAAYF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_value\:doctest::Approx}
{\xe \v doctest::Approx\:m_value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double doctest::Approx::m_value}}
\par
{\bkmkstart AAAAAAAAYG}
{\bkmkend AAAAAAAAYG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::AssertData Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::AssertData}
{\xe \v doctest::AssertData}
{\bkmkstart AAAAAAAAYH}
{\bkmkend AAAAAAAAYH}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::AssertData:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1_assert_data.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b StringContains}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b AssertData} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const char *exception_type, const {\b StringContains} &exception_string)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b TestCaseData} * {\b m_test_case}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b assertType::Enum} {\b m_at}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_file}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_expr}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_failed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_threw}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_exception}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_decomp}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_threw_as}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_exception_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b DOCTEST_INTERFACE} {\b doctest::AssertData::StringContains} {\b m_exception_string}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v AssertData\:doctest::AssertData}
{\xe \v doctest::AssertData\:AssertData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::AssertData::AssertData ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, const char *  {\i exception_type}, const {\b StringContains} &  {\i exception_string})}}
\par
{\bkmkstart AAAAAAAAYI}
{\bkmkend AAAAAAAAYI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_at\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_at}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b assertType::Enum} doctest::AssertData::m_at}}
\par
{\bkmkstart AAAAAAAAYJ}
{\bkmkend AAAAAAAAYJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_decomp\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_decomp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::AssertData::m_decomp}}
\par
{\bkmkstart AAAAAAAAYK}
{\bkmkend AAAAAAAAYK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_exception\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_exception}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::AssertData::m_exception}}
\par
{\bkmkstart AAAAAAAAYL}
{\bkmkend AAAAAAAAYL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_exception_string\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_exception_string}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
class {\b DOCTEST_INTERFACE} {\b doctest::AssertData::StringContains} doctest::AssertData::m_exception_string}}
\par
{\bkmkstart AAAAAAAAYM}
{\bkmkend AAAAAAAAYM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_exception_type\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_exception_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::AssertData::m_exception_type}}
\par
{\bkmkstart AAAAAAAAYN}
{\bkmkend AAAAAAAAYN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_expr\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_expr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::AssertData::m_expr}}
\par
{\bkmkstart AAAAAAAAYO}
{\bkmkend AAAAAAAAYO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_failed\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_failed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::AssertData::m_failed}}
\par
{\bkmkstart AAAAAAAAYP}
{\bkmkend AAAAAAAAYP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_file\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::AssertData::m_file}}
\par
{\bkmkstart AAAAAAAAYQ}
{\bkmkend AAAAAAAAYQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_line\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_line}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::AssertData::m_line}}
\par
{\bkmkstart AAAAAAAAYR}
{\bkmkend AAAAAAAAYR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_test_case\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_test_case}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b TestCaseData}* doctest::AssertData::m_test_case}}
\par
{\bkmkstart AAAAAAAAYS}
{\bkmkend AAAAAAAAYS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_threw\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_threw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::AssertData::m_threw}}
\par
{\bkmkstart AAAAAAAAYT}
{\bkmkend AAAAAAAAYT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_threw_as\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_threw_as}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::AssertData::m_threw_as}}
\par
{\bkmkstart AAAAAAAAYU}
{\bkmkend AAAAAAAAYU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::basic_istream< charT, traits > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v std::basic_istream< charT, traits >}
{\xe \v std::basic_istream< charT, traits >}
{\bkmkstart AAAAAAABQG}
{\bkmkend AAAAAAABQG}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::basic_ostream< charT, traits > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v std::basic_ostream< charT, traits >}
{\xe \v std::basic_ostream< charT, traits >}
{\bkmkstart AAAAAAABQH}
{\bkmkend AAAAAAABQH}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::char_traits< charT > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::char_traits< charT >}
{\xe \v std::char_traits< charT >}
{\bkmkstart AAAAAAABQI}
{\bkmkend AAAAAAABQI}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::Contains Class Reference\par \pard\plain 
{\tc\tcl2 \v doctest::Contains}
{\xe \v doctest::Contains}
{\bkmkstart AAAAAAAAZB}
{\bkmkend AAAAAAAAZB}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Contains} (const {\b String} &{\b string})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b checkWith} (const {\b String} &other) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b string}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Contains\:doctest::Contains}
{\xe \v doctest::Contains\:Contains}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Contains::Contains (const {\b String} &  {\i string}){\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAAAZC}
{\bkmkend AAAAAAAAZC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v checkWith\:doctest::Contains}
{\xe \v doctest::Contains\:checkWith}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::Contains::checkWith (const {\b String} &  {\i other}) const}}
\par
{\bkmkstart AAAAAAAAZD}
{\bkmkend AAAAAAAAZD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v string\:doctest::Contains}
{\xe \v doctest::Contains\:string}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::Contains::string}}
\par
{\bkmkstart AAAAAAAAZE}
{\bkmkend AAAAAAAAZE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::Context Class Reference\par \pard\plain 
{\tc\tcl2 \v doctest::Context}
{\xe \v doctest::Context}
{\bkmkstart AAAAAAAAZF}
{\bkmkend AAAAAAAAZF}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Context} (int argc=0, const char *const *argv=nullptr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Context} (const {\b Context} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Context} ({\b Context} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Context} & {\b operator=} (const {\b Context} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Context} & {\b operator=} ({\b Context} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~Context} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b applyCommandLine} (int argc, const char *const *argv)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addFilter} (const char *filter, const char *value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b clearFilters} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setOption} (const char *option, bool value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setOption} (const char *option, int value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setOption} (const char *option, const char *value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b shouldExit} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setAsDefaultForAssertsOutOfTestCases} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setAssertHandler} ({\b detail::assert_handler} ah)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setCout} ({\b std::ostream} *out)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b run} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Context\:doctest::Context}
{\xe \v doctest::Context\:Context}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Context::Context (int  {\i argc} = {\f2 0}, const char *const *  {\i argv} = {\f2 nullptr}){\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAAAZG}
{\bkmkend AAAAAAAAZG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Context\:doctest::Context}
{\xe \v doctest::Context\:Context}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Context::Context (const {\b Context} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAAZH}
{\bkmkend AAAAAAAAZH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Context\:doctest::Context}
{\xe \v doctest::Context\:Context}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Context::Context ({\b Context} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAAZI}
{\bkmkend AAAAAAAAZI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~Context\:doctest::Context}
{\xe \v doctest::Context\:~Context}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Context::~Context ()}}
\par
{\bkmkstart AAAAAAAAZJ}
{\bkmkend AAAAAAAAZJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v addFilter\:doctest::Context}
{\xe \v doctest::Context\:addFilter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::addFilter (const char *  {\i filter}, const char *  {\i value})}}
\par
{\bkmkstart AAAAAAAAZK}
{\bkmkend AAAAAAAAZK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v applyCommandLine\:doctest::Context}
{\xe \v doctest::Context\:applyCommandLine}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::applyCommandLine (int  {\i argc}, const char *const *  {\i argv})}}
\par
{\bkmkstart AAAAAAAAZL}
{\bkmkend AAAAAAAAZL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v clearFilters\:doctest::Context}
{\xe \v doctest::Context\:clearFilters}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::clearFilters ()}}
\par
{\bkmkstart AAAAAAAAZM}
{\bkmkend AAAAAAAAZM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::Context}
{\xe \v doctest::Context\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Context} & doctest::Context::operator= (const {\b Context} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAAZN}
{\bkmkend AAAAAAAAZN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::Context}
{\xe \v doctest::Context\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Context} & doctest::Context::operator= ({\b Context} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAAZO}
{\bkmkend AAAAAAAAZO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v run\:doctest::Context}
{\xe \v doctest::Context\:run}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::Context::run ()}}
\par
{\bkmkstart AAAAAAAAZP}
{\bkmkend AAAAAAAAZP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setAsDefaultForAssertsOutOfTestCases\:doctest::Context}
{\xe \v doctest::Context\:setAsDefaultForAssertsOutOfTestCases}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setAsDefaultForAssertsOutOfTestCases ()}}
\par
{\bkmkstart AAAAAAAAZQ}
{\bkmkend AAAAAAAAZQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setAssertHandler\:doctest::Context}
{\xe \v doctest::Context\:setAssertHandler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setAssertHandler ({\b detail::assert_handler}  {\i ah})}}
\par
{\bkmkstart AAAAAAAAZR}
{\bkmkend AAAAAAAAZR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setCout\:doctest::Context}
{\xe \v doctest::Context\:setCout}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setCout ({\b std::ostream} *  {\i out})}}
\par
{\bkmkstart AAAAAAAAZS}
{\bkmkend AAAAAAAAZS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setOption\:doctest::Context}
{\xe \v doctest::Context\:setOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setOption (const char *  {\i option}, bool  {\i value})}}
\par
{\bkmkstart AAAAAAAAZT}
{\bkmkend AAAAAAAAZT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setOption\:doctest::Context}
{\xe \v doctest::Context\:setOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setOption (const char *  {\i option}, const char *  {\i value})}}
\par
{\bkmkstart AAAAAAAAZU}
{\bkmkend AAAAAAAAZU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setOption\:doctest::Context}
{\xe \v doctest::Context\:setOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setOption (const char *  {\i option}, int  {\i value})}}
\par
{\bkmkstart AAAAAAAAZV}
{\bkmkend AAAAAAAAZV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v shouldExit\:doctest::Context}
{\xe \v doctest::Context\:shouldExit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::Context::shouldExit ()}}
\par
{\bkmkstart AAAAAAAAZW}
{\bkmkend AAAAAAAAZW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::ContextOptions Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::ContextOptions}
{\xe \v doctest::ContextOptions}
{\bkmkstart AAAAAAAAZX}
{\bkmkend AAAAAAAAZX}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT too many fields. }}\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::ostream} * {\b cout} = nullptr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b binary_name}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b detail::TestCase} * {\b currentTest} = nullptr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b out}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b order_by}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b rand_seed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b first}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b last}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b abort_after}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b subcase_filter_levels}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b success}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b case_sensitive}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b exit}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b duration}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b minimal}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b quiet}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_throw}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_exitcode}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_run}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_intro}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_version}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_colors}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b force_colors}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_breaks}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_skip}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b gnu_file_line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_path_in_filenames}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_line_numbers}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_debug_output}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_skipped_summary}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_time_in_output}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b help}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b version}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b count}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b list_test_cases}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b list_test_suites}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b list_reporters}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT too many fields. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v abort_after\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:abort_after}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::ContextOptions::abort_after}}
\par
{\bkmkstart AAAAAAAAZY}
{\bkmkend AAAAAAAAZY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v binary_name\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:binary_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::ContextOptions::binary_name}}
\par
{\bkmkstart AAAAAAAAZZ}
{\bkmkend AAAAAAAAZZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v case_sensitive\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:case_sensitive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::case_sensitive}}
\par
{\bkmkstart AAAAAAABAA}
{\bkmkend AAAAAAABAA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v count\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::count}}
\par
{\bkmkstart AAAAAAABAB}
{\bkmkend AAAAAAABAB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v cout\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:cout}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::ostream}* doctest::ContextOptions::cout = nullptr}}
\par
{\bkmkstart AAAAAAABAC}
{\bkmkend AAAAAAABAC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v currentTest\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:currentTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b detail::TestCase}* doctest::ContextOptions::currentTest = nullptr}}
\par
{\bkmkstart AAAAAAABAD}
{\bkmkend AAAAAAABAD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v duration\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:duration}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::duration}}
\par
{\bkmkstart AAAAAAABAE}
{\bkmkend AAAAAAABAE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v exit\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:exit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::exit}}
\par
{\bkmkstart AAAAAAABAF}
{\bkmkend AAAAAAABAF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v first\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:first}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::ContextOptions::first}}
\par
{\bkmkstart AAAAAAABAG}
{\bkmkend AAAAAAABAG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v force_colors\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:force_colors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::force_colors}}
\par
{\bkmkstart AAAAAAABAH}
{\bkmkend AAAAAAABAH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v gnu_file_line\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:gnu_file_line}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::gnu_file_line}}
\par
{\bkmkstart AAAAAAABAI}
{\bkmkend AAAAAAABAI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v help\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:help}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::help}}
\par
{\bkmkstart AAAAAAABAJ}
{\bkmkend AAAAAAABAJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v last\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:last}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::ContextOptions::last}}
\par
{\bkmkstart AAAAAAABAK}
{\bkmkend AAAAAAABAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v list_reporters\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:list_reporters}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::list_reporters}}
\par
{\bkmkstart AAAAAAABAL}
{\bkmkend AAAAAAABAL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v list_test_cases\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:list_test_cases}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::list_test_cases}}
\par
{\bkmkstart AAAAAAABAM}
{\bkmkend AAAAAAABAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v list_test_suites\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:list_test_suites}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::list_test_suites}}
\par
{\bkmkstart AAAAAAABAN}
{\bkmkend AAAAAAABAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v minimal\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:minimal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::minimal}}
\par
{\bkmkstart AAAAAAABAO}
{\bkmkend AAAAAAABAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_breaks\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_breaks}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_breaks}}
\par
{\bkmkstart AAAAAAABAP}
{\bkmkend AAAAAAABAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_colors\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_colors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_colors}}
\par
{\bkmkstart AAAAAAABAQ}
{\bkmkend AAAAAAABAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_debug_output\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_debug_output}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_debug_output}}
\par
{\bkmkstart AAAAAAABAR}
{\bkmkend AAAAAAABAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_exitcode\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_exitcode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_exitcode}}
\par
{\bkmkstart AAAAAAABAS}
{\bkmkend AAAAAAABAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_intro\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_intro}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_intro}}
\par
{\bkmkstart AAAAAAABAT}
{\bkmkend AAAAAAABAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_line_numbers\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_line_numbers}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_line_numbers}}
\par
{\bkmkstart AAAAAAABAU}
{\bkmkend AAAAAAABAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_path_in_filenames\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_path_in_filenames}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_path_in_filenames}}
\par
{\bkmkstart AAAAAAABAV}
{\bkmkend AAAAAAABAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_run\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_run}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_run}}
\par
{\bkmkstart AAAAAAABAW}
{\bkmkend AAAAAAABAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_skip\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_skip}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_skip}}
\par
{\bkmkstart AAAAAAABAX}
{\bkmkend AAAAAAABAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_skipped_summary\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_skipped_summary}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_skipped_summary}}
\par
{\bkmkstart AAAAAAABAY}
{\bkmkend AAAAAAABAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_throw\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_throw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_throw}}
\par
{\bkmkstart AAAAAAABAZ}
{\bkmkend AAAAAAABAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_time_in_output\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_time_in_output}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_time_in_output}}
\par
{\bkmkstart AAAAAAABBA}
{\bkmkend AAAAAAABBA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_version\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_version}}
\par
{\bkmkstart AAAAAAABBB}
{\bkmkend AAAAAAABBB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v order_by\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:order_by}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::ContextOptions::order_by}}
\par
{\bkmkstart AAAAAAABBC}
{\bkmkend AAAAAAABBC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v out\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:out}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::ContextOptions::out}}
\par
{\bkmkstart AAAAAAABBD}
{\bkmkend AAAAAAABBD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v quiet\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:quiet}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::quiet}}
\par
{\bkmkstart AAAAAAABBE}
{\bkmkend AAAAAAABBE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v rand_seed\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:rand_seed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::ContextOptions::rand_seed}}
\par
{\bkmkstart AAAAAAABBF}
{\bkmkend AAAAAAABBF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v subcase_filter_levels\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:subcase_filter_levels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::ContextOptions::subcase_filter_levels}}
\par
{\bkmkstart AAAAAAABBG}
{\bkmkend AAAAAAABBG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v success\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:success}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::success}}
\par
{\bkmkstart AAAAAAABBH}
{\bkmkend AAAAAAABBH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v version\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::version}}
\par
{\bkmkstart AAAAAAABBI}
{\bkmkend AAAAAAABBI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::ContextScope< L > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >}
{\bkmkstart AAAAAAABJH}
{\bkmkend AAAAAAABJH}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::ContextScope< L >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classdoctest_1_1detail_1_1_context_scope.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} (const L &lambda)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} (L &&lambda)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} (const {\b ContextScope} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} ({\b ContextScope} &&) noexcept=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} & {\b operator=} (const {\b ContextScope} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} & {\b operator=} ({\b ContextScope} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b stringify} ({\b std::ostream} *s) const override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~ContextScope} () override\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Member Functions inherited from {\b doctest::detail::ContextScopeBase}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} (const {\b ContextScopeBase} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} & {\b operator=} (const {\b ContextScopeBase} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} & {\b operator=} ({\b ContextScopeBase} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~ContextScopeBase} () override=default\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Protected Member Functions inherited from {\b doctest::detail::ContextScopeBase}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} ({\b ContextScopeBase} &&other) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b destroy} ()\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Protected Attributes inherited from {\b doctest::detail::ContextScopeBase}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b need_to_destroy} \{true\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ContextScope\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:ContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::ContextScope}< L >::ContextScope (const L &  {\i lambda}){\f2 [inline]}, {\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABJI}
{\bkmkend AAAAAAABJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ContextScope\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:ContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::ContextScope}< L >::ContextScope (L &&  {\i lambda}){\f2 [inline]}, {\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABJJ}
{\bkmkend AAAAAAABJJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ContextScope\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:ContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::ContextScope}< L >::ContextScope (const {\b ContextScope}< L > & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABJK}
{\bkmkend AAAAAAABJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ContextScope\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:ContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::ContextScope}< L >::ContextScope ({\b ContextScope}< L > && ){\f2 [default]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAABJL}
{\bkmkend AAAAAAABJL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~ContextScope\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:~ContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::ContextScope}< L >::~{\b ContextScope} (){\f2 [inline]}, {\f2 [override]}}}
\par
{\bkmkstart AAAAAAABJM}
{\bkmkend AAAAAAABJM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v operator=\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b ContextScope} & {\b doctest::detail::ContextScope}< L >::operator= (const {\b ContextScope}< L > & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABJN}
{\bkmkend AAAAAAABJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b ContextScope} & {\b doctest::detail::ContextScope}< L >::operator= ({\b ContextScope}< L > && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABJO}
{\bkmkend AAAAAAABJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v stringify\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:stringify}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > void {\b doctest::detail::ContextScope}< L >::stringify ({\b std::ostream} *  {\i s}) const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABBR}
{\bkmkend AAAAAAABBR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b doctest::IContextScope} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABBQ \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::ContextScopeBase Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase}
{\bkmkstart AAAAAAABJP}
{\bkmkend AAAAAAABJP}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::ContextScopeBase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1_context_scope_base.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} (const {\b ContextScopeBase} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} & {\b operator=} (const {\b ContextScopeBase} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} & {\b operator=} ({\b ContextScopeBase} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~ContextScopeBase} () override=default\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Member Functions inherited from {\b doctest::IContextScope}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b stringify} ({\b std::ostream} *) const =0\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} ({\b ContextScopeBase} &&other) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b destroy} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b need_to_destroy} \{true\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ContextScopeBase\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:ContextScopeBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ContextScopeBase::ContextScopeBase (const {\b ContextScopeBase} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABJQ}
{\bkmkend AAAAAAABJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~ContextScopeBase\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:~ContextScopeBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ContextScopeBase::~ContextScopeBase (){\f2 [override]}, {\f2 [default]}}}
\par
{\bkmkstart AAAAAAABJR}
{\bkmkend AAAAAAABJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ContextScopeBase\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:ContextScopeBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ContextScopeBase::ContextScopeBase (){\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABJS}
{\bkmkend AAAAAAABJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ContextScopeBase\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:ContextScopeBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ContextScopeBase::ContextScopeBase ({\b ContextScopeBase} &&  {\i other}){\f2 [protected]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAABJT}
{\bkmkend AAAAAAABJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v destroy\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:destroy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::ContextScopeBase::destroy (){\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABJU}
{\bkmkend AAAAAAABJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ContextScopeBase} & doctest::detail::ContextScopeBase::operator= (const {\b ContextScopeBase} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABJV}
{\bkmkend AAAAAAABJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ContextScopeBase} & doctest::detail::ContextScopeBase::operator= ({\b ContextScopeBase} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABJW}
{\bkmkend AAAAAAABJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v need_to_destroy\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:need_to_destroy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::ContextScopeBase::need_to_destroy \{true\}{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABJX}
{\bkmkend AAAAAAABJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::CurrentTestCaseStats Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::CurrentTestCaseStats}
{\xe \v doctest::CurrentTestCaseStats}
{\bkmkstart AAAAAAABBJ}
{\bkmkend AAAAAAABBJ}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numAssertsCurrentTest}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numAssertsFailedCurrentTest}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b seconds}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b failure_flags}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b testCaseSuccess}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v failure_flags\:doctest::CurrentTestCaseStats}
{\xe \v doctest::CurrentTestCaseStats\:failure_flags}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::CurrentTestCaseStats::failure_flags}}
\par
{\bkmkstart AAAAAAABBK}
{\bkmkend AAAAAAABBK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numAssertsCurrentTest\:doctest::CurrentTestCaseStats}
{\xe \v doctest::CurrentTestCaseStats\:numAssertsCurrentTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::CurrentTestCaseStats::numAssertsCurrentTest}}
\par
{\bkmkstart AAAAAAABBL}
{\bkmkend AAAAAAABBL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numAssertsFailedCurrentTest\:doctest::CurrentTestCaseStats}
{\xe \v doctest::CurrentTestCaseStats\:numAssertsFailedCurrentTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::CurrentTestCaseStats::numAssertsFailedCurrentTest}}
\par
{\bkmkstart AAAAAAABBM}
{\bkmkend AAAAAAABBM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v seconds\:doctest::CurrentTestCaseStats}
{\xe \v doctest::CurrentTestCaseStats\:seconds}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double doctest::CurrentTestCaseStats::seconds}}
\par
{\bkmkstart AAAAAAABBN}
{\bkmkend AAAAAAABBN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testCaseSuccess\:doctest::CurrentTestCaseStats}
{\xe \v doctest::CurrentTestCaseStats\:testCaseSuccess}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::CurrentTestCaseStats::testCaseSuccess}}
\par
{\bkmkstart AAAAAAABBO}
{\bkmkend AAAAAAABBO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::deferred_false< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::deferred_false< T >}
{\xe \v doctest::detail::deferred_false< T >}
{\bkmkstart AAAAAAABJY}
{\bkmkend AAAAAAABJY}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::deferred_false< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1deferred__false.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Static Public Attributes inherited from {\b doctest::detail::types::false_type}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b false}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::types::enable_if< COND, T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::enable_if< COND, T >}
{\xe \v doctest::detail::types::enable_if< COND, T >}
{\bkmkstart AAAAAAABOK}
{\bkmkend AAAAAAABOK}
\par
{
{\f2 #include <doctest.h>}}\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::types::enable_if< true, T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::enable_if< true, T >}
{\xe \v doctest::detail::types::enable_if< true, T >}
{\bkmkstart AAAAAAABOL}
{\bkmkend AAAAAAABOL}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b T}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Typedef Documentation\par
\pard\plain 
{\xe \v type\:doctest::detail::types::enable_if< true, T >}
{\xe \v doctest::detail::types::enable_if< true, T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::enable_if}< {\b true}, {\b T} >::type =  {\b T}}}
\par
{\bkmkstart AAAAAAABOM}
{\bkmkend AAAAAAABOM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::ExceptionTranslator< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::ExceptionTranslator< T >}
{\xe \v doctest::detail::ExceptionTranslator< T >}
{\bkmkstart AAAAAAABJZ}
{\bkmkend AAAAAAABJZ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT destructor of virtual class. }}\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::ExceptionTranslator< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classdoctest_1_1detail_1_1_exception_translator.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ExceptionTranslator} ({\b String}(*translateFunction)(T))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b translate} ({\b String} &res) const override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<typename T>\par
class doctest::detail::ExceptionTranslator< T >\par
}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT destructor of virtual class. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ExceptionTranslator\:doctest::detail::ExceptionTranslator< T >}
{\xe \v doctest::detail::ExceptionTranslator< T >\:ExceptionTranslator}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b doctest::detail::ExceptionTranslator}< T >::ExceptionTranslator ({\b String}(*)(T)  {\i translateFunction}){\f2 [inline]}, {\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABKA}
{\bkmkend AAAAAAABKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v translate\:doctest::detail::ExceptionTranslator< T >}
{\xe \v doctest::detail::ExceptionTranslator< T >\:translate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > bool {\b doctest::detail::ExceptionTranslator}< T >::translate ({\b String} &  {\i res}) const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABKB}
{\bkmkend AAAAAAABKB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b doctest::detail::IExceptionTranslator} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABKC \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::Expression_lhs< L > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::Expression_lhs< L >}
{\xe \v doctest::detail::Expression_lhs< L >}
{\bkmkstart AAAAAAABKD}
{\bkmkend AAAAAAABKD}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Expression_lhs} (L &&in, {\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_NOINLINE} {\b operator Result} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b operator L} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
L {\b lhs}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b assertType::Enum} {\b m_at}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Expression_lhs\:doctest::detail::Expression_lhs< L >}
{\xe \v doctest::detail::Expression_lhs< L >\:Expression_lhs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::Expression_lhs}< L >::Expression_lhs (L &&  {\i in}, {\b assertType::Enum}  {\i at}){\f2 [inline]}, {\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABKE}
{\bkmkend AAAAAAABKE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v operator L\:doctest::detail::Expression_lhs< L >}
{\xe \v doctest::detail::Expression_lhs< L >\:operator L}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::Expression_lhs}< L >::operator L () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABKF}
{\bkmkend AAAAAAABKF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator Result\:doctest::detail::Expression_lhs< L >}
{\xe \v doctest::detail::Expression_lhs< L >\:operator Result}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b DOCTEST_NOINLINE} {\b doctest::detail::Expression_lhs}< L >::operator {\b Result} (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABKG}
{\bkmkend AAAAAAABKG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT bitwise operator in conditional\par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v lhs\:doctest::detail::Expression_lhs< L >}
{\xe \v doctest::detail::Expression_lhs< L >\:lhs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > L {\b doctest::detail::Expression_lhs}< L >::lhs}}
\par
{\bkmkstart AAAAAAABKH}
{\bkmkend AAAAAAABKH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_at\:doctest::detail::Expression_lhs< L >}
{\xe \v doctest::detail::Expression_lhs< L >\:m_at}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b assertType::Enum} {\b doctest::detail::Expression_lhs}< L >::m_at}}
\par
{\bkmkstart AAAAAAABKI}
{\bkmkend AAAAAAABKI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::ExpressionDecomposer Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::ExpressionDecomposer}
{\xe \v doctest::detail::ExpressionDecomposer}
{\bkmkstart AAAAAAABKJ}
{\bkmkend AAAAAAABKJ}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ExpressionDecomposer} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b Expression_lhs}< L > {\b operator<<} (L &&operand)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L , typename {\b types::enable_if}<!{\b doctest::detail::types::is_rvalue_reference}< L >::value, void >::type *  = nullptr> {\b Expression_lhs}< const L & > {\b operator<<} (const L &operand)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b assertType::Enum} {\b m_at}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ExpressionDecomposer\:doctest::detail::ExpressionDecomposer}
{\xe \v doctest::detail::ExpressionDecomposer\:ExpressionDecomposer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ExpressionDecomposer::ExpressionDecomposer ({\b assertType::Enum}  {\i at})}}
\par
{\bkmkstart AAAAAAABKK}
{\bkmkend AAAAAAABKK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v operator<<\:doctest::detail::ExpressionDecomposer}
{\xe \v doctest::detail::ExpressionDecomposer\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L , typename {\b types::enable_if}<!{\b doctest::detail::types::is_rvalue_reference}< L >::value, void >::type *  = nullptr> {\b Expression_lhs}< const L & > doctest::detail::ExpressionDecomposer::operator<< (const L &  {\i operand}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABKL}
{\bkmkend AAAAAAABKL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<<\:doctest::detail::ExpressionDecomposer}
{\xe \v doctest::detail::ExpressionDecomposer\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b Expression_lhs}< L > doctest::detail::ExpressionDecomposer::operator<< (L &&  {\i operand}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABKM}
{\bkmkend AAAAAAABKM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_at\:doctest::detail::ExpressionDecomposer}
{\xe \v doctest::detail::ExpressionDecomposer\:m_at}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b assertType::Enum} doctest::detail::ExpressionDecomposer::m_at}}
\par
{\bkmkstart AAAAAAABKN}
{\bkmkend AAAAAAABKN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::types::false_type Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::false_type}
{\xe \v doctest::detail::types::false_type}
{\bkmkstart AAAAAAABON}
{\bkmkend AAAAAAABON}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::types::false_type:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1types_1_1false__type.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b false}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v value\:doctest::detail::types::false_type}
{\xe \v doctest::detail::types::false_type\:value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_CONSTEXPR} {\b bool} doctest::detail::types::false_type::value = {\b false}{\f2 [static]}}}
\par
{\bkmkstart AAAAAAABOO}
{\bkmkend AAAAAAABOO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Farmer Class Reference\par \pard\plain 
{\tc\tcl2 \v Farmer}
{\xe \v Farmer}
{\bkmkstart AAAAAAAAQM}
{\bkmkend AAAAAAAAQM}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um agricultor no jogo. }}\par
{
{\f2 #include <Farmer.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b getWheat} (int quantidade, {\b Player} *player, {\b ItemsStorage} *storage)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Substitui o item semente por trigo. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b getCarrot} (int quantidade, {\b Player} *player, {\b ItemsStorage} *storage)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Substitui o item semente por cenoura. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um agricultor no jogo. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v getCarrot\:Farmer}
{\xe \v Farmer\:getCarrot}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Farmer::getCarrot (int  {\i quantidade}, {\b Player} *  {\i player}, {\b ItemsStorage} *  {\i storage})}}
\par
{\bkmkstart AAAAAAAAQN}
{\bkmkend AAAAAAAAQN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Substitui o item semente por cenoura. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantidade} \cell }{N\'FAmero de cenouras a serem obtidas. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i player} \cell }{Ponteiro para o jogador. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i storage} \cell }{Ponteiro para o armazenamento de itens. \cell }
{\row }
}
}}
{\xe \v getWheat\:Farmer}
{\xe \v Farmer\:getWheat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Farmer::getWheat (int  {\i quantidade}, {\b Player} *  {\i player}, {\b ItemsStorage} *  {\i storage})}}
\par
{\bkmkstart AAAAAAAAQO}
{\bkmkend AAAAAAAAQO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Substitui o item semente por trigo. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantidade} \cell }{N\'FAmero de trigos a serem obtidos. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i player} \cell }{Ponteiro para o jogador. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i storage} \cell }{Ponteiro para o armazenamento de itens. \cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Farmer.hpp}\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Farmer.cpp}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::filldata< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::filldata< T >}
{\xe \v doctest::detail::filldata< T >}
{\bkmkstart AAAAAAABKO}
{\bkmkend AAAAAAABKO}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b fill} ({\b std::ostream} *stream, const T &in)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v fill\:doctest::detail::filldata< T >}
{\xe \v doctest::detail::filldata< T >\:fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > static void {\b doctest::detail::filldata}< T >::fill ({\b std::ostream} *  {\i stream}, const T &  {\i in}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABKP}
{\bkmkend AAAAAAABKP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::filldata< const char[N]> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::filldata< const char[N]>}
{\xe \v doctest::detail::filldata< const char[N]>}
{\bkmkstart AAAAAAABKQ}
{\bkmkend AAAAAAABKQ}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b fill} ({\b std::ostream} *stream, const char(&in)[N])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v fill\:doctest::detail::filldata< const char[N]>}
{\xe \v doctest::detail::filldata< const char[N]>\:fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<size_t N> static void {\b doctest::detail::filldata}< const char[N]>::fill ({\b std::ostream} *  {\i stream}, const char(&)  {\i in}[N]){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABKR}
{\bkmkend AAAAAAABKR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::filldata< const void * > Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::filldata< const void * >}
{\xe \v doctest::detail::filldata< const void * >}
{\bkmkstart AAAAAAABKS}
{\bkmkend AAAAAAABKS}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b fill} ({\b std::ostream} *stream, const void *in)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v fill\:doctest::detail::filldata< const void * >}
{\xe \v doctest::detail::filldata< const void * >\:fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static void {\b doctest::detail::filldata}< const void * >::fill ({\b std::ostream} *  {\i stream}, const void *  {\i in}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABKT}
{\bkmkend AAAAAAABKT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::filldata< T * > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::filldata< T * >}
{\xe \v doctest::detail::filldata< T * >}
{\bkmkstart AAAAAAABKU}
{\bkmkend AAAAAAABKU}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b fill} ({\b std::ostream} *stream, const T *in)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v fill\:doctest::detail::filldata< T * >}
{\xe \v doctest::detail::filldata< T * >\:fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > static void {\b doctest::detail::filldata}< T * >::fill ({\b std::ostream} *  {\i stream}, const T *  {\i in}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABKV}
{\bkmkend AAAAAAABKV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::filldata< T[N]> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::filldata< T[N]>}
{\xe \v doctest::detail::filldata< T[N]>}
{\bkmkstart AAAAAAABKW}
{\bkmkend AAAAAAABKW}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b fill} ({\b std::ostream} *stream, const T(&in)[N])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v fill\:doctest::detail::filldata< T[N]>}
{\xe \v doctest::detail::filldata< T[N]>\:fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T , size_t N> static void {\b doctest::detail::filldata}< T[N]>::fill ({\b std::ostream} *  {\i stream}, const T(&)  {\i in}[N]){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABKX}
{\bkmkend AAAAAAABKX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Fisherman Class Reference\par \pard\plain 
{\tc\tcl2 \v Fisherman}
{\xe \v Fisherman}
{\bkmkstart AAAAAAAAQP}
{\bkmkend AAAAAAAAQP}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um pescador no jogo. }}\par
{
{\f2 #include <Fisherman.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b fish} ({\b Player} *player, {\b ItemsStorage} *storage)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gera peixes aleat\'F3rios para o jogador. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b cleanFish} ({\b Player} *player)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Aumenta o valor de venda dos peixes em 10%. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um pescador no jogo. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v cleanFish\:Fisherman}
{\xe \v Fisherman\:cleanFish}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Fisherman::cleanFish ({\b Player} *  {\i player})}}
\par
{\bkmkstart AAAAAAAAQQ}
{\bkmkend AAAAAAAAQQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Aumenta o valor de venda dos peixes em 10%. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i player} \cell }{Ponteiro para o jogador. \cell }
{\row }
}
}}
{\xe \v fish\:Fisherman}
{\xe \v Fisherman\:fish}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Fisherman::fish ({\b Player} *  {\i player}, {\b ItemsStorage} *  {\i storage})}}
\par
{\bkmkstart AAAAAAAAQR}
{\bkmkend AAAAAAAAQR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gera peixes aleat\'F3rios para o jogador. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i player} \cell }{Ponteiro para o jogador. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i storage} \cell }{Ponteiro para o armazenamento de itens. \cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Fisherman.hpp}\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Fisherman.cpp}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::has_insertion_operator< T, typename > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::has_insertion_operator< T, typename >}
{\xe \v doctest::detail::has_insertion_operator< T, typename >}
{\bkmkstart AAAAAAABKY}
{\bkmkend AAAAAAABKY}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::has_insertion_operator< T, typename >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1has__insertion__operator.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Static Public Attributes inherited from {\b doctest::detail::types::false_type}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b false}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::has_insertion_operator< T, decltype(operator<<(declval< std::ostream & >(), declval< const T & >()), void())> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::has_insertion_operator< T, decltype(operator<<(declval< std::ostream & >(), declval< const T & >()), void())>}
{\xe \v doctest::detail::has_insertion_operator< T, decltype(operator<<(declval< std::ostream & >(), declval< const T & >()), void())>}
{\bkmkstart AAAAAAABKZ}
{\bkmkend AAAAAAABKZ}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::has_insertion_operator< T, decltype(operator<<(declval< std::ostream & >(), declval< const T & >()), void())>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1has__insertion__operator_3_01_t_00_01decltype_07operator_3_3_07declvab094f732977dc5a8a6181e0b8269a776.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Static Public Attributes inherited from {\b doctest::detail::types::true_type}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b true}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::IContextScope Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::IContextScope}
{\xe \v doctest::IContextScope}
{\bkmkstart AAAAAAABBP}
{\bkmkend AAAAAAABBP}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::IContextScope:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1_i_context_scope.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b stringify} ({\b std::ostream} *) const =0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v stringify\:doctest::IContextScope}
{\xe \v doctest::IContextScope\:stringify}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IContextScope::stringify ({\b std::ostream} * ) const{\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABBQ}
{\bkmkend AAAAAAABBQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implemented in {\b doctest::detail::ContextScope< L >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABBR \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::IExceptionTranslator Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::IExceptionTranslator}
{\xe \v doctest::detail::IExceptionTranslator}
{\bkmkstart AAAAAAABLA}
{\bkmkend AAAAAAABLA}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::IExceptionTranslator:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1_i_exception_translator.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b translate} ({\b String} &) const =0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v translate\:doctest::detail::IExceptionTranslator}
{\xe \v doctest::detail::IExceptionTranslator\:translate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual bool doctest::detail::IExceptionTranslator::translate ({\b String} & ) const{\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABKC}
{\bkmkend AAAAAAABKC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implemented in {\b doctest::detail::ExceptionTranslator< T >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABKB \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Inventory Class Reference\par \pard\plain 
{\tc\tcl2 \v Inventory}
{\xe \v Inventory}
{\bkmkstart AAAAAAAAQS}
{\bkmkend AAAAAAAAQS}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa o invent\'E1rio de um jogador. }}\par
{
{\f2 #include <Inventory.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Inventory} (unsigned capacity)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Inventory}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b hasItem} (int id, unsigned quantidade)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Verifica se o invent\'E1rio possui uma quantidade espec\'EDfica de um item. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b insert} (int id, {\b Item} item)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Insere um item no invent\'E1rio do jogador. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b remove} (int id, unsigned quantidade)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove uma quantidade espec\'EDfica de um item do invent\'E1rio. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b printInventory} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Imprime todos os itens do invent\'E1rio. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::map< int, std::pair< {\b Item}, unsigned > > {\b list} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Lista todos os itens do invent\'E1rio com suas quantidades. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b updateItemPrice} (int id, double novoPreco)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Atualiza o pre\'E7o de um item no invent\'E1rio. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b updateItemStatus} (int id)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Atualiza o status de um item no invent\'E1rio. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa o invent\'E1rio de um jogador. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Inventory\:Inventory}
{\xe \v Inventory\:Inventory}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Inventory::Inventory (unsigned  {\i capacity})}}
\par
{\bkmkstart AAAAAAAAQT}
{\bkmkend AAAAAAAAQT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Inventory}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i capacity} \cell }{Quantidade m\'E1xima de elementos no invent\'E1rio. \cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v hasItem\:Inventory}
{\xe \v Inventory\:hasItem}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inventory::hasItem (int  {\i id}, unsigned  {\i quantidade})}}
\par
{\bkmkstart AAAAAAAAQU}
{\bkmkend AAAAAAAAQU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Verifica se o invent\'E1rio possui uma quantidade espec\'EDfica de um item. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{Identificador \'FAnico do item. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantidade} \cell }{Quantidade desejada do item. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Verdadeiro se o invent\'E1rio possuir a quantidade desejada do item, falso caso contr\'E1rio. \par
}}}}
{\xe \v insert\:Inventory}
{\xe \v Inventory\:insert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inventory::insert (int  {\i id}, {\b Item}  {\i item})}}
\par
{\bkmkstart AAAAAAAAQV}
{\bkmkend AAAAAAAAQV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Insere um item no invent\'E1rio do jogador. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{Identificador \'FAnico do item. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i item} \cell }{{\b Item} a ser inserido no invent\'E1rio. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Verdadeiro se o elemento foi inserido, falso se n\'E3o foi. \par
}}}}
{\xe \v list\:Inventory}
{\xe \v Inventory\:list}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::map< int, std::pair< {\b Item}, unsigned > > Inventory::list ()}}
\par
{\bkmkstart AAAAAAAAQW}
{\bkmkend AAAAAAAAQW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Lista todos os itens do invent\'E1rio com suas quantidades. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Mapa com os itens e suas quantidades. \par
}}}}
{\xe \v printInventory\:Inventory}
{\xe \v Inventory\:printInventory}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inventory::printInventory ()}}
\par
{\bkmkstart AAAAAAAAQX}
{\bkmkend AAAAAAAAQX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Imprime todos os itens do invent\'E1rio. }}\par
}
{\xe \v remove\:Inventory}
{\xe \v Inventory\:remove}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inventory::remove (int  {\i id}, unsigned  {\i quantidade})}}
\par
{\bkmkstart AAAAAAAAQY}
{\bkmkend AAAAAAAAQY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove uma quantidade espec\'EDfica de um item do invent\'E1rio. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{Identificador \'FAnico do item. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantidade} \cell }{Quantidade do item a ser removida. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Verdadeiro se o elemento foi removido, falso se n\'E3o foi encontrado. \par
}}}}
{\xe \v updateItemPrice\:Inventory}
{\xe \v Inventory\:updateItemPrice}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inventory::updateItemPrice (int  {\i id}, double  {\i novoPreco})}}
\par
{\bkmkstart AAAAAAAAQZ}
{\bkmkend AAAAAAAAQZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Atualiza o pre\'E7o de um item no invent\'E1rio. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{Identificador \'FAnico do item. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i novoPreco} \cell }{Novo pre\'E7o a ser atribu\'EDdo ao item. \cell }
{\row }
}
}}
{\xe \v updateItemStatus\:Inventory}
{\xe \v Inventory\:updateItemStatus}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inventory::updateItemStatus (int  {\i id})}}
\par
{\bkmkstart AAAAAAAARA}
{\bkmkend AAAAAAAARA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Atualiza o status de um item no invent\'E1rio. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{Identificador \'FAnico do item. \cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Inventory.hpp}\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Inventory.cpp}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::IReporter Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::IReporter}
{\xe \v doctest::IReporter}
{\bkmkstart AAAAAAABBS}
{\bkmkend AAAAAAABBS}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b report_query} (const {\b QueryData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_run_start} ()=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_run_end} (const {\b TestRunStats} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_start} (const {\b TestCaseData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_reenter} (const {\b TestCaseData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_end} (const {\b CurrentTestCaseStats} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_exception} (const {\b TestCaseException} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b subcase_start} (const {\b SubcaseSignature} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b subcase_end} ()=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b log_assert} (const {\b AssertData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b log_message} (const {\b MessageData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_skipped} (const {\b TestCaseData} &)=0\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\b get_num_active_contexts} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b IContextScope} *const * {\b get_active_contexts} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\b get_num_stringified_contexts} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b String} * {\b get_stringified_contexts} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v get_active_contexts\:doctest::IReporter}
{\xe \v doctest::IReporter\:get_active_contexts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static const {\b IContextScope} *const  * doctest::IReporter::get_active_contexts (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABBT}
{\bkmkend AAAAAAABBT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v get_num_active_contexts\:doctest::IReporter}
{\xe \v doctest::IReporter\:get_num_active_contexts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static int doctest::IReporter::get_num_active_contexts (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABBU}
{\bkmkend AAAAAAABBU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v get_num_stringified_contexts\:doctest::IReporter}
{\xe \v doctest::IReporter\:get_num_stringified_contexts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static int doctest::IReporter::get_num_stringified_contexts (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABBV}
{\bkmkend AAAAAAABBV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v get_stringified_contexts\:doctest::IReporter}
{\xe \v doctest::IReporter\:get_stringified_contexts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static const {\b String} * doctest::IReporter::get_stringified_contexts (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABBW}
{\bkmkend AAAAAAABBW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v log_assert\:doctest::IReporter}
{\xe \v doctest::IReporter\:log_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::log_assert (const {\b AssertData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABBX}
{\bkmkend AAAAAAABBX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v log_message\:doctest::IReporter}
{\xe \v doctest::IReporter\:log_message}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::log_message (const {\b MessageData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABBY}
{\bkmkend AAAAAAABBY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v report_query\:doctest::IReporter}
{\xe \v doctest::IReporter\:report_query}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::report_query (const {\b QueryData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABBZ}
{\bkmkend AAAAAAABBZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v subcase_end\:doctest::IReporter}
{\xe \v doctest::IReporter\:subcase_end}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::subcase_end (){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABCA}
{\bkmkend AAAAAAABCA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v subcase_start\:doctest::IReporter}
{\xe \v doctest::IReporter\:subcase_start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::subcase_start (const {\b SubcaseSignature} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABCB}
{\bkmkend AAAAAAABCB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_end\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_end}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_end (const {\b CurrentTestCaseStats} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABCC}
{\bkmkend AAAAAAABCC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_exception\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_exception}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_exception (const {\b TestCaseException} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABCD}
{\bkmkend AAAAAAABCD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_reenter\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_reenter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_reenter (const {\b TestCaseData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABCE}
{\bkmkend AAAAAAABCE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_skipped\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_skipped}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_skipped (const {\b TestCaseData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABCF}
{\bkmkend AAAAAAABCF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_start\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_start (const {\b TestCaseData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABCG}
{\bkmkend AAAAAAABCG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_run_end\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_run_end}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_run_end (const {\b TestRunStats} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABCH}
{\bkmkend AAAAAAABCH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_run_start\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_run_start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_run_start (){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABCI}
{\bkmkend AAAAAAABCI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::types::is_array< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::is_array< T >}
{\xe \v doctest::detail::types::is_array< T >}
{\bkmkstart AAAAAAABOP}
{\bkmkend AAAAAAABOP}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::types::is_array< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1types_1_1is__array.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Static Public Attributes inherited from {\b doctest::detail::types::false_type}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b false}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::types::is_array< T[SIZE]> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::is_array< T[SIZE]>}
{\xe \v doctest::detail::types::is_array< T[SIZE]>}
{\bkmkstart AAAAAAABOQ}
{\bkmkend AAAAAAABOQ}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::types::is_array< T[SIZE]>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1types_1_1is__array_3_01_t_0f_s_i_z_e_0e_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Static Public Attributes inherited from {\b doctest::detail::types::true_type}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b true}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::types::is_enum< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::is_enum< T >}
{\xe \v doctest::detail::types::is_enum< T >}
{\bkmkstart AAAAAAABOR}
{\bkmkend AAAAAAABOR}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b __is_enum}({\b T})\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v value\:doctest::detail::types::is_enum< T >}
{\xe \v doctest::detail::types::is_enum< T >\:value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b DOCTEST_CONSTEXPR} {\b bool} {\b doctest::detail::types::is_enum}< {\b T} >::value = {\b __is_enum}({\b T}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABOS}
{\bkmkend AAAAAAABOS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::types::is_pointer< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::is_pointer< T >}
{\xe \v doctest::detail::types::is_pointer< T >}
{\bkmkstart AAAAAAABOT}
{\bkmkend AAAAAAABOT}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::types::is_pointer< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1types_1_1is__pointer.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Static Public Attributes inherited from {\b doctest::detail::types::false_type}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b false}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::types::is_pointer< T * > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::is_pointer< T * >}
{\xe \v doctest::detail::types::is_pointer< T * >}
{\bkmkstart AAAAAAABOU}
{\bkmkend AAAAAAABOU}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::types::is_pointer< T * >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1types_1_1is__pointer_3_01_t_01_5_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Static Public Attributes inherited from {\b doctest::detail::types::true_type}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b true}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::types::is_rvalue_reference< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::is_rvalue_reference< T >}
{\xe \v doctest::detail::types::is_rvalue_reference< T >}
{\bkmkstart AAAAAAABOV}
{\bkmkend AAAAAAABOV}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::types::is_rvalue_reference< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1types_1_1is__rvalue__reference.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Static Public Attributes inherited from {\b doctest::detail::types::false_type}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b false}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::types::is_rvalue_reference< T && > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::is_rvalue_reference< T && >}
{\xe \v doctest::detail::types::is_rvalue_reference< T && >}
{\bkmkstart AAAAAAABOW}
{\bkmkend AAAAAAABOW}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::types::is_rvalue_reference< T && >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1types_1_1is__rvalue__reference_3_01_t_01_6_6_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Static Public Attributes inherited from {\b doctest::detail::types::true_type}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b true}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::IsNaN< F > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::IsNaN< F >}
{\xe \v doctest::IsNaN< F >}
{\bkmkstart AAAAAAABCJ}
{\bkmkend AAAAAAABCJ}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IsNaN} (F f, bool flip=false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IsNaN}< F > {\b operator!} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b operator bool} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
F {\b value}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b flipped}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v IsNaN\:doctest::IsNaN< F >}
{\xe \v doctest::IsNaN< F >\:IsNaN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename F > {\b doctest::IsNaN}< F >::IsNaN (F  {\i f}, bool  {\i flip} = {\f2 false}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABCK}
{\bkmkend AAAAAAABCK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v operator bool\:doctest::IsNaN< F >}
{\xe \v doctest::IsNaN< F >\:operator bool}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename F > {\b doctest::IsNaN}< F >::operator bool () const}}
\par
{\bkmkstart AAAAAAABCL}
{\bkmkend AAAAAAABCL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator!\:doctest::IsNaN< F >}
{\xe \v doctest::IsNaN< F >\:operator!}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename F > {\b IsNaN}< F > {\b doctest::IsNaN}< F >::operator! () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABCM}
{\bkmkend AAAAAAABCM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v flipped\:doctest::IsNaN< F >}
{\xe \v doctest::IsNaN< F >\:flipped}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename F > bool {\b doctest::IsNaN}< F >::flipped}}
\par
{\bkmkstart AAAAAAABCN}
{\bkmkend AAAAAAABCN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v value\:doctest::IsNaN< F >}
{\xe \v doctest::IsNaN< F >\:value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename F > F {\b doctest::IsNaN}< F >::value}}
\par
{\bkmkstart AAAAAAABCO}
{\bkmkend AAAAAAABCO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Item Class Reference\par \pard\plain 
{\tc\tcl2 \v Item}
{\xe \v Item}
{\bkmkstart AAAAAAAARB}
{\bkmkend AAAAAAAARB}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um item no sistema. }}\par
{
{\f2 #include <Item.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Item} (int id, std::string name, double price, bool status)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Item}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b getName} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obt\'E9m o nome do item. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b getUnitaryPrice} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obt\'E9m o pre\'E7o unit\'E1rio do item. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getId} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obt\'E9m o identificador \'FAnico do item. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b getStatus} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obt\'E9m o status do item. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b changePrice} (double novo)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Altera o pre\'E7o do item. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b changeStatus} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Altera o status do item. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um item no sistema. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Item\:Item}
{\xe \v Item\:Item}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Item::Item (int  {\i id}, std::string  {\i name}, double  {\i price}, bool  {\i status})}}
\par
{\bkmkstart AAAAAAAARC}
{\bkmkend AAAAAAAARC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Item}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{Identificador \'FAnico do item. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{Nome do item. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i price} \cell }{Pre\'E7o do item. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i status} \cell }{Status do item. \cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v changePrice\:Item}
{\xe \v Item\:changePrice}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Item::changePrice (double  {\i novo})}}
\par
{\bkmkstart AAAAAAAARD}
{\bkmkend AAAAAAAARD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Altera o pre\'E7o do item. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i novo} \cell }{Novo pre\'E7o do item. \cell }
{\row }
}
}}
{\xe \v changeStatus\:Item}
{\xe \v Item\:changeStatus}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Item::changeStatus ()}}
\par
{\bkmkstart AAAAAAAARE}
{\bkmkend AAAAAAAARE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Altera o status do item. }}\par
}
{\xe \v getId\:Item}
{\xe \v Item\:getId}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Item::getId ()}}
\par
{\bkmkstart AAAAAAAARF}
{\bkmkend AAAAAAAARF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obt\'E9m o identificador \'FAnico do item. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Identificador \'FAnico do item. \par
}}}}
{\xe \v getName\:Item}
{\xe \v Item\:getName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Item::getName ()}}
\par
{\bkmkstart AAAAAAAARG}
{\bkmkend AAAAAAAARG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obt\'E9m o nome do item. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Nome do item. \par
}}}}
{\xe \v getStatus\:Item}
{\xe \v Item\:getStatus}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Item::getStatus ()}}
\par
{\bkmkstart AAAAAAAARH}
{\bkmkend AAAAAAAARH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obt\'E9m o status do item. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Status do item. \par
}}}}
{\xe \v getUnitaryPrice\:Item}
{\xe \v Item\:getUnitaryPrice}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double Item::getUnitaryPrice ()}}
\par
{\bkmkstart AAAAAAAARI}
{\bkmkend AAAAAAAARI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obt\'E9m o pre\'E7o unit\'E1rio do item. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Pre\'E7o unit\'E1rio do item. \par
}}}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Item.hpp}\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Item.cpp}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ItemsStorage Class Reference\par \pard\plain 
{\tc\tcl2 \v ItemsStorage}
{\xe \v ItemsStorage}
{\bkmkstart AAAAAAAARJ}
{\bkmkend AAAAAAAARJ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gerencia o armazenamento de itens. }}\par
{
{\f2 #include <ItemsStorage.hpp>}}\par
Inheritance diagram for ItemsStorage:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_items_storage.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ItemsStorage} (char const *file_path)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b ItemsStorage}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~ItemsStorage} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe {\b ItemsStorage}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b write} (const {\b Item} &item) override\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Escreve um item no armazenamento. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b read} (int totalRegistros) override\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA dados do armazenamento. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Item} {\b findRandom} (const int tipo)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Encontra um item no armazenamento. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Item} {\b findByName} (const std::string name)\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Member Functions inherited from {\b StorageManager< Item >}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b StorageManager} (char const *file_path)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b StorageManager}. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Protected Attributes inherited from {\b StorageManager< Item >}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::ifstream {\b _file}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Busca um registro aleatoriamente no arquivo. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gerencia o armazenamento de itens. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ItemsStorage\:ItemsStorage}
{\xe \v ItemsStorage\:ItemsStorage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ItemsStorage::ItemsStorage (char const *  {\i file_path})}}
\par
{\bkmkstart AAAAAAAARK}
{\bkmkend AAAAAAAARK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b ItemsStorage}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i file_path} \cell }{Caminho do arquivo de armazenamento. \cell }
{\row }
}
}}
{\xe \v ~ItemsStorage\:ItemsStorage}
{\xe \v ItemsStorage\:~ItemsStorage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ItemsStorage::~ItemsStorage ()}}
\par
{\bkmkstart AAAAAAAARL}
{\bkmkend AAAAAAAARL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe {\b ItemsStorage}. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v findByName\:ItemsStorage}
{\xe \v ItemsStorage\:findByName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Item} ItemsStorage::findByName (const std::string  {\i name})}}
\par
{\bkmkstart AAAAAAAARM}
{\bkmkend AAAAAAAARM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v findRandom\:ItemsStorage}
{\xe \v ItemsStorage\:findRandom}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Item} ItemsStorage::findRandom (const int  {\i tipo})}}
\par
{\bkmkstart AAAAAAAARN}
{\bkmkend AAAAAAAARN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Encontra um item no armazenamento. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i tipo} \cell }{Tipo de item ramd\'F4mico que deve ser buscado. 1- Peixes 2- Min\'E9rios \cell }
{\row }
}
}}
{\xe \v read\:ItemsStorage}
{\xe \v ItemsStorage\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ItemsStorage::read (int  {\i totalRegistros}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAARO}
{\bkmkend AAAAAAAARO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA dados do armazenamento. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i data} \cell }{Os dados a serem lidos. \cell }
{\row }
}
}{
Reimplemented from {\b StorageManager< Item >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAARP \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v write\:ItemsStorage}
{\xe \v ItemsStorage\:write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ItemsStorage::write (const {\b Item} &  {\i item}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAARQ}
{\bkmkend AAAAAAAARQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Escreve um item no armazenamento. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i item} \cell }{O item a ser escrito. \cell }
{\row }
}
}{
Reimplemented from {\b StorageManager< Item >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAARR \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ItemsStorage.hpp}\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ItemsStorage.cpp}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Livestocker Class Reference\par \pard\plain 
{\tc\tcl2 \v Livestocker}
{\xe \v Livestocker}
{\bkmkstart AAAAAAAARS}
{\bkmkend AAAAAAAARS}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um criador de animais no jogo. }}\par
{
{\f2 #include <Livestocker.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b getBacon} (int quantidade, {\b Player} *player, {\b ItemsStorage} *storage)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Substitui o item cenoura por bacon. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b getEgg} (int quantidade, {\b Player} *player, {\b ItemsStorage} *storage)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Substitui o item trigo semente por ovo. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um criador de animais no jogo. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v getBacon\:Livestocker}
{\xe \v Livestocker\:getBacon}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Livestocker::getBacon (int  {\i quantidade}, {\b Player} *  {\i player}, {\b ItemsStorage} *  {\i storage})}}
\par
{\bkmkstart AAAAAAAART}
{\bkmkend AAAAAAAART}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Substitui o item cenoura por bacon. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantidade} \cell }{N\'FAmero de bacons a serem obtidos. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i player} \cell }{Ponteiro para o jogador. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i storage} \cell }{Ponteiro para o gerenciador de items. \cell }
{\row }
}
}}
{\xe \v getEgg\:Livestocker}
{\xe \v Livestocker\:getEgg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Livestocker::getEgg (int  {\i quantidade}, {\b Player} *  {\i player}, {\b ItemsStorage} *  {\i storage})}}
\par
{\bkmkstart AAAAAAAARU}
{\bkmkend AAAAAAAARU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Substitui o item trigo semente por ovo. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantidade} \cell }{N\'FAmero de ovos a serem obtidos. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i player} \cell }{Ponteiro para o jogador. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i storage} \cell }{Ponteiro para o gerenciador de items. \cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Livestocker.hpp}\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Livestocker.cpp}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
LojaDeItens Class Reference\par \pard\plain 
{\tc\tcl2 \v LojaDeItens}
{\xe \v LojaDeItens}
{\bkmkstart AAAAAAAARV}
{\bkmkend AAAAAAAARV}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa uma loja de itens no jogo. }}\par
{
{\f2 #include <LojaDeItens.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b LojaDeItens} ({\b Player} *player, {\b Inventory} *inventory, {\b Item} *item)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da loja de itens. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b exibirItens} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exibe os itens dispon\'EDveis na loja e permite ao jogador comprar ou vender. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b comprarItem} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Realiza a compra dos itens na loja. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b venderItem} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Vende os itens do invent\'E1rio do jogador. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa uma loja de itens no jogo. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v LojaDeItens\:LojaDeItens}
{\xe \v LojaDeItens\:LojaDeItens}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
LojaDeItens::LojaDeItens ({\b Player} *  {\i player}, {\b Inventory} *  {\i inventory}, {\b Item} *  {\i item})}}
\par
{\bkmkstart AAAAAAAARW}
{\bkmkend AAAAAAAARW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da loja de itens. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i player} \cell }{Ponteiro para o jogador que ir\'E1 interagir com a loja \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inventory} \cell }{Ponteiro para o invent\'E1rio do jogador \cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v comprarItem\:LojaDeItens}
{\xe \v LojaDeItens\:comprarItem}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void LojaDeItens::comprarItem ()}}
\par
{\bkmkstart AAAAAAAARX}
{\bkmkend AAAAAAAARX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Realiza a compra dos itens na loja. }}\par
}
{\xe \v exibirItens\:LojaDeItens}
{\xe \v LojaDeItens\:exibirItens}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void LojaDeItens::exibirItens ()}}
\par
{\bkmkstart AAAAAAAARY}
{\bkmkend AAAAAAAARY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exibe os itens dispon\'EDveis na loja e permite ao jogador comprar ou vender. }}\par
}
{\xe \v venderItem\:LojaDeItens}
{\xe \v LojaDeItens\:venderItem}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void LojaDeItens::venderItem ()}}
\par
{\bkmkstart AAAAAAAARZ}
{\bkmkend AAAAAAAARZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Vende os itens do invent\'E1rio do jogador. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b LojaDeItens.hpp}\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b LojaDeItens.cpp}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Menu Class Reference\par \pard\plain 
{\tc\tcl2 \v Menu}
{\xe \v Menu}
{\bkmkstart AAAAAAAASA}
{\bkmkend AAAAAAAASA}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa um menu. }}\par
{
{\f2 #include <Menu.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Menu} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Menu}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b listarAtividades} ({\b Player} *p, {\b ItemsStorage} *storage, {\b Sistema} *sistema)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Lista as atividades dispon\'EDveis para um jogador. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa um menu. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Menu\:Menu}
{\xe \v Menu\:Menu}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Menu::Menu ()}}
\par
{\bkmkstart AAAAAAAASB}
{\bkmkend AAAAAAAASB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Menu}. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v listarAtividades\:Menu}
{\xe \v Menu\:listarAtividades}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Menu::listarAtividades ({\b Player} *  {\i p}, {\b ItemsStorage} *  {\i storage}, {\b Sistema} *  {\i sistema})}}
\par
{\bkmkstart AAAAAAAASC}
{\bkmkend AAAAAAAASC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Lista as atividades dispon\'EDveis para um jogador. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i p} \cell }{Ponteiro para o jogador. \cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Menu.hpp}\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Menu.cpp}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::MessageBuilder Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder}
{\bkmkstart AAAAAAABLB}
{\bkmkend AAAAAAABLB}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::MessageBuilder:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1_message_builder.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageBuilder} (const char *file, int line, {\b assertType::Enum} severity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageBuilder} (const {\b MessageBuilder} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageBuilder} ({\b MessageBuilder} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageBuilder} & {\b operator=} (const {\b MessageBuilder} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageBuilder} & {\b operator=} ({\b MessageBuilder} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~MessageBuilder} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b MessageBuilder} & {\b operator,} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b DOCTEST_MSVC_SUPPRESS_WARNING_POP} {\b MessageBuilder} & {\b operator<<} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b MessageBuilder} & {\b operator*} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b log} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b react} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::ostream} * {\b m_stream}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b logged} = false\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Attributes inherited from {\b doctest::MessageData}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_string}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_file}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b assertType::Enum} {\b m_severity}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v MessageBuilder\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:MessageBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::MessageBuilder::MessageBuilder (const char *  {\i file}, int  {\i line}, {\b assertType::Enum}  {\i severity})}}
\par
{\bkmkstart AAAAAAABLC}
{\bkmkend AAAAAAABLC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MessageBuilder\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:MessageBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::MessageBuilder::MessageBuilder (const {\b MessageBuilder} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABLD}
{\bkmkend AAAAAAABLD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MessageBuilder\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:MessageBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::MessageBuilder::MessageBuilder ({\b MessageBuilder} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABLE}
{\bkmkend AAAAAAABLE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~MessageBuilder\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:~MessageBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::MessageBuilder::~MessageBuilder ()}}
\par
{\bkmkstart AAAAAAABLF}
{\bkmkend AAAAAAABLF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v log\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:log}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::MessageBuilder::log ()}}
\par
{\bkmkstart AAAAAAABLG}
{\bkmkend AAAAAAABLG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator*\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b MessageBuilder} & doctest::detail::MessageBuilder::operator* (const T &  {\i in}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABLH}
{\bkmkend AAAAAAABLH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator,\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:operator,}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b MessageBuilder} & doctest::detail::MessageBuilder::operator, (const T &  {\i in}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABLI}
{\bkmkend AAAAAAABLI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<<\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b DOCTEST_MSVC_SUPPRESS_WARNING_POP} {\b MessageBuilder} & doctest::detail::MessageBuilder::operator<< (const T &  {\i in}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABLJ}
{\bkmkend AAAAAAABLJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b MessageBuilder} & doctest::detail::MessageBuilder::operator= (const {\b MessageBuilder} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABLK}
{\bkmkend AAAAAAABLK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b MessageBuilder} & doctest::detail::MessageBuilder::operator= ({\b MessageBuilder} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABLL}
{\bkmkend AAAAAAABLL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v react\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:react}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::MessageBuilder::react ()}}
\par
{\bkmkstart AAAAAAABLM}
{\bkmkend AAAAAAABLM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v logged\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:logged}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::MessageBuilder::logged = false}}
\par
{\bkmkstart AAAAAAABLN}
{\bkmkend AAAAAAABLN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_stream\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:m_stream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::ostream}* doctest::detail::MessageBuilder::m_stream}}
\par
{\bkmkstart AAAAAAABLO}
{\bkmkend AAAAAAABLO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::MessageData Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::MessageData}
{\xe \v doctest::MessageData}
{\bkmkstart AAAAAAABCP}
{\bkmkend AAAAAAABCP}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::MessageData:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1_message_data.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_string}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_file}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b assertType::Enum} {\b m_severity}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_file\:doctest::MessageData}
{\xe \v doctest::MessageData\:m_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::MessageData::m_file}}
\par
{\bkmkstart AAAAAAABCQ}
{\bkmkend AAAAAAABCQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_line\:doctest::MessageData}
{\xe \v doctest::MessageData\:m_line}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::MessageData::m_line}}
\par
{\bkmkstart AAAAAAABCR}
{\bkmkend AAAAAAABCR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_severity\:doctest::MessageData}
{\xe \v doctest::MessageData\:m_severity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b assertType::Enum} doctest::MessageData::m_severity}}
\par
{\bkmkstart AAAAAAABCS}
{\bkmkend AAAAAAABCS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_string\:doctest::MessageData}
{\xe \v doctest::MessageData\:m_string}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::MessageData::m_string}}
\par
{\bkmkstart AAAAAAABCT}
{\bkmkend AAAAAAABCT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Miner Class Reference\par \pard\plain 
{\tc\tcl2 \v Miner}
{\xe \v Miner}
{\bkmkstart AAAAAAAASD}
{\bkmkend AAAAAAAASD}
\par
{
{\f2 #include <MIner.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ore} ({\b Player} *p, {\b ItemsStorage} *storage)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gera peixes alet\'F3rios para o usu\'E1rio. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b refine} ({\b Player} *p)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Aumenta o valor de venda dos peixes em 10%. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v ore\:Miner}
{\xe \v Miner\:ore}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Miner::ore ({\b Player} *  {\i p}, {\b ItemsStorage} *  {\i storage})}}
\par
{\bkmkstart AAAAAAAASE}
{\bkmkend AAAAAAAASE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gera peixes alet\'F3rios para o usu\'E1rio. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inventario} \cell }{invet\'E1rio do jogador com seus itens \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i storage} \cell }{itens dispon\'EDves para serem adiconados ao invet\'E1rio do player \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
o invent\'E1rio com seus valores alterados \par
}}}}
{\xe \v refine\:Miner}
{\xe \v Miner\:refine}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Miner::refine ({\b Player} *  {\i p})}}
\par
{\bkmkstart AAAAAAAASF}
{\bkmkend AAAAAAAASF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Aumenta o valor de venda dos peixes em 10%. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inventario} \cell }{invet\'E1rio do jogador com seus itens \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
o invent\'E1rio com seus valores alterados \par
}}}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MIner.hpp}\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Miner.cpp}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Player Class Reference\par \pard\plain 
{\tc\tcl2 \v Player}
{\xe \v Player}
{\bkmkstart AAAAAAAASG}
{\bkmkend AAAAAAAASG}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa um jogador. }}\par
{
{\f2 #include <Player.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Player} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor padr\'E3o da classe {\b Player}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Player} (const std::string name)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Player} com nome especificado. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b functeste} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o de teste para o jogador. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b printInventory} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Imprime o invent\'E1rio do jogador. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addXp} (float newXp)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adiciona experi\'EAncia ao jogador. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b displayProfile} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exibe o perfil do jogador. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b getLevel} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obt\'E9m o n\'EDvel do jogador. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Inventory} * {\b getInventory} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obt\'E9m o invent\'E1rio do jogador. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa um jogador. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Player\:Player}
{\xe \v Player\:Player}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Player::Player ()}}
\par
{\bkmkstart AAAAAAAASH}
{\bkmkend AAAAAAAASH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor padr\'E3o da classe {\b Player}. }}\par
}
{\xe \v Player\:Player}
{\xe \v Player\:Player}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Player::Player (const std::string  {\i name})}}
\par
{\bkmkstart AAAAAAAASI}
{\bkmkend AAAAAAAASI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Player} com nome especificado. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{O nome do jogador. \cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v addXp\:Player}
{\xe \v Player\:addXp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Player::addXp (float  {\i newXp})}}
\par
{\bkmkstart AAAAAAAASJ}
{\bkmkend AAAAAAAASJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adiciona experi\'EAncia ao jogador. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i newXp} \cell }{A quantidade de experi\'EAncia a ser adicionada. \cell }
{\row }
}
}}
{\xe \v displayProfile\:Player}
{\xe \v Player\:displayProfile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Player::displayProfile ()}}
\par
{\bkmkstart AAAAAAAASK}
{\bkmkend AAAAAAAASK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exibe o perfil do jogador. }}\par
}
{\xe \v functeste\:Player}
{\xe \v Player\:functeste}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Player::functeste ()}}
\par
{\bkmkstart AAAAAAAASL}
{\bkmkend AAAAAAAASL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o de teste para o jogador. }}\par
}
{\xe \v getInventory\:Player}
{\xe \v Player\:getInventory}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Inventory} * Player::getInventory ()}}
\par
{\bkmkstart AAAAAAAASM}
{\bkmkend AAAAAAAASM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obt\'E9m o invent\'E1rio do jogador. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Ponteiro para o invent\'E1rio do jogador. \par
}}}}
{\xe \v getLevel\:Player}
{\xe \v Player\:getLevel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Player::getLevel ()}}
\par
{\bkmkstart AAAAAAAASN}
{\bkmkend AAAAAAAASN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obt\'E9m o n\'EDvel do jogador. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
O n\'EDvel do jogador. \par
}}}}
{\xe \v printInventory\:Player}
{\xe \v Player\:printInventory}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Player::printInventory ()}}
\par
{\bkmkstart AAAAAAAASO}
{\bkmkend AAAAAAAASO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Imprime o invent\'E1rio do jogador. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Player.hpp}\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Player.cpp}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::QueryData Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::QueryData}
{\xe \v doctest::QueryData}
{\bkmkstart AAAAAAABCU}
{\bkmkend AAAAAAABCU}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b TestRunStats} * {\b run_stats} = nullptr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b TestCaseData} ** {\b data} = nullptr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b num_data} = 0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v data\:doctest::QueryData}
{\xe \v doctest::QueryData\:data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b TestCaseData}** doctest::QueryData::data = nullptr}}
\par
{\bkmkstart AAAAAAABCV}
{\bkmkend AAAAAAABCV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v num_data\:doctest::QueryData}
{\xe \v doctest::QueryData\:num_data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::QueryData::num_data = 0}}
\par
{\bkmkstart AAAAAAABCW}
{\bkmkend AAAAAAABCW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v run_stats\:doctest::QueryData}
{\xe \v doctest::QueryData\:run_stats}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b TestRunStats}* doctest::QueryData::run_stats = nullptr}}
\par
{\bkmkstart AAAAAAABCX}
{\bkmkend AAAAAAABCX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::RelationalComparator< int, L, R > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::RelationalComparator< int, L, R >}
{\xe \v doctest::detail::RelationalComparator< int, L, R >}
{\bkmkstart AAAAAAABLP}
{\bkmkend AAAAAAABLP}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator()} (const {\b DOCTEST_REF_WRAP}(L), const {\b DOCTEST_REF_WRAP}(R)) const\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v operator()\:doctest::detail::RelationalComparator< int, L, R >}
{\xe \v doctest::detail::RelationalComparator< int, L, R >\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<int , class L , class R > bool {\b doctest::detail::RelationalComparator}< int, L, R >::operator() (const   {\i DOCTEST_REF_WRAP}L, const   {\i DOCTEST_REF_WRAP}R) const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABLQ}
{\bkmkend AAAAAAABLQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::types::remove_const< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::remove_const< T >}
{\xe \v doctest::detail::types::remove_const< T >}
{\bkmkstart AAAAAAABOX}
{\bkmkend AAAAAAABOX}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b T}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Typedef Documentation\par
\pard\plain 
{\xe \v type\:doctest::detail::types::remove_const< T >}
{\xe \v doctest::detail::types::remove_const< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::remove_const}< {\b T} >::type =  {\b T}}}
\par
{\bkmkstart AAAAAAABOY}
{\bkmkend AAAAAAABOY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::types::remove_const< const T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::remove_const< const T >}
{\xe \v doctest::detail::types::remove_const< const T >}
{\bkmkstart AAAAAAABOZ}
{\bkmkend AAAAAAABOZ}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b T}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Typedef Documentation\par
\pard\plain 
{\xe \v type\:doctest::detail::types::remove_const< const T >}
{\xe \v doctest::detail::types::remove_const< const T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::remove_const}< {\b const} {\b T} >::type =  {\b T}}}
\par
{\bkmkstart AAAAAAABPA}
{\bkmkend AAAAAAABPA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::types::remove_reference< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::remove_reference< T >}
{\xe \v doctest::detail::types::remove_reference< T >}
{\bkmkstart AAAAAAABPB}
{\bkmkend AAAAAAABPB}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b T}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Typedef Documentation\par
\pard\plain 
{\xe \v type\:doctest::detail::types::remove_reference< T >}
{\xe \v doctest::detail::types::remove_reference< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::remove_reference}< {\b T} >::type =  {\b T}}}
\par
{\bkmkstart AAAAAAABPC}
{\bkmkend AAAAAAABPC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::types::remove_reference< T & > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::remove_reference< T & >}
{\xe \v doctest::detail::types::remove_reference< T & >}
{\bkmkstart AAAAAAABPD}
{\bkmkend AAAAAAABPD}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b T}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Typedef Documentation\par
\pard\plain 
{\xe \v type\:doctest::detail::types::remove_reference< T & >}
{\xe \v doctest::detail::types::remove_reference< T & >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::remove_reference}< {\b T} & >::type =  {\b T}}}
\par
{\bkmkstart AAAAAAABPE}
{\bkmkend AAAAAAABPE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::types::remove_reference< T && > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::remove_reference< T && >}
{\xe \v doctest::detail::types::remove_reference< T && >}
{\bkmkstart AAAAAAABPF}
{\bkmkend AAAAAAABPF}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b T}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Typedef Documentation\par
\pard\plain 
{\xe \v type\:doctest::detail::types::remove_reference< T && >}
{\xe \v doctest::detail::types::remove_reference< T && >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::remove_reference}< {\b T} && >::type =  {\b T}}}
\par
{\bkmkstart AAAAAAABPG}
{\bkmkend AAAAAAABPG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::Result Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::Result}
{\xe \v doctest::detail::Result}
{\bkmkstart AAAAAAABLR}
{\bkmkend AAAAAAABLR}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Result} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Result} (bool passed, const {\b String} &decomposition={\b String}())\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_passed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_decomp}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Result\:doctest::detail::Result}
{\xe \v doctest::detail::Result\:Result}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Result::Result (){\f2 [default]}}}
\par
{\bkmkstart AAAAAAABLS}
{\bkmkend AAAAAAABLS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Result\:doctest::detail::Result}
{\xe \v doctest::detail::Result\:Result}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Result::Result (bool  {\i passed}, const {\b String} &  {\i decomposition} = {\f2 {\b String}()})}}
\par
{\bkmkstart AAAAAAABLT}
{\bkmkend AAAAAAABLT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_decomp\:doctest::detail::Result}
{\xe \v doctest::detail::Result\:m_decomp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::detail::Result::m_decomp}}
\par
{\bkmkstart AAAAAAABLU}
{\bkmkend AAAAAAABLU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_passed\:doctest::detail::Result}
{\xe \v doctest::detail::Result\:m_passed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::Result::m_passed}}
\par
{\bkmkstart AAAAAAABLV}
{\bkmkend AAAAAAABLV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::ResultBuilder Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder}
{\bkmkstart AAAAAAABLW}
{\bkmkend AAAAAAABLW}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::ResultBuilder:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1_result_builder.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ResultBuilder} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const char *exception_type="", const {\b String} &exception_string="")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ResultBuilder} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const char *exception_type, const {\b Contains} &exception_string)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setResult} (const {\b Result} &res)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<int comparison, typename L , typename R > {\b DOCTEST_NOINLINE} bool {\b binary_assert} (const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b DOCTEST_NOINLINE} bool {\b unary_assert} (const {\b DOCTEST_REF_WRAP}(L) val)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b translateException} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b log} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b react} () const\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Member Functions inherited from {\b doctest::AssertData}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b AssertData} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const char *exception_type, const {\b StringContains} &exception_string)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Attributes inherited from {\b doctest::AssertData}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b TestCaseData} * {\b m_test_case}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b assertType::Enum} {\b m_at}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_file}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_expr}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_failed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_threw}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_exception}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_decomp}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_threw_as}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_exception_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b DOCTEST_INTERFACE} {\b doctest::AssertData::StringContains} {\b m_exception_string}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ResultBuilder\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:ResultBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ResultBuilder::ResultBuilder ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, const char *  {\i exception_type} = {\f2 ""}, const {\b String} &  {\i exception_string} = {\f2 ""})}}
\par
{\bkmkstart AAAAAAABLX}
{\bkmkend AAAAAAABLX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ResultBuilder\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:ResultBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ResultBuilder::ResultBuilder ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, const char *  {\i exception_type}, const {\b Contains} &  {\i exception_string})}}
\par
{\bkmkstart AAAAAAABLY}
{\bkmkend AAAAAAABLY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v binary_assert\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:binary_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<int comparison, typename L , typename R > {\b DOCTEST_NOINLINE} bool doctest::detail::ResultBuilder::binary_assert (const {\b DOCTEST_REF_WRAP}(L)  {\i lhs}, const {\b DOCTEST_REF_WRAP}(R)  {\i rhs}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABLZ}
{\bkmkend AAAAAAABLZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v log\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:log}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::ResultBuilder::log ()}}
\par
{\bkmkstart AAAAAAABMA}
{\bkmkend AAAAAAABMA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v react\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:react}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::ResultBuilder::react () const}}
\par
{\bkmkstart AAAAAAABMB}
{\bkmkend AAAAAAABMB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setResult\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:setResult}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::ResultBuilder::setResult (const {\b Result} &  {\i res})}}
\par
{\bkmkstart AAAAAAABMC}
{\bkmkend AAAAAAABMC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v translateException\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:translateException}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::ResultBuilder::translateException ()}}
\par
{\bkmkstart AAAAAAABMD}
{\bkmkend AAAAAAABMD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v unary_assert\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:unary_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b DOCTEST_NOINLINE} bool doctest::detail::ResultBuilder::unary_assert (const {\b DOCTEST_REF_WRAP}(L)  {\i val}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABME}
{\bkmkend AAAAAAABME}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT bitwise operator in conditional\par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::should_stringify_as_underlying_type< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::should_stringify_as_underlying_type< T >}
{\xe \v doctest::detail::should_stringify_as_underlying_type< T >}
{\bkmkstart AAAAAAABMF}
{\bkmkend AAAAAAABMF}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b DOCTEST_CONSTEXPR} bool {\b value} = {\b detail::types::is_enum}<T>::value && !{\b doctest::detail::has_insertion_operator}<T>::value\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v value\:doctest::detail::should_stringify_as_underlying_type< T >}
{\xe \v doctest::detail::should_stringify_as_underlying_type< T >\:value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b DOCTEST_CONSTEXPR} bool {\b doctest::detail::should_stringify_as_underlying_type}< T >::value = {\b detail::types::is_enum}<T>::value && !{\b doctest::detail::has_insertion_operator}<T>::value{\f2 [static]}}}
\par
{\bkmkstart AAAAAAABMG}
{\bkmkend AAAAAAABMG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Sistema Class Reference\par \pard\plain 
{\tc\tcl2 \v Sistema}
{\xe \v Sistema}
{\bkmkstart AAAAAAAASP}
{\bkmkend AAAAAAAASP}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa o sistema do jogo. }}\par
{
{\f2 #include <Sistema.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Sistema} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Sistema}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b criarPersonagem} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cria um personagem no sistema. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b printText} (const std::string texto)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Imprime um texto na sa\'EDda padr\'E3o. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa o sistema do jogo. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Sistema\:Sistema}
{\xe \v Sistema\:Sistema}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Sistema::Sistema ()}}
\par
{\bkmkstart AAAAAAAASQ}
{\bkmkend AAAAAAAASQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Sistema}. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v criarPersonagem\:Sistema}
{\xe \v Sistema\:criarPersonagem}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Sistema::criarPersonagem ()}}
\par
{\bkmkstart AAAAAAAASR}
{\bkmkend AAAAAAAASR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cria um personagem no sistema. }}\par
}
{\xe \v printText\:Sistema}
{\xe \v Sistema\:printText}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Sistema::printText (const std::string  {\i texto})}}
\par
{\bkmkstart AAAAAAAASS}
{\bkmkend AAAAAAAASS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Imprime um texto na sa\'EDda padr\'E3o. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i texto} \cell }{O texto a ser impresso. \cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Sistema.hpp}\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Sistema.cpp}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
StorageManager< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v StorageManager< T >}
{\xe \v StorageManager< T >}
{\bkmkstart AAAAAAAAST}
{\bkmkend AAAAAAAAST}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe modelo para gerenciamento de armazenamento. }}\par
{
{\f2 #include <StorageManager.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b StorageManager} (char const *file_path)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b StorageManager}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b write} (const T &data)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Escreve dados no arquivo de armazenamento. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b read} (int totalRegistros)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA dados do arquivo de armazenamento. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::ifstream {\b _file}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Busca um registro aleatoriamente no arquivo. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<typename T>\par
class StorageManager< T >\par
}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe modelo para gerenciamento de armazenamento. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Template Parameters\par}
\pard\plain \s80\li0\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i T} \cell }{Tipo de dados a ser armazenado. \cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v StorageManager\:StorageManager< T >}
{\xe \v StorageManager< T >\:StorageManager}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b StorageManager}< T >{\b ::StorageManager} (char const *  {\i file_path})}}
\par
{\bkmkstart AAAAAAAASU}
{\bkmkend AAAAAAAASU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b StorageManager}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i file_path} \cell }{Caminho do arquivo de armazenamento. \cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v read\:StorageManager< T >}
{\xe \v StorageManager< T >\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > virtual void {\b StorageManager}< T >::read (int  {\i totalRegistros}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAARP}
{\bkmkend AAAAAAAARP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA dados do arquivo de armazenamento. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i data} \cell }{Os dados a serem lidos. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i totalRegistros} \cell }{O n\'FAmero total de registros a serem lidos. \cell }
{\row }
}
}{
Reimplemented in {\b ItemsStorage} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAARO \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v write\:StorageManager< T >}
{\xe \v StorageManager< T >\:write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > virtual void {\b StorageManager}< T >::write (const T &  {\i data}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAARR}
{\bkmkend AAAAAAAARR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Escreve dados no arquivo de armazenamento. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i data} \cell }{Os dados a serem escritos. \cell }
{\row }
}
}{
Reimplemented in {\b ItemsStorage} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAARQ \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v _file\:StorageManager< T >}
{\xe \v StorageManager< T >\:_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > std::ifstream {\b StorageManager}< T >::_file{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAASV}
{\bkmkend AAAAAAAASV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Busca um registro aleatoriamente no arquivo. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
registro escolhido. Fluxo de arquivo para leitura. \par
}}}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b StorageManager.hpp}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::String Class Reference\par \pard\plain 
{\tc\tcl2 \v doctest::String}
{\xe \v doctest::String}
{\bkmkstart AAAAAAABCY}
{\bkmkend AAAAAAABCY}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b size_type} = {\b DOCTEST_CONFIG_STRING_SIZE_TYPE}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~String} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} (const char *in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} (const char *in, {\b size_type} in_size)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} ({\b std::istream} &in, {\b size_type} in_size)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} (const {\b String} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} & {\b operator=} (const {\b String} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} & {\b operator+=} (const {\b String} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} ({\b String} &&other) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} & {\b operator=} ({\b String} &&other) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b operator[]} ({\b size_type} i) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char & {\b operator[]} ({\b size_type} i)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b c_str} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b c_str} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b size_type} {\b size} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b size_type} {\b capacity} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b substr} ({\b size_type} pos, {\b size_type} cnt={\b npos}) &&\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b substr} ({\b size_type} pos, {\b size_type} cnt={\b npos}) const &\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b size_type} {\b find} (char ch, {\b size_type} pos=0) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b size_type} {\b rfind} (char ch, {\b size_type} pos={\b npos}) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b compare} (const char *other, bool no_case=false) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b compare} (const {\b String} &other, bool no_case=false) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b DOCTEST_CONSTEXPR} {\b size_type} {\b npos} = static_cast<{\b size_type}>(-1)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} & {\b operator<<} ({\b std::ostream} &s, const {\b String} &in)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Typedef Documentation\par
\pard\plain 
{\xe \v size_type\:doctest::String}
{\xe \v doctest::String\:size_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b doctest::String::size_type} =  {\b DOCTEST_CONFIG_STRING_SIZE_TYPE}}}
\par
{\bkmkstart AAAAAAABCZ}
{\bkmkend AAAAAAABCZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String (){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAABDA}
{\bkmkend AAAAAAABDA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~String\:doctest::String}
{\xe \v doctest::String\:~String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::~String ()}}
\par
{\bkmkstart AAAAAAABDB}
{\bkmkend AAAAAAABDB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String (const char *  {\i in})}}
\par
{\bkmkstart AAAAAAABDC}
{\bkmkend AAAAAAABDC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String (const char *  {\i in}, {\b size_type}  {\i in_size})}}
\par
{\bkmkstart AAAAAAABDD}
{\bkmkend AAAAAAABDD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String ({\b std::istream} &  {\i in}, {\b size_type}  {\i in_size})}}
\par
{\bkmkstart AAAAAAABDE}
{\bkmkend AAAAAAABDE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String (const {\b String} &  {\i other})}}
\par
{\bkmkstart AAAAAAABDF}
{\bkmkend AAAAAAABDF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String ({\b String} &&  {\i other}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAABDG}
{\bkmkend AAAAAAABDG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v c_str\:doctest::String}
{\xe \v doctest::String\:c_str}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char * doctest::String::c_str (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABDH}
{\bkmkend AAAAAAABDH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v c_str\:doctest::String}
{\xe \v doctest::String\:c_str}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * doctest::String::c_str () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABDI}
{\bkmkend AAAAAAABDI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v capacity\:doctest::String}
{\xe \v doctest::String\:capacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b size_type} doctest::String::capacity () const}}
\par
{\bkmkstart AAAAAAABDJ}
{\bkmkend AAAAAAABDJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v compare\:doctest::String}
{\xe \v doctest::String\:compare}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::String::compare (const char *  {\i other}, bool  {\i no_case} = {\f2 false}) const}}
\par
{\bkmkstart AAAAAAABDK}
{\bkmkend AAAAAAABDK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v compare\:doctest::String}
{\xe \v doctest::String\:compare}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::String::compare (const {\b String} &  {\i other}, bool  {\i no_case} = {\f2 false}) const}}
\par
{\bkmkstart AAAAAAABDL}
{\bkmkend AAAAAAABDL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v find\:doctest::String}
{\xe \v doctest::String\:find}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b size_type} doctest::String::find (char  {\i ch}, {\b size_type}  {\i pos} = {\f2 0}) const}}
\par
{\bkmkstart AAAAAAABDM}
{\bkmkend AAAAAAABDM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator+=\:doctest::String}
{\xe \v doctest::String\:operator+=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} & doctest::String::operator+= (const {\b String} &  {\i other})}}
\par
{\bkmkstart AAAAAAABDN}
{\bkmkend AAAAAAABDN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::String}
{\xe \v doctest::String\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} & doctest::String::operator= (const {\b String} &  {\i other})}}
\par
{\bkmkstart AAAAAAABDO}
{\bkmkend AAAAAAABDO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::String}
{\xe \v doctest::String\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} & doctest::String::operator= ({\b String} &&  {\i other}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAABDP}
{\bkmkend AAAAAAABDP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator[]\:doctest::String}
{\xe \v doctest::String\:operator[]}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char & doctest::String::operator[] ({\b size_type}  {\i i})}}
\par
{\bkmkstart AAAAAAABDQ}
{\bkmkend AAAAAAABDQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator[]\:doctest::String}
{\xe \v doctest::String\:operator[]}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char doctest::String::operator[] ({\b size_type}  {\i i}) const}}
\par
{\bkmkstart AAAAAAABDR}
{\bkmkend AAAAAAABDR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v rfind\:doctest::String}
{\xe \v doctest::String\:rfind}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b size_type} doctest::String::rfind (char  {\i ch}, {\b size_type}  {\i pos} = {\f2 {\b npos}}) const}}
\par
{\bkmkstart AAAAAAABDS}
{\bkmkend AAAAAAABDS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v size\:doctest::String}
{\xe \v doctest::String\:size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b size_type} doctest::String::size () const}}
\par
{\bkmkstart AAAAAAABDT}
{\bkmkend AAAAAAABDT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v substr\:doctest::String}
{\xe \v doctest::String\:substr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::String::substr ({\b size_type}  {\i pos}, {\b size_type}  {\i cnt} = {\f2 {\b npos}}) &&}}
\par
{\bkmkstart AAAAAAABDU}
{\bkmkend AAAAAAABDU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v substr\:doctest::String}
{\xe \v doctest::String\:substr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::String::substr ({\b size_type}  {\i pos}, {\b size_type}  {\i cnt} = {\f2 {\b npos}}) const &}}
\par
{\bkmkstart AAAAAAABDV}
{\bkmkend AAAAAAABDV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends And Related Symbol Documentation\par
\pard\plain 
{\xe \v operator<<\:doctest::String}
{\xe \v doctest::String\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b std::ostream} & operator<< ({\b std::ostream} &  {\i s}, const {\b String} &  {\i in}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABDW}
{\bkmkend AAAAAAABDW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v buf\:doctest::String}
{\xe \v doctest::String\:buf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char doctest::String::buf[len]}}
\par
{\bkmkstart AAAAAAABDX}
{\bkmkend AAAAAAABDX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v data\:doctest::String}
{\xe \v doctest::String\:data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
view doctest::String::data}}
\par
{\bkmkstart AAAAAAABDY}
{\bkmkend AAAAAAABDY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v npos\:doctest::String}
{\xe \v doctest::String\:npos}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_CONSTEXPR} {\b size_type} doctest::String::npos = static_cast<{\b size_type}>(-1){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABDZ}
{\bkmkend AAAAAAABDZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::AssertData::StringContains Class Reference\par \pard\plain 
{\tc\tcl2 \v doctest::AssertData::StringContains}
{\xe \v doctest::AssertData::StringContains}
{\bkmkstart AAAAAAAAYV}
{\bkmkend AAAAAAAAYV}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b StringContains} (const {\b String} &str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b StringContains} ({\b Contains} cntn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b check} (const {\b String} &str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b operator const String &} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b c_str} () const\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v StringContains\:doctest::AssertData::StringContains}
{\xe \v doctest::AssertData::StringContains\:StringContains}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::AssertData::StringContains::StringContains (const {\b String} &  {\i str}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAYW}
{\bkmkend AAAAAAAAYW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v StringContains\:doctest::AssertData::StringContains}
{\xe \v doctest::AssertData::StringContains\:StringContains}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::AssertData::StringContains::StringContains ({\b Contains}  {\i cntn}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAYX}
{\bkmkend AAAAAAAAYX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v c_str\:doctest::AssertData::StringContains}
{\xe \v doctest::AssertData::StringContains\:c_str}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * doctest::AssertData::StringContains::c_str () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAYY}
{\bkmkend AAAAAAAAYY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v check\:doctest::AssertData::StringContains}
{\xe \v doctest::AssertData::StringContains\:check}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::AssertData::StringContains::check (const {\b String} &  {\i str}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAYZ}
{\bkmkend AAAAAAAAYZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator const String &\:doctest::AssertData::StringContains}
{\xe \v doctest::AssertData::StringContains\:operator const String &}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::AssertData::StringContains::operator const {\b String} & () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAZA}
{\bkmkend AAAAAAAAZA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::StringMaker< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::StringMaker< T >}
{\xe \v doctest::StringMaker< T >}
{\bkmkstart AAAAAAABEA}
{\bkmkend AAAAAAABEA}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::StringMaker< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1_string_maker.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Static Public Member Functions inherited from {\b doctest::detail::StringMakerBase< detail::has_insertion_operator< T >::value||detail::types::is_pointer< T >::value||detail::types::is_array< T >::value >}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b String} {\b convert} (const {\b DOCTEST_REF_WRAP}(T))\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::StringMakerBase< C > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::StringMakerBase< C >}
{\xe \v doctest::detail::StringMakerBase< C >}
{\bkmkstart AAAAAAABMH}
{\bkmkend AAAAAAABMH}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > static {\b String} {\b convert} (const {\b DOCTEST_REF_WRAP}(T))\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v convert\:doctest::detail::StringMakerBase< C >}
{\xe \v doctest::detail::StringMakerBase< C >\:convert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<bool C> template<typename T > static {\b String} {\b doctest::detail::StringMakerBase}< C >::convert (const   {\i DOCTEST_REF_WRAP}T){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABMI}
{\bkmkend AAAAAAABMI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::StringMakerBase< true > Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::StringMakerBase< true >}
{\xe \v doctest::detail::StringMakerBase< true >}
{\bkmkstart AAAAAAABMJ}
{\bkmkend AAAAAAABMJ}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > static {\b String} {\b convert} (const {\b DOCTEST_REF_WRAP}(T) in)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v convert\:doctest::detail::StringMakerBase< true >}
{\xe \v doctest::detail::StringMakerBase< true >\:convert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > static {\b String} {\b doctest::detail::StringMakerBase}< true >::convert (const {\b DOCTEST_REF_WRAP}(T)  {\i in}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABMK}
{\bkmkend AAAAAAABMK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::Subcase Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase}
{\bkmkstart AAAAAAABML}
{\bkmkend AAAAAAABML}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Subcase} (const {\b String} &name, const char *file, int line)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Subcase} (const {\b Subcase} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Subcase} ({\b Subcase} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Subcase} & {\b operator=} (const {\b Subcase} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Subcase} & {\b operator=} ({\b Subcase} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~Subcase} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b operator bool} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SubcaseSignature} {\b m_signature}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_entered} = false\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Subcase\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:Subcase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Subcase::Subcase (const {\b String} &  {\i name}, const char *  {\i file}, int  {\i line})}}
\par
{\bkmkstart AAAAAAABMM}
{\bkmkend AAAAAAABMM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Subcase\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:Subcase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Subcase::Subcase (const {\b Subcase} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABMN}
{\bkmkend AAAAAAABMN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Subcase\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:Subcase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Subcase::Subcase ({\b Subcase} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABMO}
{\bkmkend AAAAAAABMO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~Subcase\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:~Subcase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Subcase::~Subcase ()}}
\par
{\bkmkstart AAAAAAABMP}
{\bkmkend AAAAAAABMP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v operator bool\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:operator bool}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Subcase::operator bool () const}}
\par
{\bkmkstart AAAAAAABMQ}
{\bkmkend AAAAAAABMQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Subcase} & doctest::detail::Subcase::operator= (const {\b Subcase} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABMR}
{\bkmkend AAAAAAABMR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Subcase} & doctest::detail::Subcase::operator= ({\b Subcase} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABMS}
{\bkmkend AAAAAAABMS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_entered\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:m_entered}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::Subcase::m_entered = false}}
\par
{\bkmkstart AAAAAAABMT}
{\bkmkend AAAAAAABMT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_signature\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:m_signature}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b SubcaseSignature} doctest::detail::Subcase::m_signature}}
\par
{\bkmkstart AAAAAAABMU}
{\bkmkend AAAAAAABMU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::SubcaseSignature Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature}
{\bkmkstart AAAAAAABEB}
{\bkmkend AAAAAAABEB}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator==} (const {\b SubcaseSignature} &other) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator<} (const {\b SubcaseSignature} &other) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_name}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_file}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_line}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v operator<\:doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::SubcaseSignature::operator< (const {\b SubcaseSignature} &  {\i other}) const}}
\par
{\bkmkstart AAAAAAABEC}
{\bkmkend AAAAAAABEC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator==\:doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::SubcaseSignature::operator== (const {\b SubcaseSignature} &  {\i other}) const}}
\par
{\bkmkstart AAAAAAABED}
{\bkmkend AAAAAAABED}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_file\:doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature\:m_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::SubcaseSignature::m_file}}
\par
{\bkmkstart AAAAAAABEE}
{\bkmkend AAAAAAABEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_line\:doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature\:m_line}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::SubcaseSignature::m_line}}
\par
{\bkmkstart AAAAAAABEF}
{\bkmkend AAAAAAABEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_name\:doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature\:m_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::SubcaseSignature::m_name}}
\par
{\bkmkstart AAAAAAABEG}
{\bkmkend AAAAAAABEG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::TestCase Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase}
{\bkmkstart AAAAAAABMV}
{\bkmkend AAAAAAABMV}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::TestCase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1_test_case.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestCase} ({\b funcType} test, const char *file, unsigned line, const {\b TestSuite} &test_suite, const {\b String} &type={\b String}(), int template_id=-1)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestCase} (const {\b TestCase} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestCase} ({\b TestCase} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestCase} & {\b operator=} (const {\b TestCase} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_MSVC_SUPPRESS_WARNING_POP} {\b TestCase} & {\b operator=} ({\b TestCase} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestCase} & {\b operator*} (const char *in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b TestCase} & {\b operator*} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator<} (const {\b TestCase} &other) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~TestCase} ()=default\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b funcType} {\b m_test}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_template_id}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_full_name}\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Attributes inherited from {\b doctest::TestCaseData}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_file}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b m_line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_name}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_test_suite}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_description}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_skip}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_no_breaks}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_no_output}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_may_fail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_should_fail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_expected_failures}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b m_timeout}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v TestCase\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:TestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::TestCase::TestCase ({\b funcType}  {\i test}, const char *  {\i file}, unsigned  {\i line}, const {\b TestSuite} &  {\i test_suite}, const {\b String} &  {\i type} = {\f2 {\b String}()}, int  {\i template_id} = {\f2 -1})}}
\par
{\bkmkstart AAAAAAABMW}
{\bkmkend AAAAAAABMW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TestCase\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:TestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::TestCase::TestCase (const {\b TestCase} &  {\i other})}}
\par
{\bkmkstart AAAAAAABMX}
{\bkmkend AAAAAAABMX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TestCase\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:TestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::TestCase::TestCase ({\b TestCase} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABMY}
{\bkmkend AAAAAAABMY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~TestCase\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:~TestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::TestCase::~TestCase (){\f2 [default]}}}
\par
{\bkmkstart AAAAAAABMZ}
{\bkmkend AAAAAAABMZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v operator*\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b TestCase} & doctest::detail::TestCase::operator* (const char *  {\i in})}}
\par
{\bkmkstart AAAAAAABNA}
{\bkmkend AAAAAAABNA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator*\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b TestCase} & doctest::detail::TestCase::operator* (const T &  {\i in}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABNB}
{\bkmkend AAAAAAABNB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::TestCase::operator< (const {\b TestCase} &  {\i other}) const}}
\par
{\bkmkstart AAAAAAABNC}
{\bkmkend AAAAAAABNC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b TestCase} & doctest::detail::TestCase::operator= (const {\b TestCase} &  {\i other})}}
\par
{\bkmkstart AAAAAAABND}
{\bkmkend AAAAAAABND}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_MSVC_SUPPRESS_WARNING_POP} {\b TestCase} & doctest::detail::TestCase::operator= ({\b TestCase} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABNE}
{\bkmkend AAAAAAABNE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_full_name\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:m_full_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::detail::TestCase::m_full_name}}
\par
{\bkmkstart AAAAAAABNF}
{\bkmkend AAAAAAABNF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_template_id\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:m_template_id}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::detail::TestCase::m_template_id}}
\par
{\bkmkstart AAAAAAABNG}
{\bkmkend AAAAAAABNG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_test\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:m_test}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b funcType} doctest::detail::TestCase::m_test}}
\par
{\bkmkstart AAAAAAABNH}
{\bkmkend AAAAAAABNH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_type\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:m_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::detail::TestCase::m_type}}
\par
{\bkmkstart AAAAAAABNI}
{\bkmkend AAAAAAABNI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::TestCaseData Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::TestCaseData}
{\xe \v doctest::TestCaseData}
{\bkmkstart AAAAAAABEH}
{\bkmkend AAAAAAABEH}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::TestCaseData:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1_test_case_data.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_file}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b m_line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_name}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_test_suite}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_description}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_skip}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_no_breaks}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_no_output}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_may_fail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_should_fail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_expected_failures}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b m_timeout}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_description\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_description}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::TestCaseData::m_description}}
\par
{\bkmkstart AAAAAAABEI}
{\bkmkend AAAAAAABEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_expected_failures\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_expected_failures}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::TestCaseData::m_expected_failures}}
\par
{\bkmkstart AAAAAAABEJ}
{\bkmkend AAAAAAABEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_file\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::TestCaseData::m_file}}
\par
{\bkmkstart AAAAAAABEK}
{\bkmkend AAAAAAABEK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_line\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_line}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::TestCaseData::m_line}}
\par
{\bkmkstart AAAAAAABEL}
{\bkmkend AAAAAAABEL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_may_fail\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_may_fail}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::TestCaseData::m_may_fail}}
\par
{\bkmkstart AAAAAAABEM}
{\bkmkend AAAAAAABEM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_name\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::TestCaseData::m_name}}
\par
{\bkmkstart AAAAAAABEN}
{\bkmkend AAAAAAABEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_no_breaks\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_no_breaks}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::TestCaseData::m_no_breaks}}
\par
{\bkmkstart AAAAAAABEO}
{\bkmkend AAAAAAABEO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_no_output\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_no_output}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::TestCaseData::m_no_output}}
\par
{\bkmkstart AAAAAAABEP}
{\bkmkend AAAAAAABEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_should_fail\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_should_fail}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::TestCaseData::m_should_fail}}
\par
{\bkmkstart AAAAAAABEQ}
{\bkmkend AAAAAAABEQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_skip\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_skip}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::TestCaseData::m_skip}}
\par
{\bkmkstart AAAAAAABER}
{\bkmkend AAAAAAABER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_test_suite\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_test_suite}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::TestCaseData::m_test_suite}}
\par
{\bkmkstart AAAAAAABES}
{\bkmkend AAAAAAABES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_timeout\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_timeout}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double doctest::TestCaseData::m_timeout}}
\par
{\bkmkstart AAAAAAABET}
{\bkmkend AAAAAAABET}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::TestCaseException Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::TestCaseException}
{\xe \v doctest::TestCaseException}
{\bkmkstart AAAAAAABEU}
{\bkmkend AAAAAAABEU}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b error_string}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b is_crash}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v error_string\:doctest::TestCaseException}
{\xe \v doctest::TestCaseException\:error_string}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::TestCaseException::error_string}}
\par
{\bkmkstart AAAAAAABEV}
{\bkmkend AAAAAAABEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v is_crash\:doctest::TestCaseException}
{\xe \v doctest::TestCaseException\:is_crash}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::TestCaseException::is_crash}}
\par
{\bkmkstart AAAAAAABEW}
{\bkmkend AAAAAAABEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::TestFailureException Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::TestFailureException}
{\xe \v doctest::detail::TestFailureException}
{\bkmkstart AAAAAAABNJ}
{\bkmkend AAAAAAABNJ}
\par
{
{\f2 #include <doctest.h>}}\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::TestRunStats Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::TestRunStats}
{\xe \v doctest::TestRunStats}
{\bkmkstart AAAAAAABEX}
{\bkmkend AAAAAAABEX}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b numTestCases}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b numTestCasesPassingFilters}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b numTestSuitesPassingFilters}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b numTestCasesFailed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numAsserts}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numAssertsFailed}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v numAsserts\:doctest::TestRunStats}
{\xe \v doctest::TestRunStats\:numAsserts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::TestRunStats::numAsserts}}
\par
{\bkmkstart AAAAAAABEY}
{\bkmkend AAAAAAABEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numAssertsFailed\:doctest::TestRunStats}
{\xe \v doctest::TestRunStats\:numAssertsFailed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::TestRunStats::numAssertsFailed}}
\par
{\bkmkstart AAAAAAABEZ}
{\bkmkend AAAAAAABEZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numTestCases\:doctest::TestRunStats}
{\xe \v doctest::TestRunStats\:numTestCases}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::TestRunStats::numTestCases}}
\par
{\bkmkstart AAAAAAABFA}
{\bkmkend AAAAAAABFA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numTestCasesFailed\:doctest::TestRunStats}
{\xe \v doctest::TestRunStats\:numTestCasesFailed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::TestRunStats::numTestCasesFailed}}
\par
{\bkmkstart AAAAAAABFB}
{\bkmkend AAAAAAABFB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numTestCasesPassingFilters\:doctest::TestRunStats}
{\xe \v doctest::TestRunStats\:numTestCasesPassingFilters}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::TestRunStats::numTestCasesPassingFilters}}
\par
{\bkmkstart AAAAAAABFC}
{\bkmkend AAAAAAABFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numTestSuitesPassingFilters\:doctest::TestRunStats}
{\xe \v doctest::TestRunStats\:numTestSuitesPassingFilters}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::TestRunStats::numTestSuitesPassingFilters}}
\par
{\bkmkstart AAAAAAABFD}
{\bkmkend AAAAAAABFD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::TestSuite Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite}
{\bkmkstart AAAAAAABNK}
{\bkmkend AAAAAAABNK}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestSuite} & {\b operator*} (const char *in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b TestSuite} & {\b operator*} (const T &in)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_test_suite} = nullptr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_description} = nullptr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_skip} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_no_breaks} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_no_output} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_may_fail} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_should_fail} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_expected_failures} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b m_timeout} = 0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v operator*\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b TestSuite} & doctest::detail::TestSuite::operator* (const char *  {\i in})}}
\par
{\bkmkstart AAAAAAABNL}
{\bkmkend AAAAAAABNL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator*\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b TestSuite} & doctest::detail::TestSuite::operator* (const T &  {\i in}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABNM}
{\bkmkend AAAAAAABNM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_description\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_description}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::detail::TestSuite::m_description = nullptr}}
\par
{\bkmkstart AAAAAAABNN}
{\bkmkend AAAAAAABNN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_expected_failures\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_expected_failures}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::detail::TestSuite::m_expected_failures = 0}}
\par
{\bkmkstart AAAAAAABNO}
{\bkmkend AAAAAAABNO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_may_fail\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_may_fail}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::TestSuite::m_may_fail = false}}
\par
{\bkmkstart AAAAAAABNP}
{\bkmkend AAAAAAABNP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_no_breaks\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_no_breaks}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::TestSuite::m_no_breaks = false}}
\par
{\bkmkstart AAAAAAABNQ}
{\bkmkend AAAAAAABNQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_no_output\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_no_output}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::TestSuite::m_no_output = false}}
\par
{\bkmkstart AAAAAAABNR}
{\bkmkend AAAAAAABNR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_should_fail\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_should_fail}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::TestSuite::m_should_fail = false}}
\par
{\bkmkstart AAAAAAABNS}
{\bkmkend AAAAAAABNS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_skip\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_skip}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::TestSuite::m_skip = false}}
\par
{\bkmkstart AAAAAAABNT}
{\bkmkend AAAAAAABNT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_test_suite\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_test_suite}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::detail::TestSuite::m_test_suite = nullptr}}
\par
{\bkmkstart AAAAAAABNU}
{\bkmkend AAAAAAABNU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_timeout\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_timeout}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double doctest::detail::TestSuite::m_timeout = 0}}
\par
{\bkmkstart AAAAAAABNV}
{\bkmkend AAAAAAABNV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::types::true_type Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::true_type}
{\xe \v doctest::detail::types::true_type}
{\bkmkstart AAAAAAABPH}
{\bkmkend AAAAAAABPH}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::types::true_type:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1types_1_1true__type.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b true}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v value\:doctest::detail::types::true_type}
{\xe \v doctest::detail::types::true_type\:value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_CONSTEXPR} {\b bool} doctest::detail::types::true_type::value = {\b true}{\f2 [static]}}}
\par
{\bkmkstart AAAAAAABPI}
{\bkmkend AAAAAAABPI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tuple< Types > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tuple< Types >}
{\xe \v std::tuple< Types >}
{\bkmkstart AAAAAAABQJ}
{\bkmkend AAAAAAABQJ}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::types::underlying_type< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::underlying_type< T >}
{\xe \v doctest::detail::types::underlying_type< T >}
{\bkmkstart AAAAAAABPJ}
{\bkmkend AAAAAAABPJ}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b __underlying_type}({\b T})\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Typedef Documentation\par
\pard\plain 
{\xe \v type\:doctest::detail::types::underlying_type< T >}
{\xe \v doctest::detail::types::underlying_type< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::underlying_type}< {\b T} >::type =  {\b __underlying_type}({\b T})}}
\par
{\bkmkstart AAAAAAABPK}
{\bkmkend AAAAAAABPK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest.h}}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest.h File Reference\par \pard\plain 
{\tc\tcl2 \v doctest.h}
{\xe \v doctest.h}
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <signal.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::String}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::Contains}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::TestCaseData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::AssertData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::AssertData::StringContains}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::MessageData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::SubcaseSignature}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::IContextScope}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::ContextOptions}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT too many fields. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::enable_if< COND, T >}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::enable_if< true, T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::true_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::false_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::remove_reference< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::remove_reference< T & >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::remove_reference< T && >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_rvalue_reference< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_rvalue_reference< T && >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::remove_const< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::remove_const< const T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_enum< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::underlying_type< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_pointer< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_pointer< T * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_array< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_array< T[SIZE]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::deferred_false< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::has_insertion_operator< T, typename >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::has_insertion_operator< T, decltype(operator<<(declval< std::ostream & >(), declval< const T & >()), void())>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::should_stringify_as_underlying_type< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::StringMakerBase< C >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::StringMakerBase< true >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::StringMaker< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::filldata< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::filldata< T[N]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::filldata< const char[N]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::filldata< const void * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::filldata< T * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::Approx}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::IsNaN< F >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::TestFailureException}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::Subcase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::Result}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::Expression_lhs< L >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::ExpressionDecomposer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::TestSuite}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::TestCase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::RelationalComparator< int, L, R >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::ResultBuilder}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::IExceptionTranslator}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::detail::ExceptionTranslator< T >}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT destructor of virtual class. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::ContextScopeBase}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::detail::ContextScope< L >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::MessageBuilder}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::Context}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::CurrentTestCaseStats}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::TestCaseException}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::TestRunStats}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::QueryData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::IReporter}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::detail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b std}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::Color}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::assertType}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::detail::types}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::detail::binaryAssertComparison}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::detail::assertAction}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest_detail_test_suite_ns}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::TestCaseFailureReason}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION_MAJOR}\~ 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION_MINOR}\~ 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION_PATCH}\~ 11\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TOSTR_IMPL}(x)\~ #x\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TOSTR}(x)\~ {\b DOCTEST_TOSTR_IMPL}(x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION_STR}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION}\~     ({\b DOCTEST_VERSION_MAJOR} * 10000 + {\b DOCTEST_VERSION_MINOR} * 100 + {\b DOCTEST_VERSION_PATCH})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CPLUSPLUS}\~ __cplusplus\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_COMPILER}(MAJOR,  MINOR,  PATCH)\~ ((MAJOR)*10000000 + (MINOR)*100000 + (PATCH))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ICC}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG_SUPPRESS_WARNING_PUSH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG_SUPPRESS_WARNING}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC_SUPPRESS_WARNING_PUSH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC_SUPPRESS_WARNING}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC_SUPPRESS_WARNING_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC_SUPPRESS_WARNING_PUSH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC_SUPPRESS_WARNING}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SUPPRESS_COMMON_WARNINGS_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END}\~ {\b DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_POSIX_SIGNALS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_NO_EXCEPTIONS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SYMBOL_EXPORT}\~ __attribute__((visibility("default")))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SYMBOL_IMPORT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INTERFACE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INTERFACE_DECL}\~ {\b DOCTEST_INTERFACE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INTERFACE_DEF}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_EMPTY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_NOINLINE}\~ __attribute__((noinline))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_UNUSED}\~ __attribute__((unused))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ALIGNMENT}(x)\~ __attribute__((aligned(x)))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INLINE_NOINLINE}\~ inline {\b DOCTEST_NOINLINE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_NORETURN}\~ [[noreturn]]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_NOEXCEPT}\~ noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONSTEXPR}\~ constexpr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONSTEXPR_FUNC}\~ constexpr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_NO_SANITIZE_INTEGER}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_DECLARE_INTERFACE}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_DEFINE_INTERFACE}(name)\~     name::~name() = default;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CAT_IMPL}(s1,  s2)\~ s1##s2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CAT}(s1,  s2)\~ {\b DOCTEST_CAT_IMPL}(s1, s2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ANONYMOUS}(x)\~ {\b DOCTEST_CAT}(x, __LINE__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REF_WRAP}(x)\~ x&\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_PLATFORM_LINUX}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GLOBAL_NO_WARNINGS}(var, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_BREAK_INTO_DEBUGGER}()\~ raise(SIGTRAP)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_STRING_SIZE_TYPE}\~ unsigned\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_STRINGIFY}(...)\~ toString(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SFINAE_OP}(ret,  op)\~ decltype((void)({\b doctest::detail::declval}<L>() op {\b doctest::detail::declval}<R>()),ret\{\})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_DO_BINARY_EXPRESSION_COMPARISON}(op,  op_str,  op_macro)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FORBIT_EXPRESSION}(rt,  op)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_COMPARISON_RETURN_TYPE}\~ bool\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_RELATIONAL_OP}(name,  op)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_EQ}(l,  r)\~ l == r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_NE}(l,  r)\~ l != r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_GT}(l,  r)\~ l > r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_LT}(l,  r)\~ l < r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_GE}(l,  r)\~ l >= r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_LE}(l,  r)\~ l <= r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_BINARY_RELATIONAL_OP}(n,  op)\~     template <class L, class R> struct RelationalComparator<n, L, R> \{ bool operator()(const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs) const \{ return op(lhs, rhs); \} \};\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_OUT_OF_TESTS}(decomp)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_IN_TESTS}(decomp)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_DEFINE_DECORATOR}(name,  type,  def)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FUNC_EMPTY}\~ (void)0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FUNC_SCOPE_BEGIN}\~ do\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FUNC_SCOPE_END}\~ while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FUNC_SCOPE_RET}(v)\~ (void)0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_LOG_REACT_RETURN}(b)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WRAP_IN_TRY}(x)\~ x;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CAST_TO_VOID}(...)\~ __VA_ARGS__;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_FUNCTION}(global_prefix,  f,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_IMPLEMENT_FIXTURE}(der,  base,  func,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CREATE_AND_REGISTER_FUNCTION}(f,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS}(f,  proxy,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE}(decorators)\~     {\b DOCTEST_CREATE_AND_REGISTER_FUNCTION}({\b DOCTEST_ANONYMOUS}(DOCTEST_ANON_FUNC_), decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_CLASS}(...)\~     TEST_CASES_CAN_BE_REGISTERED_IN_CLASSES_ONLY_IN_CPP17_MODE_OR_WITH_VS_2017_OR_NEWER\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_FIXTURE}(c,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TYPE_TO_STRING_AS}(str, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TYPE_TO_STRING}(...)\~ {\b DOCTEST_TYPE_TO_STRING_AS}(#__VA_ARGS__, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL}(dec,  T,  iter,  func)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}(dec,  T,  id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL}(id,  anon, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}(id, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_APPLY}(id, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_IMPL}(dec,  T,  anon, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE}(dec,  T, ...)\~     {\b DOCTEST_TEST_CASE_TEMPLATE_IMPL}(dec, T, {\b DOCTEST_ANONYMOUS}(DOCTEST_ANON_TMP_), __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SUBCASE}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_SUITE_IMPL}(decorators,  ns_name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_SUITE}(decorators)\~     {\b DOCTEST_TEST_SUITE_IMPL}(decorators, {\b DOCTEST_ANONYMOUS}(DOCTEST_ANON_SUITE_))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_SUITE_BEGIN}(decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_SUITE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL}(translatorName,  signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_EXCEPTION_TRANSLATOR}(signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_REPORTER}(name,  priority,  reporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_LISTENER}(name,  priority,  reporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INFO}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INFO_IMPL}(mb_name,  s_name, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CAPTURE}(x)\~ {\b DOCTEST_INFO}(#x " := ", x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ADD_AT_IMPL}(type,  file,  line,  mb, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ADD_MESSAGE_AT}(file,  line, ...)\~ {\b DOCTEST_ADD_AT_IMPL}(is_warn, file, line, {\b DOCTEST_ANONYMOUS}(DOCTEST_MESSAGE_), __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ADD_FAIL_CHECK_AT}(file,  line, ...)\~ {\b DOCTEST_ADD_AT_IMPL}(is_check, file, line, {\b DOCTEST_ANONYMOUS}(DOCTEST_MESSAGE_), __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ADD_FAIL_AT}(file,  line, ...)\~ {\b DOCTEST_ADD_AT_IMPL}(is_require, file, line, {\b DOCTEST_ANONYMOUS}(DOCTEST_MESSAGE_), __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MESSAGE}(...)\~ {\b DOCTEST_ADD_MESSAGE_AT}(__FILE__, __LINE__, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAIL_CHECK}(...)\~ {\b DOCTEST_ADD_FAIL_CHECK_AT}(__FILE__, __LINE__, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAIL}(...)\~ {\b DOCTEST_ADD_FAIL_AT}(__FILE__, __LINE__, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TO_LVALUE}(...)\~ __VA_ARGS__\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_IMPLEMENT_2}(assert_type, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_IMPLEMENT_1}(assert_type, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_BINARY_ASSERT}(assert_type,  comp, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_UNARY_ASSERT}(assert_type, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_WARN, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_CHECK, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_REQUIRE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_FALSE}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_WARN_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_FALSE}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_CHECK_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_FALSE}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_REQUIRE_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_MESSAGE}(cond, ...)\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_WARN, cond); \} {\b DOCTEST_FUNC_SCOPE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_MESSAGE}(cond, ...)\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_CHECK, cond); \} {\b DOCTEST_FUNC_SCOPE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_MESSAGE}(cond, ...)\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_REQUIRE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_FALSE_MESSAGE}(cond, ...)\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_WARN_FALSE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_FALSE_MESSAGE}(cond, ...)\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_CHECK_FALSE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_FALSE_MESSAGE}(cond, ...)\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_REQUIRE_FALSE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_EQ}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_EQ, eq, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_EQ}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_EQ, eq, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_EQ}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_EQ, eq, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_NE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_NE, ne, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_NE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_NE, ne, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_NE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_NE, ne, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_GT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_GT, gt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_GT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_GT, gt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_GT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_GT, gt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_LT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_LT, lt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_LT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_LT, lt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_LT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_LT, lt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_GE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_GE, ge, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_GE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_GE, ge, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_GE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_GE, ge, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_LE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_LE, le, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_LE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_LE, le, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_LE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_LE, le, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_UNARY}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_WARN_UNARY, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_UNARY}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_CHECK_UNARY, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_UNARY}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_REQUIRE_UNARY, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_UNARY_FALSE}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_WARN_UNARY_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_UNARY_FALSE}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_CHECK_UNARY_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_UNARY_FALSE}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_REQUIRE_UNARY_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_FALSE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_MESSAGE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_FALSE_MESSAGE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_EQ}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_NE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_GT}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_LT}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_GE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_LE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_UNARY}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_UNARY_FALSE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS}(...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS}(...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS}(...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_AS}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_AS}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_AS}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_WITH_AS}(expr,  with, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_WITH_AS}(expr,  with, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_WITH_AS}(expr,  with, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_NOTHROW}(...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_NOTHROW}(...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_NOTHROW}(...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_MESSAGE}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_MESSAGE}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_MESSAGE}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_AS_MESSAGE}(expr,  ex, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_AS_MESSAGE}(expr,  ex, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_AS_MESSAGE}(expr,  ex, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_WITH_MESSAGE}(expr,  with, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_WITH_MESSAGE}(expr,  with, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_WITH_MESSAGE}(expr,  with, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_NOTHROW_MESSAGE}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_NOTHROW_MESSAGE}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_NOTHROW_MESSAGE}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_EQ}\~ {\b DOCTEST_WARN_EQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_EQ}\~ {\b DOCTEST_CHECK_EQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_EQ}\~ {\b DOCTEST_REQUIRE_EQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_NE}\~ {\b DOCTEST_WARN_NE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_NE}\~ {\b DOCTEST_CHECK_NE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_NE}\~ {\b DOCTEST_REQUIRE_NE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_GT}\~ {\b DOCTEST_WARN_GT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_GT}\~ {\b DOCTEST_CHECK_GT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_GT}\~ {\b DOCTEST_REQUIRE_GT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_LT}\~ {\b DOCTEST_WARN_LT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_LT}\~ {\b DOCTEST_CHECK_LT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_LT}\~ {\b DOCTEST_REQUIRE_LT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_GE}\~ {\b DOCTEST_WARN_GE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_GE}\~ {\b DOCTEST_CHECK_GE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_GE}\~ {\b DOCTEST_REQUIRE_GE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_LE}\~ {\b DOCTEST_WARN_LE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_LE}\~ {\b DOCTEST_CHECK_LE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_LE}\~ {\b DOCTEST_REQUIRE_LE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_UNARY}\~ {\b DOCTEST_WARN_UNARY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_UNARY}\~ {\b DOCTEST_CHECK_UNARY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_UNARY}\~ {\b DOCTEST_REQUIRE_UNARY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_UNARY_FALSE}\~ {\b DOCTEST_WARN_UNARY_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_UNARY_FALSE}\~ {\b DOCTEST_CHECK_UNARY_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_UNARY_FALSE}\~ {\b DOCTEST_REQUIRE_UNARY_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE}(id, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}(id,__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SCENARIO}(name)\~ {\b DOCTEST_TEST_CASE}("  Scenario: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SCENARIO_CLASS}(name)\~ {\b DOCTEST_TEST_CASE_CLASS}("  Scenario: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SCENARIO_TEMPLATE}(name,  T, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE}("  Scenario: " name, T, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SCENARIO_TEMPLATE_DEFINE}(name,  T,  id)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}("  Scenario: " name, T, id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GIVEN}(name)\~ {\b DOCTEST_SUBCASE}("   Given: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WHEN}(name)\~ {\b DOCTEST_SUBCASE}("    When: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_AND_WHEN}(name)\~ {\b DOCTEST_SUBCASE}("And when: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_THEN}(name)\~ {\b DOCTEST_SUBCASE}("    Then: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_AND_THEN}(name)\~ {\b DOCTEST_SUBCASE}("     And: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE}(name)\~ {\b DOCTEST_TEST_CASE}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_CLASS}(name)\~ {\b DOCTEST_TEST_CASE_CLASS}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_FIXTURE}(x,  name)\~ {\b DOCTEST_TEST_CASE_FIXTURE}(x, name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TYPE_TO_STRING_AS}(str, ...)\~ {\b DOCTEST_TYPE_TO_STRING_AS}(str, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TYPE_TO_STRING}(...)\~ {\b DOCTEST_TYPE_TO_STRING}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE}(name,  T, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE}(name, T, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE_DEFINE}(name,  T,  id)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}(name, T, id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE_INVOKE}(id, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}(id, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE_APPLY}(id, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_APPLY}(id, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SUBCASE}(name)\~ {\b DOCTEST_SUBCASE}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_SUITE}(decorators)\~ {\b DOCTEST_TEST_SUITE}(decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_SUITE_BEGIN}(name)\~ {\b DOCTEST_TEST_SUITE_BEGIN}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_SUITE_END}\~ {\b DOCTEST_TEST_SUITE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REGISTER_EXCEPTION_TRANSLATOR}(signature)\~ {\b DOCTEST_REGISTER_EXCEPTION_TRANSLATOR}(signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REGISTER_REPORTER}(name,  priority,  reporter)\~ {\b DOCTEST_REGISTER_REPORTER}(name, priority, reporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REGISTER_LISTENER}(name,  priority,  reporter)\~ {\b DOCTEST_REGISTER_LISTENER}(name, priority, reporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INFO}(...)\~ {\b DOCTEST_INFO}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CAPTURE}(x)\~ {\b DOCTEST_CAPTURE}(x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADD_MESSAGE_AT}(file,  line, ...)\~ {\b DOCTEST_ADD_MESSAGE_AT}(file, line, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADD_FAIL_CHECK_AT}(file,  line, ...)\~ {\b DOCTEST_ADD_FAIL_CHECK_AT}(file, line, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADD_FAIL_AT}(file,  line, ...)\~ {\b DOCTEST_ADD_FAIL_AT}(file, line, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MESSAGE}(...)\~ {\b DOCTEST_MESSAGE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAIL_CHECK}(...)\~ {\b DOCTEST_FAIL_CHECK}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAIL}(...)\~ {\b DOCTEST_FAIL}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TO_LVALUE}(...)\~ {\b DOCTEST_TO_LVALUE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN}(...)\~ {\b DOCTEST_WARN}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_FALSE}(...)\~ {\b DOCTEST_WARN_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS}(...)\~ {\b DOCTEST_WARN_THROWS}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_AS}(expr, ...)\~ {\b DOCTEST_WARN_THROWS_AS}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_WARN_THROWS_WITH}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_WITH_AS}(expr,  with, ...)\~ {\b DOCTEST_WARN_THROWS_WITH_AS}(expr, with, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_NOTHROW}(...)\~ {\b DOCTEST_WARN_NOTHROW}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK}(...)\~ {\b DOCTEST_CHECK}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_FALSE}(...)\~ {\b DOCTEST_CHECK_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS}(...)\~ {\b DOCTEST_CHECK_THROWS}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_AS}(expr, ...)\~ {\b DOCTEST_CHECK_THROWS_AS}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_CHECK_THROWS_WITH}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_WITH_AS}(expr,  with, ...)\~ {\b DOCTEST_CHECK_THROWS_WITH_AS}(expr, with, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_NOTHROW}(...)\~ {\b DOCTEST_CHECK_NOTHROW}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE}(...)\~ {\b DOCTEST_REQUIRE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_FALSE}(...)\~ {\b DOCTEST_REQUIRE_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS}(...)\~ {\b DOCTEST_REQUIRE_THROWS}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_AS}(expr, ...)\~ {\b DOCTEST_REQUIRE_THROWS_AS}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_REQUIRE_THROWS_WITH}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_WITH_AS}(expr,  with, ...)\~ {\b DOCTEST_REQUIRE_THROWS_WITH_AS}(expr, with, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_NOTHROW}(...)\~ {\b DOCTEST_REQUIRE_NOTHROW}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_MESSAGE}(cond, ...)\~ {\b DOCTEST_WARN_MESSAGE}(cond, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_FALSE_MESSAGE}(cond, ...)\~ {\b DOCTEST_WARN_FALSE_MESSAGE}(cond, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_MESSAGE}(expr, ...)\~ {\b DOCTEST_WARN_THROWS_MESSAGE}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_AS_MESSAGE}(expr,  ex, ...)\~ {\b DOCTEST_WARN_THROWS_AS_MESSAGE}(expr, ex, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_WITH_MESSAGE}(expr,  with, ...)\~ {\b DOCTEST_WARN_THROWS_WITH_MESSAGE}(expr, with, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex, ...)\~ {\b DOCTEST_WARN_THROWS_WITH_AS_MESSAGE}(expr, with, ex, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_NOTHROW_MESSAGE}(expr, ...)\~ {\b DOCTEST_WARN_NOTHROW_MESSAGE}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_MESSAGE}(cond, ...)\~ {\b DOCTEST_CHECK_MESSAGE}(cond, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_FALSE_MESSAGE}(cond, ...)\~ {\b DOCTEST_CHECK_FALSE_MESSAGE}(cond, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_MESSAGE}(expr, ...)\~ {\b DOCTEST_CHECK_THROWS_MESSAGE}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_AS_MESSAGE}(expr,  ex, ...)\~ {\b DOCTEST_CHECK_THROWS_AS_MESSAGE}(expr, ex, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_WITH_MESSAGE}(expr,  with, ...)\~ {\b DOCTEST_CHECK_THROWS_WITH_MESSAGE}(expr, with, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex, ...)\~ {\b DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE}(expr, with, ex, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_NOTHROW_MESSAGE}(expr, ...)\~ {\b DOCTEST_CHECK_NOTHROW_MESSAGE}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_MESSAGE}(cond, ...)\~ {\b DOCTEST_REQUIRE_MESSAGE}(cond, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_FALSE_MESSAGE}(cond, ...)\~ {\b DOCTEST_REQUIRE_FALSE_MESSAGE}(cond, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_MESSAGE}(expr, ...)\~ {\b DOCTEST_REQUIRE_THROWS_MESSAGE}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_AS_MESSAGE}(expr,  ex, ...)\~ {\b DOCTEST_REQUIRE_THROWS_AS_MESSAGE}(expr, ex, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_WITH_MESSAGE}(expr,  with, ...)\~ {\b DOCTEST_REQUIRE_THROWS_WITH_MESSAGE}(expr, with, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex, ...)\~ {\b DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE}(expr, with, ex, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_NOTHROW_MESSAGE}(expr, ...)\~ {\b DOCTEST_REQUIRE_NOTHROW_MESSAGE}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SCENARIO}(name)\~ {\b DOCTEST_SCENARIO}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SCENARIO_CLASS}(name)\~ {\b DOCTEST_SCENARIO_CLASS}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SCENARIO_TEMPLATE}(name,  T, ...)\~ {\b DOCTEST_SCENARIO_TEMPLATE}(name, T, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SCENARIO_TEMPLATE_DEFINE}(name,  T,  id)\~ {\b DOCTEST_SCENARIO_TEMPLATE_DEFINE}(name, T, id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b GIVEN}(name)\~ {\b DOCTEST_GIVEN}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WHEN}(name)\~ {\b DOCTEST_WHEN}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b AND_WHEN}(name)\~ {\b DOCTEST_AND_WHEN}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b THEN}(name)\~ {\b DOCTEST_THEN}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b AND_THEN}(name)\~ {\b DOCTEST_AND_THEN}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_EQ}(...)\~ {\b DOCTEST_WARN_EQ}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_EQ}(...)\~ {\b DOCTEST_CHECK_EQ}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_EQ}(...)\~ {\b DOCTEST_REQUIRE_EQ}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_NE}(...)\~ {\b DOCTEST_WARN_NE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_NE}(...)\~ {\b DOCTEST_CHECK_NE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_NE}(...)\~ {\b DOCTEST_REQUIRE_NE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_GT}(...)\~ {\b DOCTEST_WARN_GT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_GT}(...)\~ {\b DOCTEST_CHECK_GT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_GT}(...)\~ {\b DOCTEST_REQUIRE_GT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_LT}(...)\~ {\b DOCTEST_WARN_LT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_LT}(...)\~ {\b DOCTEST_CHECK_LT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_LT}(...)\~ {\b DOCTEST_REQUIRE_LT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_GE}(...)\~ {\b DOCTEST_WARN_GE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_GE}(...)\~ {\b DOCTEST_CHECK_GE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_GE}(...)\~ {\b DOCTEST_REQUIRE_GE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_LE}(...)\~ {\b DOCTEST_WARN_LE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_LE}(...)\~ {\b DOCTEST_CHECK_LE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_LE}(...)\~ {\b DOCTEST_REQUIRE_LE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_UNARY}(...)\~ {\b DOCTEST_WARN_UNARY}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_UNARY}(...)\~ {\b DOCTEST_CHECK_UNARY}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_UNARY}(...)\~ {\b DOCTEST_REQUIRE_UNARY}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_UNARY_FALSE}(...)\~ {\b DOCTEST_WARN_UNARY_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_UNARY_FALSE}(...)\~ {\b DOCTEST_CHECK_UNARY_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_UNARY_FALSE}(...)\~ {\b DOCTEST_REQUIRE_UNARY_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_EQ}(...)\~ {\b DOCTEST_FAST_WARN_EQ}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_EQ}(...)\~ {\b DOCTEST_FAST_CHECK_EQ}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_EQ}(...)\~ {\b DOCTEST_FAST_REQUIRE_EQ}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_NE}(...)\~ {\b DOCTEST_FAST_WARN_NE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_NE}(...)\~ {\b DOCTEST_FAST_CHECK_NE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_NE}(...)\~ {\b DOCTEST_FAST_REQUIRE_NE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_GT}(...)\~ {\b DOCTEST_FAST_WARN_GT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_GT}(...)\~ {\b DOCTEST_FAST_CHECK_GT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_GT}(...)\~ {\b DOCTEST_FAST_REQUIRE_GT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_LT}(...)\~ {\b DOCTEST_FAST_WARN_LT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_LT}(...)\~ {\b DOCTEST_FAST_CHECK_LT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_LT}(...)\~ {\b DOCTEST_FAST_REQUIRE_LT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_GE}(...)\~ {\b DOCTEST_FAST_WARN_GE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_GE}(...)\~ {\b DOCTEST_FAST_CHECK_GE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_GE}(...)\~ {\b DOCTEST_FAST_REQUIRE_GE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_LE}(...)\~ {\b DOCTEST_FAST_WARN_LE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_LE}(...)\~ {\b DOCTEST_FAST_CHECK_LE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_LE}(...)\~ {\b DOCTEST_FAST_REQUIRE_LE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_UNARY}(...)\~ {\b DOCTEST_FAST_WARN_UNARY}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_UNARY}(...)\~ {\b DOCTEST_FAST_CHECK_UNARY}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_UNARY}(...)\~ {\b DOCTEST_FAST_REQUIRE_UNARY}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_UNARY_FALSE}(...)\~ {\b DOCTEST_FAST_WARN_UNARY_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_UNARY_FALSE}(...)\~ {\b DOCTEST_FAST_CHECK_UNARY_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_UNARY_FALSE}(...)\~ {\b DOCTEST_FAST_REQUIRE_UNARY_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE_INSTANTIATE}(id, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE}(id, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SINGLE_HEADER}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedefs\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef decltype(nullptr) {\b std::nullptr_t}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef decltype(sizeof(void *) {\b std::size_t})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef {\b basic_ostream}< char, {\b char_traits}< char > > {\b std::ostream}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef {\b basic_istream}< char, {\b char_traits}< char > > {\b std::istream}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b doctest::detail::funcType} = void(*)()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b doctest::detail::assert_handler} = void(*)(const {\b AssertData} &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b doctest::detail::reporterCreatorFunc} = {\b IReporter} *(*)(const {\b ContextOptions} &)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::Color::Enum} \{ {\b doctest::Color::None} = 0
, {\b doctest::Color::White}
, {\b doctest::Color::Red}
, {\b doctest::Color::Green}
, {\b doctest::Color::Blue}
, {\b doctest::Color::Cyan}
, {\b doctest::Color::Yellow}
, {\b doctest::Color::Grey}
, {\b doctest::Color::Bright} = 0x10
, {\b doctest::Color::BrightRed} = Bright | Red
, {\b doctest::Color::BrightGreen} = Bright | Green
, {\b doctest::Color::LightGrey} = Bright | Grey
, {\b doctest::Color::BrightWhite} = Bright | White
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::assertType::Enum} \{ {\b doctest::assertType::is_warn} = 1
, {\b doctest::assertType::is_check} = 2 * is_warn
, {\b doctest::assertType::is_require} = 2 * is_check
, {\b doctest::assertType::is_normal} = 2 * is_require
, {\b doctest::assertType::is_throws} = 2 * is_normal
, {\b doctest::assertType::is_throws_as} = 2 * is_throws
, {\b doctest::assertType::is_throws_with} = 2 * is_throws_as
, {\b doctest::assertType::is_nothrow} = 2 * is_throws_with
, {\b doctest::assertType::is_false} = 2 * is_nothrow
, {\b doctest::assertType::is_unary} = 2 * is_false
, {\b doctest::assertType::is_eq} = 2 * is_unary
, {\b doctest::assertType::is_ne} = 2 * is_eq
, {\b doctest::assertType::is_lt} = 2 * is_ne
, {\b doctest::assertType::is_gt} = 2 * is_lt
, {\b doctest::assertType::is_ge} = 2 * is_gt
, {\b doctest::assertType::is_le} = 2 * is_ge
, {\b doctest::assertType::DT_WARN} = is_normal | is_warn
, {\b doctest::assertType::DT_CHECK} = is_normal | is_check
, {\b doctest::assertType::DT_REQUIRE} = is_normal | is_require
, {\b doctest::assertType::DT_WARN_FALSE} = is_normal | is_false | is_warn
, {\b doctest::assertType::DT_CHECK_FALSE} = is_normal | is_false | is_check
, {\b doctest::assertType::DT_REQUIRE_FALSE} = is_normal | is_false | is_require
, {\b doctest::assertType::DT_WARN_THROWS} = is_throws | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS} = is_throws | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS} = is_throws | is_require
, {\b doctest::assertType::DT_WARN_THROWS_AS} = is_throws_as | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS_AS} = is_throws_as | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS_AS} = is_throws_as | is_require
, {\b doctest::assertType::DT_WARN_THROWS_WITH} = is_throws_with | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS_WITH} = is_throws_with | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS_WITH} = is_throws_with | is_require
, {\b doctest::assertType::DT_WARN_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_require
, {\b doctest::assertType::DT_WARN_NOTHROW} = is_nothrow | is_warn
, {\b doctest::assertType::DT_CHECK_NOTHROW} = is_nothrow | is_check
, {\b doctest::assertType::DT_REQUIRE_NOTHROW} = is_nothrow | is_require
, {\b doctest::assertType::DT_WARN_EQ} = is_normal | is_eq | is_warn
, {\b doctest::assertType::DT_CHECK_EQ} = is_normal | is_eq | is_check
, {\b doctest::assertType::DT_REQUIRE_EQ} = is_normal | is_eq | is_require
, {\b doctest::assertType::DT_WARN_NE} = is_normal | is_ne | is_warn
, {\b doctest::assertType::DT_CHECK_NE} = is_normal | is_ne | is_check
, {\b doctest::assertType::DT_REQUIRE_NE} = is_normal | is_ne | is_require
, {\b doctest::assertType::DT_WARN_GT} = is_normal | is_gt | is_warn
, {\b doctest::assertType::DT_CHECK_GT} = is_normal | is_gt | is_check
, {\b doctest::assertType::DT_REQUIRE_GT} = is_normal | is_gt | is_require
, {\b doctest::assertType::DT_WARN_LT} = is_normal | is_lt | is_warn
, {\b doctest::assertType::DT_CHECK_LT} = is_normal | is_lt | is_check
, {\b doctest::assertType::DT_REQUIRE_LT} = is_normal | is_lt | is_require
, {\b doctest::assertType::DT_WARN_GE} = is_normal | is_ge | is_warn
, {\b doctest::assertType::DT_CHECK_GE} = is_normal | is_ge | is_check
, {\b doctest::assertType::DT_REQUIRE_GE} = is_normal | is_ge | is_require
, {\b doctest::assertType::DT_WARN_LE} = is_normal | is_le | is_warn
, {\b doctest::assertType::DT_CHECK_LE} = is_normal | is_le | is_check
, {\b doctest::assertType::DT_REQUIRE_LE} = is_normal | is_le | is_require
, {\b doctest::assertType::DT_WARN_UNARY} = is_normal | is_unary | is_warn
, {\b doctest::assertType::DT_CHECK_UNARY} = is_normal | is_unary | is_check
, {\b doctest::assertType::DT_REQUIRE_UNARY} = is_normal | is_unary | is_require
, {\b doctest::assertType::DT_WARN_UNARY_FALSE} = is_normal | is_false | is_unary | is_warn
, {\b doctest::assertType::DT_CHECK_UNARY_FALSE} = is_normal | is_false | is_unary | is_check
, {\b doctest::assertType::DT_REQUIRE_UNARY_FALSE} = is_normal | is_false | is_unary | is_require
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::detail::binaryAssertComparison::Enum} \{ {\b doctest::detail::binaryAssertComparison::eq} = 0
, {\b doctest::detail::binaryAssertComparison::ne}
, {\b doctest::detail::binaryAssertComparison::gt}
, {\b doctest::detail::binaryAssertComparison::lt}
, {\b doctest::detail::binaryAssertComparison::ge}
, {\b doctest::detail::binaryAssertComparison::le}
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::detail::assertAction::Enum} \{ {\b doctest::detail::assertAction::nothing} = 0
, {\b doctest::detail::assertAction::dbgbreak} = 1
, {\b doctest::detail::assertAction::shouldthrow} = 2
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::TestCaseFailureReason::Enum} \{ {\b doctest::TestCaseFailureReason::None} = 0
, {\b doctest::TestCaseFailureReason::AssertFailure} = 1
, {\b doctest::TestCaseFailureReason::Exception} = 2
, {\b doctest::TestCaseFailureReason::Crash} = 4
, {\b doctest::TestCaseFailureReason::TooManyFailedAsserts} = 8
, {\b doctest::TestCaseFailureReason::Timeout} = 16
, {\b doctest::TestCaseFailureReason::ShouldHaveFailedButDidnt} = 32
, {\b doctest::TestCaseFailureReason::ShouldHaveFailedAndDid} = 64
, {\b doctest::TestCaseFailureReason::DidntFailExactlyNumTimes} = 128
, {\b doctest::TestCaseFailureReason::FailedExactlyNumTimes} = 256
, {\b doctest::TestCaseFailureReason::CouldHaveFailedAndDid} = 512
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class traits > {\b basic_ostream}< char, traits > & {\b std::operator<<} ({\b basic_ostream}< char, traits > &, const char *)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::operator+} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator==} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator!=} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator<} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator>} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator<=} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator>=} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (const {\b Contains} &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator==} (const {\b String} &lhs, const {\b Contains} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator==} (const {\b Contains} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator!=} (const {\b String} &lhs, const {\b Contains} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator!=} (const {\b Contains} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} & {\b doctest::Color::operator<<} ({\b std::ostream} &s, {\b Color::Enum} code)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b doctest::assertString} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b doctest::failureString} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b doctest::skipPathFromFilename} (const char *file)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > T && {\b doctest::detail::declval} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class T > {\b DOCTEST_CONSTEXPR_FUNC} T && {\b doctest::detail::forward} (typename {\b types::remove_reference}< T >::type &t) {\b DOCTEST_NOEXCEPT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class T > {\b DOCTEST_CONSTEXPR_FUNC} T && {\b doctest::detail::forward} (typename {\b types::remove_reference}< T >::type &&t) {\b DOCTEST_NOEXCEPT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} * {\b doctest::detail::tlssPush} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::detail::tlssPop} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > void {\b doctest::detail::filloss} ({\b std::ostream} *stream, const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T , size_t N> void {\b doctest::detail::filloss} ({\b std::ostream} *stream, const T(&in)[N])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b String} {\b doctest::detail::toStream} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b String} {\b doctest::toString} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T , typename {\b detail::types::enable_if}<!{\b detail::should_stringify_as_underlying_type}< T >::value, bool >::type  = true> {\b String} {\b doctest::toString} (const {\b DOCTEST_REF_WRAP}(T) value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} ({\b String} in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} ({\b std::nullptr_t})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (bool in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (float in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (double in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (double long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (char in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (char signed in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (char unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (short in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (short unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (signed in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (long unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (long long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (long long unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (const {\b Approx} &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const {\b ContextOptions} * {\b doctest::getContextOptions} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} ({\b IsNaN}< float > in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} ({\b IsNaN}< double > in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} ({\b IsNaN}< double long > in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::detail::checkIfShouldThrow} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::throwException} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L , typename R > {\b String} {\b doctest::detail::stringifyBinaryExpr} (const {\b DOCTEST_REF_WRAP}(L) lhs, const char *op, const {\b DOCTEST_REF_WRAP}(R) rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} int {\b doctest::detail::regTest} (const {\b TestCase} &tc)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} int {\b doctest::detail::setTestSuite} (const {\b TestSuite} &ts)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::detail::isDebuggerActive} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > int {\b doctest::detail::instantiationHelper} (const T &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::failed_out_of_a_testing_context} (const {\b AssertData} &ad)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::detail::decomp_assert} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const {\b Result} &result)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<int comparison, typename L , typename R > {\b DOCTEST_NOINLINE} bool {\b doctest::detail::binary_assert} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b DOCTEST_NOINLINE} bool {\b doctest::detail::unary_assert} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const {\b DOCTEST_REF_WRAP}(L) val)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::registerExceptionTranslatorImpl} (const {\b IExceptionTranslator} *et)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b ContextScope}< L > {\b doctest::detail::MakeContextScope} (const L &lambda)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (test_suite, const char *, "")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (description, const char *, "")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (skip, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (no_breaks, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (no_output, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (timeout, double, 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (may_fail, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (should_fail, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (expected_failures, int, 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > int {\b doctest::registerExceptionTranslator} ({\b String}(*translateFunction)(T))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b doctest::detail::TestSuite} & {\b doctest_detail_test_suite_ns::getCurrentTestSuite} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::registerReporterImpl} (const char *name, int prio, {\b reporterCreatorFunc} c, bool isReporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Reporter > {\b IReporter} * {\b doctest::detail::reporterCreator} (const {\b ContextOptions} &o)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Reporter > int {\b doctest::registerReporter} (const char *name, int priority, bool isReporter)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::is_running_in_test}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b DOCTEST_INTERFACE} {\b doctest::detail::TestCase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template struct {\b DOCTEST_INTERFACE_DECL} {\b doctest::IsNaN< float >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template struct {\b DOCTEST_INTERFACE_DECL} {\b doctest::IsNaN< double >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template struct {\b DOCTEST_INTERFACE_DECL} {\b doctest::IsNaN< long double >}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v ADD_FAIL_AT\:doctest.h}
{\xe \v doctest.h\:ADD_FAIL_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADD_FAIL_AT( file,  line,   {\i ...})\~ {\b DOCTEST_ADD_FAIL_AT}(file, line, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ADD_FAIL_CHECK_AT\:doctest.h}
{\xe \v doctest.h\:ADD_FAIL_CHECK_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADD_FAIL_CHECK_AT( file,  line,   {\i ...})\~ {\b DOCTEST_ADD_FAIL_CHECK_AT}(file, line, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ADD_MESSAGE_AT\:doctest.h}
{\xe \v doctest.h\:ADD_MESSAGE_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADD_MESSAGE_AT( file,  line,   {\i ...})\~ {\b DOCTEST_ADD_MESSAGE_AT}(file, line, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v AND_THEN\:doctest.h}
{\xe \v doctest.h\:AND_THEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define AND_THEN( name)\~ {\b DOCTEST_AND_THEN}(name)}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v AND_WHEN\:doctest.h}
{\xe \v doctest.h\:AND_WHEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define AND_WHEN( name)\~ {\b DOCTEST_AND_WHEN}(name)}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CAPTURE\:doctest.h}
{\xe \v doctest.h\:CAPTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CAPTURE( x)\~ {\b DOCTEST_CAPTURE}(x)}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK\:doctest.h}
{\xe \v doctest.h\:CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK(  {\i ...})\~ {\b DOCTEST_CHECK}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_EQ\:doctest.h}
{\xe \v doctest.h\:CHECK_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_EQ(  {\i ...})\~ {\b DOCTEST_CHECK_EQ}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_FALSE\:doctest.h}
{\xe \v doctest.h\:CHECK_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_FALSE(  {\i ...})\~ {\b DOCTEST_CHECK_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_FALSE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_CHECK_FALSE_MESSAGE}(cond, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_GE\:doctest.h}
{\xe \v doctest.h\:CHECK_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_GE(  {\i ...})\~ {\b DOCTEST_CHECK_GE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_GT\:doctest.h}
{\xe \v doctest.h\:CHECK_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_GT(  {\i ...})\~ {\b DOCTEST_CHECK_GT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_LE\:doctest.h}
{\xe \v doctest.h\:CHECK_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_LE(  {\i ...})\~ {\b DOCTEST_CHECK_LE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_LT\:doctest.h}
{\xe \v doctest.h\:CHECK_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_LT(  {\i ...})\~ {\b DOCTEST_CHECK_LT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_CHECK_MESSAGE}(cond, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_NE\:doctest.h}
{\xe \v doctest.h\:CHECK_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_NE(  {\i ...})\~ {\b DOCTEST_CHECK_NE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_NOTHROW\:doctest.h}
{\xe \v doctest.h\:CHECK_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_NOTHROW(  {\i ...})\~ {\b DOCTEST_CHECK_NOTHROW}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_NOTHROW_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_NOTHROW_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_CHECK_NOTHROW_MESSAGE}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS(  {\i ...})\~ {\b DOCTEST_CHECK_THROWS}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_AS}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_AS_MESSAGE( expr,  ex,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_AS_MESSAGE}(expr, ex, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_MESSAGE}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_WITH}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_WITH_AS\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_WITH_AS( expr,  with,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_WITH_AS}(expr, with, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_WITH_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE}(expr, with, ex, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_WITH_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_WITH_MESSAGE( expr,  with,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_WITH_MESSAGE}(expr, with, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_UNARY\:doctest.h}
{\xe \v doctest.h\:CHECK_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_UNARY(  {\i ...})\~ {\b DOCTEST_CHECK_UNARY}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:CHECK_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_CHECK_UNARY_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ADD_AT_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ADD_AT_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ADD_AT_IMPL( type,  file,  line,  mb,   {\i ...})}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\\par
        doctest::detail::MessageBuilder mb(file, line, doctest::assertType::type);                 \\\par
        mb * __VA_ARGS__;                                                                          \\\par
        if(mb.log())                                                                               \\\par
            DOCTEST_BREAK_INTO_DEBUGGER();                                                         \\\par
        mb.react();                                                                                \\\par
    \} DOCTEST_FUNC_SCOPE_END\par
}
}
{\xe \v DOCTEST_ADD_FAIL_AT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ADD_FAIL_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ADD_FAIL_AT( file,  line,   {\i ...})\~ {\b DOCTEST_ADD_AT_IMPL}(is_require, file, line, {\b DOCTEST_ANONYMOUS}(DOCTEST_MESSAGE_), __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ADD_FAIL_CHECK_AT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ADD_FAIL_CHECK_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ADD_FAIL_CHECK_AT( file,  line,   {\i ...})\~ {\b DOCTEST_ADD_AT_IMPL}(is_check, file, line, {\b DOCTEST_ANONYMOUS}(DOCTEST_MESSAGE_), __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ADD_MESSAGE_AT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ADD_MESSAGE_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ADD_MESSAGE_AT( file,  line,   {\i ...})\~ {\b DOCTEST_ADD_AT_IMPL}(is_warn, file, line, {\b DOCTEST_ANONYMOUS}(DOCTEST_MESSAGE_), __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ALIGNMENT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ALIGNMENT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ALIGNMENT( x)\~ __attribute__((aligned(x)))}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_AND_THEN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_AND_THEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_AND_THEN( name)\~ {\b DOCTEST_SUBCASE}("     And: " name)}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_AND_WHEN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_AND_WHEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_AND_WHEN( name)\~ {\b DOCTEST_SUBCASE}("And when: " name)}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ANONYMOUS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ANONYMOUS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ANONYMOUS( x)\~ {\b DOCTEST_CAT}(x, __LINE__)}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ASSERT_IMPLEMENT_1\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ASSERT_IMPLEMENT_1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_IMPLEMENT_1( assert_type,   {\i ...})}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\\par
        DOCTEST_ASSERT_IMPLEMENT_2(assert_type, __VA_ARGS__);                                      \\\par
    \} DOCTEST_FUNC_SCOPE_END\par
}
}
{\xe \v DOCTEST_ASSERT_IMPLEMENT_2\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ASSERT_IMPLEMENT_2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_IMPLEMENT_2( assert_type,   {\i ...})}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Woverloaded-shift-op-parentheses"})                  \\\par
    {\cf20 /* NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks) */}                                  \\\par
    doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,          \\\par
                                               __LINE__, #__VA_ARGS__);                            \\\par
    DOCTEST_WRAP_IN_TRY(DOCTEST_RB.setResult(                                                      \\\par
            doctest::detail::ExpressionDecomposer(doctest::assertType::assert_type)                \\\par
            << __VA_ARGS__)) {\cf20 /* NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks) */}         \\\par
    DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB)                                                    \\\par
    DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
}
}
{\xe \v DOCTEST_ASSERT_IN_TESTS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ASSERT_IN_TESTS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_IN_TESTS( decomp)}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     ResultBuilder rb(at, file, line, expr);                                                        \\\par
    rb.m_failed = failed;                                                                          \\\par
    if(rb.m_failed || getContextOptions()->success)                                                \\\par
        rb.m_decomp = decomp;                                                                      \\\par
    if(rb.log())                                                                                   \\\par
        DOCTEST_BREAK_INTO_DEBUGGER();                                                             \\\par
    if(rb.m_failed && checkIfShouldThrow(at))                                                      \\\par
    throwException()\par
}
}
{\xe \v DOCTEST_ASSERT_LOG_REACT_RETURN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ASSERT_LOG_REACT_RETURN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_LOG_REACT_RETURN( b)}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 if}(b.log()) DOCTEST_BREAK_INTO_DEBUGGER();                                                     \\\par
    b.react();                                                                                     \\\par
    DOCTEST_FUNC_SCOPE_RET(!b.m_failed)\par
}
}
{\xe \v DOCTEST_ASSERT_OUT_OF_TESTS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ASSERT_OUT_OF_TESTS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_OUT_OF_TESTS( decomp)}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{                                                                                           \\\par
        if(!is_running_in_test) \{                                                                  \\\par
            if(failed) \{                                                                           \\\par
                ResultBuilder rb(at, file, line, expr);                                            \\\par
                rb.m_failed = failed;                                                              \\\par
                rb.m_decomp = decomp;                                                              \\\par
                failed_out_of_a_testing_context(rb);                                               \\\par
                if(isDebuggerActive() && !getContextOptions()->no_breaks)                          \\\par
                    DOCTEST_BREAK_INTO_DEBUGGER();                                                 \\\par
                if(checkIfShouldThrow(at))                                                         \\\par
                    throwException();                                                              \\\par
            \}                                                                                      \\\par
            {\cf19 return} !failed;                                                                        \\\par
        \}                                                                                          \\\par
    \} {\cf19 while}({\cf17 false})\par
}
}
{\xe \v DOCTEST_BINARY_ASSERT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_BINARY_ASSERT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_BINARY_ASSERT( assert_type,  comp,   {\i ...})}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\\par
        doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\\par
                                                   __LINE__, #__VA_ARGS__);                        \\\par
        DOCTEST_WRAP_IN_TRY(                                                                       \\\par
                DOCTEST_RB.binary_assert<doctest::detail::binaryAssertComparison::comp>(           \\\par
                        __VA_ARGS__))                                                              \\\par
        DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\\par
    \} DOCTEST_FUNC_SCOPE_END\par
}
}
{\xe \v DOCTEST_BINARY_RELATIONAL_OP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_BINARY_RELATIONAL_OP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_BINARY_RELATIONAL_OP( n,  op)\~     template <class L, class R> struct RelationalComparator<n, L, R> \{ bool operator()(const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs) const \{ return op(lhs, rhs); \} \};}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_BREAK_INTO_DEBUGGER\:doctest.h}
{\xe \v doctest.h\:DOCTEST_BREAK_INTO_DEBUGGER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_BREAK_INTO_DEBUGGER()\~ raise(SIGTRAP)}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CAPTURE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CAPTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CAPTURE( x)\~ {\b DOCTEST_INFO}(#x " := ", x)}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CAST_TO_VOID\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CAST_TO_VOID}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CAST_TO_VOID(  {\i ...})\~ __VA_ARGS__;}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CAT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CAT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CAT( s1,  s2)\~ {\b DOCTEST_CAT_IMPL}(s1, s2)}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CAT_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CAT_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CAT_IMPL( s1,  s2)\~ s1##s2}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_CHECK, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_EQ(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_EQ, eq, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_FALSE(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_CHECK_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_FALSE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_CHECK_FALSE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_GE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_GE, ge, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_GT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_GT, gt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_LE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_LE, le, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_LT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_LT, lt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_CHECK, cond); \} {\b DOCTEST_FUNC_SCOPE_END}}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_NE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_NE, ne, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_NOTHROW\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_NOTHROW(  {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_NOTHROW_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_NOTHROW_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS(  {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_AS_MESSAGE( expr,  ex,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_WITH_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_WITH_AS( expr,  with,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_WITH_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_WITH_MESSAGE( expr,  with,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_UNARY(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_CHECK_UNARY, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_CHECK_UNARY_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CLANG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG\~ 0}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG_SUPPRESS_WARNING\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CLANG_SUPPRESS_WARNING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG_SUPPRESS_WARNING( w)}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG_SUPPRESS_WARNING_POP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CLANG_SUPPRESS_WARNING_POP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG_SUPPRESS_WARNING_POP}}
\par
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG_SUPPRESS_WARNING_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CLANG_SUPPRESS_WARNING_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG_SUPPRESS_WARNING_PUSH}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH( w)}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CMP_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_EQ( l,  r)\~ l == r}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CMP_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_GE( l,  r)\~ l >= r}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CMP_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_GT( l,  r)\~ l > r}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CMP_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_LE( l,  r)\~ l <= r}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CMP_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_LT( l,  r)\~ l < r}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CMP_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_NE( l,  r)\~ l != r}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_COMPARISON_RETURN_TYPE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_COMPARISON_RETURN_TYPE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_COMPARISON_RETURN_TYPE\~ bool}}
\par
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_COMPILER\:doctest.h}
{\xe \v doctest.h\:DOCTEST_COMPILER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_COMPILER( MAJOR,  MINOR,  PATCH)\~ ((MAJOR)*10000000 + (MINOR)*100000 + (PATCH))}}
\par
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONFIG_NO_EXCEPTIONS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CONFIG_NO_EXCEPTIONS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_NO_EXCEPTIONS}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONFIG_POSIX_SIGNALS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CONFIG_POSIX_SIGNALS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_POSIX_SIGNALS}}
\par
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONFIG_STRING_SIZE_TYPE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CONFIG_STRING_SIZE_TYPE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_STRING_SIZE_TYPE\~ unsigned}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONSTEXPR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CONSTEXPR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONSTEXPR\~ constexpr}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONSTEXPR_FUNC\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CONSTEXPR_FUNC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONSTEXPR_FUNC\~ constexpr}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CPLUSPLUS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CPLUSPLUS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CPLUSPLUS\~ __cplusplus}}
\par
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CREATE_AND_REGISTER_FUNCTION\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CREATE_AND_REGISTER_FUNCTION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CREATE_AND_REGISTER_FUNCTION( f,  decorators)}}
\par
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 static} {\cf18 void} f();                                                                               \\\par
    DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, f, decorators)                                        \\\par
    {\cf17 static} {\cf18 void} f()\par
}
}
{\xe \v DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS( f,  proxy,  decorators)}}
\par
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 static} doctest::detail::funcType proxy() \{ {\cf19 return} f; \}                                         \\\par
    DOCTEST_REGISTER_FUNCTION({\cf17 inline}, proxy(), decorators)                                         \\\par
    {\cf17 static} {\cf18 void} f()\par
}
}
{\xe \v DOCTEST_DECLARE_INTERFACE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_DECLARE_INTERFACE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_DECLARE_INTERFACE( name)}}
\par
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 virtual} ~name();                                                                               \\\par
    name() = {\cf19 default};                                                                              \\\par
    name({\cf17 const} name&) = {\cf17 delete};                                                                    \\\par
    name(name&&) = {\cf17 delete};                                                                         \\\par
    name& operator=({\cf17 const} name&) = {\cf17 delete};                                                         \\\par
    name& operator=(name&&) = {\cf17 delete};\par
}
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_DEFINE_DECORATOR( name,  type,  def)}}
\par
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 struct }name                                                                                    \\\par
    \{                                                                                              \\\par
        type data;                                                                                 \\\par
        name(type in = def)                                                                        \\\par
                : data(in) \{\}                                                                      \\\par
        {\cf18 void} fill(detail::TestCase& state){\cf17  const }\{ state.DOCTEST_CAT(m_, name) = data; \}           \\\par
        {\cf18 void} fill(detail::TestSuite& state){\cf17  const }\{ state.DOCTEST_CAT(m_, name) = data; \}          \\\par
    \}\par
}
}
{\xe \v DOCTEST_DEFINE_INTERFACE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_DEFINE_INTERFACE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_DEFINE_INTERFACE( name)\~     name::~name() = default;}}
\par
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DO_BINARY_EXPRESSION_COMPARISON\:doctest.h}
{\xe \v doctest.h\:DOCTEST_DO_BINARY_EXPRESSION_COMPARISON}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_DO_BINARY_EXPRESSION_COMPARISON( op,  op_str,  op_macro)}}
\par
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <{\cf17 typename} R>                                                                          \\\par
    DOCTEST_NOINLINE SFINAE_OP(Result,op) {\cf17 operator} op(R&& rhs) \{                                   \\\par
    {\cf18 bool} res = op_macro(doctest::detail::forward<const L>(lhs), doctest::detail::forward<R>(rhs)); \\\par
        if(m_at & assertType::is_false)                                                            \\\par
            res = !res;                                                                            \\\par
        if(!res || doctest::getContextOptions()->success)                                          \\\par
            {\cf19 return} Result(res, stringifyBinaryExpr(lhs, op_str, rhs));                             \\\par
        {\cf19 return} Result(res);                                                                        \\\par
    \}\par
}
}
{\xe \v DOCTEST_EMPTY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_EMPTY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_EMPTY}}
\par
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_EXCEPTION_EMPTY_FUNC\:doctest.h}
{\xe \v doctest.h\:DOCTEST_EXCEPTION_EMPTY_FUNC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_EXCEPTION_EMPTY_FUNC}}
\par
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     [] \{ {\cf17 static_assert}({\cf17 false}, {\cf22 "Exceptions are disabled! "} \\\par
    {\cf22 "Use DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS if you want to compile with exceptions disabled."}); {\cf19 return} {\cf17 false}; \}()\par
}
}
{\xe \v DOCTEST_FAIL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAIL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAIL(  {\i ...})\~ {\b DOCTEST_ADD_FAIL_AT}(__FILE__, __LINE__, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAIL_CHECK\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAIL_CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAIL_CHECK(  {\i ...})\~ {\b DOCTEST_ADD_FAIL_CHECK_AT}(__FILE__, __LINE__, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_EQ\~ {\b DOCTEST_CHECK_EQ}}}
\par
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_GE\~ {\b DOCTEST_CHECK_GE}}}
\par
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_GT\~ {\b DOCTEST_CHECK_GT}}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_LE\~ {\b DOCTEST_CHECK_LE}}}
\par
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_LT\~ {\b DOCTEST_CHECK_LT}}}
\par
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_NE\~ {\b DOCTEST_CHECK_NE}}}
\par
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_UNARY\~ {\b DOCTEST_CHECK_UNARY}}}
\par
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_UNARY_FALSE\~ {\b DOCTEST_CHECK_UNARY_FALSE}}}
\par
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_EQ\~ {\b DOCTEST_REQUIRE_EQ}}}
\par
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_GE\~ {\b DOCTEST_REQUIRE_GE}}}
\par
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_GT\~ {\b DOCTEST_REQUIRE_GT}}}
\par
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_LE\~ {\b DOCTEST_REQUIRE_LE}}}
\par
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_LT\~ {\b DOCTEST_REQUIRE_LT}}}
\par
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_NE\~ {\b DOCTEST_REQUIRE_NE}}}
\par
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_UNARY\~ {\b DOCTEST_REQUIRE_UNARY}}}
\par
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_UNARY_FALSE\~ {\b DOCTEST_REQUIRE_UNARY_FALSE}}}
\par
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_EQ\~ {\b DOCTEST_WARN_EQ}}}
\par
{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_GE\~ {\b DOCTEST_WARN_GE}}}
\par
{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_GT\~ {\b DOCTEST_WARN_GT}}}
\par
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_LE\~ {\b DOCTEST_WARN_LE}}}
\par
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_LT\~ {\b DOCTEST_WARN_LT}}}
\par
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_NE\~ {\b DOCTEST_WARN_NE}}}
\par
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_UNARY\~ {\b DOCTEST_WARN_UNARY}}}
\par
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_UNARY_FALSE\~ {\b DOCTEST_WARN_UNARY_FALSE}}}
\par
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FORBIT_EXPRESSION\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FORBIT_EXPRESSION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FORBIT_EXPRESSION( rt,  op)}}
\par
{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <{\cf17 typename} R>                                                                          \\\par
    rt& {\cf17 operator} op({\cf17 const} R&) \{                                                                    \\\par
        static_assert(deferred_false<R>::value,                                                    \\\par
                      {\cf22 "Expression Too Complex Please Rewrite As Binary Comparison!"});              \\\par
        {\cf19 return} *{\cf17 this};                                                                              \\\par
    \}\par
}
}
{\xe \v DOCTEST_FUNC_EMPTY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FUNC_EMPTY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FUNC_EMPTY\~ (void)0}}
\par
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FUNC_SCOPE_BEGIN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FUNC_SCOPE_BEGIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FUNC_SCOPE_BEGIN\~ do}}
\par
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FUNC_SCOPE_END\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FUNC_SCOPE_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FUNC_SCOPE_END\~ while(false)}}
\par
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FUNC_SCOPE_RET\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FUNC_SCOPE_RET}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FUNC_SCOPE_RET( v)\~ (void)0}}
\par
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GCC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC\~ 0}}
\par
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC_SUPPRESS_WARNING\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GCC_SUPPRESS_WARNING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC_SUPPRESS_WARNING( w)}}
\par
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC_SUPPRESS_WARNING_POP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GCC_SUPPRESS_WARNING_POP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC_SUPPRESS_WARNING_POP}}
\par
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC_SUPPRESS_WARNING_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GCC_SUPPRESS_WARNING_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC_SUPPRESS_WARNING_PUSH}}
\par
{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH( w)}}
\par
{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GIVEN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GIVEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GIVEN( name)\~ {\b DOCTEST_SUBCASE}("   Given: " name)}}
\par
{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GLOBAL_NO_WARNINGS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GLOBAL_NO_WARNINGS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GLOBAL_NO_WARNINGS( var,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wglobal-constructors"})                                \\\par
    {\cf17 static} {\cf17 const} {\cf18 int} var = doctest::detail::consume(&var, __VA_ARGS__);                              \\\par
    DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
}
}
{\xe \v DOCTEST_ICC\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ICC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ICC\~ 0}}
\par
{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_IMPLEMENT_FIXTURE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_IMPLEMENT_FIXTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_IMPLEMENT_FIXTURE( der,  base,  func,  decorators)}}
\par
{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 namespace }\{ {\cf20 /* NOLINT */}                                                                       \\\par
        {\cf17 struct }der : {\cf17 public} base                                                                   \\\par
        \{                                                                                          \\\par
            {\cf18 void} f();                                                                              \\\par
        \};                                                                                         \\\par
        {\cf17 static} DOCTEST_INLINE_NOINLINE {\cf18 void} func() \{                                               \\\par
            der v;                                                                                 \\\par
            v.f();                                                                                 \\\par
        \}                                                                                          \\\par
        DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, func, decorators)                                 \\\par
    \}                                                                                              \\\par
    DOCTEST_INLINE_NOINLINE {\cf18 void} der::f()\par
}
}
{\xe \v DOCTEST_INFO\:doctest.h}
{\xe \v doctest.h\:DOCTEST_INFO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INFO(  {\i ...})}}
\par
{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_INFO_IMPL(DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_),                                         \\\par
                      DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_OTHER_),                                   \\\par
                      __VA_ARGS__)\par
}
}
{\xe \v DOCTEST_INFO_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_INFO_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INFO_IMPL( mb_name,  s_name,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 auto} DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_) = doctest::detail::MakeContextScope(                  \\\par
        [&](std::ostream* s_name) \{                                                                \\\par
        doctest::detail::MessageBuilder mb_name(__FILE__, __LINE__, doctest::assertType::is_warn); \\\par
        mb_name.m_stream = s_name;                                                                 \\\par
        mb_name * __VA_ARGS__;                                                                     \\\par
    \})\par
}
}
{\xe \v DOCTEST_INLINE_NOINLINE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_INLINE_NOINLINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INLINE_NOINLINE\~ inline {\b DOCTEST_NOINLINE}}}
\par
{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_INTERFACE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_INTERFACE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INTERFACE}}
\par
{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_INTERFACE_DECL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_INTERFACE_DECL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INTERFACE_DECL\~ {\b DOCTEST_INTERFACE}}}
\par
{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_INTERFACE_DEF\:doctest.h}
{\xe \v doctest.h\:DOCTEST_INTERFACE_DEF}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INTERFACE_DEF}}
\par
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN}}
\par
{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH                                                             \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4548) {\cf20 /* before comma no effect; expected side - effect */}       \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4265) {\cf20 /* virtual functions, but destructor is not virtual */}     \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4986) {\cf20 /* exception specification does not match previous */}      \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4350) {\cf20 /* 'member1' called instead of 'member2' */}                \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4668) {\cf20 /* not defined as a preprocessor macro */}                  \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4365) {\cf20 /* signed/unsigned mismatch */}                             \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4774) {\cf20 /* format string not a string literal */}                   \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4820) {\cf20 /* padding */}                                              \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4625) {\cf20 /* copy constructor was implicitly deleted */}              \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4626) {\cf20 /* assignment operator was implicitly deleted */}           \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5027) {\cf20 /* move assignment operator implicitly deleted */}          \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5026) {\cf20 /* move constructor was implicitly deleted */}              \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4623) {\cf20 /* default constructor was implicitly deleted */}           \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5039) {\cf20 /* pointer to pot. throwing function passed to extern C */} \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5045) {\cf20 /* Spectre mitigation for memory load */}                   \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5105) {\cf20 /* macro producing 'defined' has undefined behavior */}     \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4738) {\cf20 /* storing float result in memory, loss of performance */}  \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5262) {\cf20 /* implicit fall-through */}\par
}
}
{\xe \v DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END\~ {\b DOCTEST_MSVC_SUPPRESS_WARNING_POP}}}
\par
{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MESSAGE(  {\i ...})\~ {\b DOCTEST_ADD_MESSAGE_AT}(__FILE__, __LINE__, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MSVC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC\~ 0}}
\par
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MSVC_SUPPRESS_WARNING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC_SUPPRESS_WARNING( w)}}
\par
{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING_POP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MSVC_SUPPRESS_WARNING_POP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC_SUPPRESS_WARNING_POP}}
\par
{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MSVC_SUPPRESS_WARNING_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC_SUPPRESS_WARNING_PUSH}}
\par
{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH( w)}}
\par
{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_NO_SANITIZE_INTEGER\:doctest.h}
{\xe \v doctest.h\:DOCTEST_NO_SANITIZE_INTEGER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_NO_SANITIZE_INTEGER}}
\par
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_NOEXCEPT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_NOEXCEPT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_NOEXCEPT\~ noexcept}}
\par
{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_NOINLINE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_NOINLINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_NOINLINE\~ __attribute__((noinline))}}
\par
{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_NORETURN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_NORETURN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_NORETURN\~ [[noreturn]]}}
\par
{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_PLATFORM_LINUX\:doctest.h}
{\xe \v doctest.h\:DOCTEST_PLATFORM_LINUX}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_PLATFORM_LINUX}}
\par
{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REF_WRAP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REF_WRAP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REF_WRAP( x)\~ x&}}
\par
{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REGISTER_EXCEPTION_TRANSLATOR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REGISTER_EXCEPTION_TRANSLATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR( signature)}}
\par
{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_),        \\\par
                                               signature)\par
}
}
{\xe \v DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL( translatorName,  signature)}}
\par
{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 inline} doctest::String translatorName(signature);                                              \\\par
    DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_), {\cf20 /* NOLINT(cert-err58-cpp) */} \\\par
            doctest::registerExceptionTranslator(translatorName))                                  \\\par
    doctest::String translatorName(signature)\par
}
}
{\xe \v DOCTEST_REGISTER_FUNCTION\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REGISTER_FUNCTION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_FUNCTION( global_prefix,  f,  decorators)}}
\par
{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     global_prefix DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), {\cf20 /* NOLINT */}    \\\par
            doctest::detail::regTest(                                                              \\\par
                    doctest::detail::TestCase(                                                     \\\par
                            f, __FILE__, __LINE__,                                                 \\\par
                            doctest_detail_test_suite_ns::getCurrentTestSuite()) *                 \\\par
                    decorators))\par
}
}
{\xe \v DOCTEST_REGISTER_LISTENER\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REGISTER_LISTENER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_LISTENER( name,  priority,  reporter)}}
\par
{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_REPORTER_), {\cf20 /* NOLINT(cert-err58-cpp) */} \\\par
            doctest::registerReporter<reporter>(name, priority, {\cf17 false}))                            \\\par
    static_assert({\cf17 true}, {\cf22 ""})\par
}
}
{\xe \v DOCTEST_REGISTER_REPORTER\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REGISTER_REPORTER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_REPORTER( name,  priority,  reporter)}}
\par
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_REPORTER_), {\cf20 /* NOLINT(cert-err58-cpp) */} \\\par
            doctest::registerReporter<reporter>(name, priority, {\cf17 true}))                             \\\par
    static_assert({\cf17 true}, {\cf22 ""})\par
}
}
{\xe \v DOCTEST_RELATIONAL_OP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_RELATIONAL_OP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_RELATIONAL_OP( name,  op)}}
\par
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <{\cf17 typename} L, {\cf17 typename} R>                                                              \\\par
    DOCTEST_COMPARISON_RETURN_TYPE name({\cf17 const} DOCTEST_REF_WRAP(L) lhs,                             \\\par
                                        {\cf17 const} DOCTEST_REF_WRAP(R) rhs) \{                           \\\par
        {\cf19 return} lhs op rhs;                                                                         \\\par
    \}\par
}
}
{\xe \v DOCTEST_REQUIRE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_REQUIRE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAHI}
{\bkmkend AAAAAAAAHI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_EQ(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_EQ, eq, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAHJ}
{\bkmkend AAAAAAAAHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_EQ\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAHK}
{\bkmkend AAAAAAAAHK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_FALSE(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_REQUIRE_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAHL}
{\bkmkend AAAAAAAAHL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_FALSE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAHM}
{\bkmkend AAAAAAAAHM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_FALSE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_REQUIRE_FALSE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}}}
\par
{\bkmkstart AAAAAAAAHN}
{\bkmkend AAAAAAAAHN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_FALSE_MESSAGE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAHO}
{\bkmkend AAAAAAAAHO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_GE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_GE, ge, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAHP}
{\bkmkend AAAAAAAAHP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_GE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAHQ}
{\bkmkend AAAAAAAAHQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_GT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_GT, gt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAHR}
{\bkmkend AAAAAAAAHR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_GT\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAHS}
{\bkmkend AAAAAAAAHS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_LE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_LE, le, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_LE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_LT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_LT, lt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAHV}
{\bkmkend AAAAAAAAHV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_LT\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAHW}
{\bkmkend AAAAAAAAHW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_REQUIRE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}}}
\par
{\bkmkstart AAAAAAAAHX}
{\bkmkend AAAAAAAAHX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_MESSAGE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAHY}
{\bkmkend AAAAAAAAHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_NE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_NE, ne, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAHZ}
{\bkmkend AAAAAAAAHZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_NE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_NOTHROW\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_NOTHROW(  {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIB}
{\bkmkend AAAAAAAAIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_NOTHROW_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_NOTHROW_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS(  {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIE}
{\bkmkend AAAAAAAAIE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_AS_MESSAGE( expr,  ex,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_WITH_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_WITH_AS( expr,  with,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_WITH_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE( expr,  with,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_UNARY(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_REQUIRE_UNARY, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAIL}
{\bkmkend AAAAAAAAIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_UNARY\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_REQUIRE_UNARY_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_UNARY_FALSE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SCENARIO\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SCENARIO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SCENARIO( name)\~ {\b DOCTEST_TEST_CASE}("  Scenario: " name)}}
\par
{\bkmkstart AAAAAAAAIP}
{\bkmkend AAAAAAAAIP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SCENARIO_CLASS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SCENARIO_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SCENARIO_CLASS( name)\~ {\b DOCTEST_TEST_CASE_CLASS}("  Scenario: " name)}}
\par
{\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SCENARIO_TEMPLATE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SCENARIO_TEMPLATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SCENARIO_TEMPLATE( name,  T,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE}("  Scenario: " name, T, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAIR}
{\bkmkend AAAAAAAAIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SCENARIO_TEMPLATE_DEFINE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SCENARIO_TEMPLATE_DEFINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SCENARIO_TEMPLATE_DEFINE( name,  T,  id)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}("  Scenario: " name, T, id)}}
\par
{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SINGLE_HEADER\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SINGLE_HEADER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SINGLE_HEADER}}
\par
{\bkmkstart AAAAAAAAIT}
{\bkmkend AAAAAAAAIT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_STRINGIFY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_STRINGIFY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_STRINGIFY(  {\i ...})\~ toString(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SUBCASE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SUBCASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SUBCASE( name)}}
\par
{\bkmkstart AAAAAAAAIV}
{\bkmkend AAAAAAAAIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 if}({\cf17 const} doctest::detail::Subcase & DOCTEST_ANONYMOUS(DOCTEST_ANON_SUBCASE_) DOCTEST_UNUSED =  \\\par
               doctest::detail::Subcase(name, __FILE__, __LINE__))\par
}
}
{\xe \v DOCTEST_SUPPRESS_COMMON_WARNINGS_POP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SUPPRESS_COMMON_WARNINGS_POP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SUPPRESS_COMMON_WARNINGS_POP}}
\par
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                             \\\par
    DOCTEST_GCC_SUPPRESS_WARNING_POP                                                               \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
}
}
{\xe \v DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH}}
\par
{\bkmkstart AAAAAAAAIX}
{\bkmkend AAAAAAAAIX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SYMBOL_EXPORT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SYMBOL_EXPORT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SYMBOL_EXPORT\~ __attribute__((visibility("default")))}}
\par
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SYMBOL_IMPORT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SYMBOL_IMPORT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SYMBOL_IMPORT}}
\par
{\bkmkstart AAAAAAAAIZ}
{\bkmkend AAAAAAAAIZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE( decorators)\~     {\b DOCTEST_CREATE_AND_REGISTER_FUNCTION}({\b DOCTEST_ANONYMOUS}(DOCTEST_ANON_FUNC_), decorators)}}
\par
{\bkmkstart AAAAAAAAJA}
{\bkmkend AAAAAAAAJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE_CLASS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_CLASS(  {\i ...})\~     TEST_CASES_CAN_BE_REGISTERED_IN_CLASSES_ONLY_IN_CPP17_MODE_OR_WITH_VS_2017_OR_NEWER}}
\par
{\bkmkstart AAAAAAAAJB}
{\bkmkend AAAAAAAAJB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE_FIXTURE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_FIXTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_FIXTURE( c,  decorators)}}
\par
{\bkmkstart AAAAAAAAJC}
{\bkmkend AAAAAAAAJC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(DOCTEST_ANON_CLASS_), c,                           \\\par
                              DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), decorators)\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE( dec,  T,   {\i ...})\~     {\b DOCTEST_TEST_CASE_TEMPLATE_IMPL}(dec, T, {\b DOCTEST_ANONYMOUS}(DOCTEST_ANON_TMP_), __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAJD}
{\bkmkend AAAAAAAAJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_APPLY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_APPLY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_APPLY( id,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAJE}
{\bkmkend AAAAAAAAJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL({\cf18 id}, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), __VA_ARGS__) \\\par
    static_assert({\cf17 true}, {\cf22 ""})\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_DEFINE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_DEFINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_DEFINE( dec,  T,  id)}}
\par
{\bkmkstart AAAAAAAAJF}
{\bkmkend AAAAAAAAJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT({\cf18 id}, ITERATOR),                      \\\par
                                           DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_))\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL( dec,  T,  iter,  func)}}
\par
{\bkmkstart AAAAAAAAJG}
{\bkmkend AAAAAAAAJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <{\cf17 typename} T>                                                                          \\\par
    {\cf17 static} {\cf18 void} func();                                                                            \\\par
    {\cf17 namespace }\{ {\cf20 /* NOLINT */}                                                                       \\\par
        {\cf17 template} <{\cf17 typename} Tuple>                                                                  \\\par
        {\cf17 struct }iter;                                                                               \\\par
        {\cf17 template} <{\cf17 typename} Type, {\cf17 typename}... Rest>                                                 \\\par
        {\cf17 struct }iter<std::tuple<Type, Rest...>>                                                     \\\par
        \{                                                                                          \\\par
            iter({\cf17 const} {\cf18 char}* file, {\cf18 unsigned} line, {\cf18 int} index) \{                                     \\\par
                doctest::detail::regTest(doctest::detail::TestCase(func<Type>, file, line,         \\\par
                                            doctest_detail_test_suite_ns::getCurrentTestSuite(),   \\\par
                                            doctest::toString<Type>(),                             \\\par
                                            {\cf18 int}(line) * 1000 + index)                              \\\par
                                         * dec);                                                   \\\par
                iter<std::tuple<Rest...>>(file, line, index + 1);                                  \\\par
            \}                                                                                      \\\par
        \};                                                                                         \\\par
        {\cf17 template} <>                                                                                \\\par
        {\cf17 struct }iter<std::tuple<>>                                                                  \\\par
        \{                                                                                          \\\par
            iter({\cf17 const} {\cf18 char}*, {\cf18 unsigned}, {\cf18 int}) \{\}                                                    \\\par
        \};                                                                                         \\\par
    \}                                                                                              \\\par
    {\cf17 template} <{\cf17 typename} T>                                                                          \\\par
    {\cf17 static} {\cf18 void} func()\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_IMPL( dec,  T,  anon,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAJH}
{\bkmkend AAAAAAAAJH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT(anon, ITERATOR), anon);             \\\par
    DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(anon, anon, std::tuple<__VA_ARGS__>)               \\\par
    {\cf17 template} <{\cf17 typename} T>                                                                          \\\par
    {\cf17 static} {\cf18 void} anon()\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE( id,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}(id,__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAJI}
{\bkmkend AAAAAAAAJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL( id,  anon,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAJJ}
{\bkmkend AAAAAAAAJJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_CAT(anon, DUMMY), {\cf20 /* NOLINT(cert-err58-cpp, fuchsia-statically-constructed-objects) */} \\\par
        doctest::detail::instantiationHelper(                                                      \\\par
            DOCTEST_CAT({\cf18 id}, ITERATOR)<__VA_ARGS__>(__FILE__, __LINE__, 0)))\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_INVOKE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_INVOKE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_INVOKE( id,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAJK}
{\bkmkend AAAAAAAAJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL({\cf18 id}, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), std::tuple<__VA_ARGS__>) \\\par
    static_assert({\cf17 true}, {\cf22 ""})\par
}
}
{\xe \v DOCTEST_TEST_SUITE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_SUITE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_SUITE( decorators)\~     {\b DOCTEST_TEST_SUITE_IMPL}(decorators, {\b DOCTEST_ANONYMOUS}(DOCTEST_ANON_SUITE_))}}
\par
{\bkmkstart AAAAAAAAJL}
{\bkmkend AAAAAAAAJL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_SUITE_BEGIN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_SUITE_BEGIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_SUITE_BEGIN( decorators)}}
\par
{\bkmkstart AAAAAAAAJM}
{\bkmkend AAAAAAAAJM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), {\cf20 /* NOLINT(cert-err58-cpp) */}  \\\par
            doctest::detail::setTestSuite(doctest::detail::TestSuite() * decorators))              \\\par
    static_assert({\cf17 true}, {\cf22 ""})\par
}
}
{\xe \v DOCTEST_TEST_SUITE_END\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_SUITE_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
DOCTEST_TEST_SUITE_END}}
\par
{\bkmkstart AAAAAAAAJN}
{\bkmkend AAAAAAAAJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), {\cf20 /* NOLINT(cert-err58-cpp) */}  \\\par
            doctest::detail::setTestSuite(doctest::detail::TestSuite() * {\cf22 ""}))                      \\\par
    {\cf17 using }DOCTEST_ANONYMOUS(DOCTEST_ANON_FOR_SEMICOLON_) = int\par
}
}
{\xe \v DOCTEST_TEST_SUITE_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_SUITE_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_SUITE_IMPL( decorators,  ns_name)}}
\par
{\bkmkstart AAAAAAAAJO}
{\bkmkend AAAAAAAAJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 namespace }ns_name \{ {\cf17 namespace }doctest_detail_test_suite_ns \{                                   \\\par
            {\cf17 static} DOCTEST_NOINLINE doctest::detail::TestSuite& getCurrentTestSuite() noexcept \{   \\\par
                DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4640)                                      \\\par
                DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wexit-time-destructors"})                \\\par
                DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wmissing-field-initializers"})             \\\par
                {\cf17 static} doctest::detail::TestSuite data\{\};                                          \\\par
                {\cf17 static} {\cf18 bool}                       inited = {\cf17 false};                                  \\\par
                DOCTEST_MSVC_SUPPRESS_WARNING_POP                                                  \\\par
                DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                 \\\par
                DOCTEST_GCC_SUPPRESS_WARNING_POP                                                   \\\par
                if(!inited) \{                                                                      \\\par
                    data* decorators;                                                              \\\par
                    inited = {\cf17 true};                                                                 \\\par
                \}                                                                                  \\\par
                {\cf19 return} data;                                                                       \\\par
            \}                                                                                      \\\par
        \}                                                                                          \\\par
    \}                                                                                              \\\par
    {\cf17 namespace }ns_name\par
}
}
{\xe \v DOCTEST_THEN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_THEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_THEN( name)\~ {\b DOCTEST_SUBCASE}("    Then: " name)}}
\par
{\bkmkstart AAAAAAAAJP}
{\bkmkend AAAAAAAAJP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TO_LVALUE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TO_LVALUE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TO_LVALUE(  {\i ...})\~ __VA_ARGS__}}
\par
{\bkmkstart AAAAAAAAJQ}
{\bkmkend AAAAAAAAJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TOSTR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TOSTR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TOSTR( x)\~ {\b DOCTEST_TOSTR_IMPL}(x)}}
\par
{\bkmkstart AAAAAAAAJR}
{\bkmkend AAAAAAAAJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TOSTR_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TOSTR_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TOSTR_IMPL( x)\~ #x}}
\par
{\bkmkstart AAAAAAAAJS}
{\bkmkend AAAAAAAAJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TYPE_TO_STRING\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TYPE_TO_STRING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TYPE_TO_STRING(  {\i ...})\~ {\b DOCTEST_TYPE_TO_STRING_AS}(#__VA_ARGS__, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAJT}
{\bkmkend AAAAAAAAJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TYPE_TO_STRING_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TYPE_TO_STRING_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TYPE_TO_STRING_AS( str,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAJU}
{\bkmkend AAAAAAAAJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 namespace }doctest \{                                                                            \\\par
        {\cf17 template} <>                                                                                \\\par
        {\cf17 inline} String toString<__VA_ARGS__>() \{                                                    \\\par
            {\cf19 return} str;                                                                            \\\par
        \}                                                                                          \\\par
    \}                                                                                              \\\par
    static_assert({\cf17 true}, {\cf22 ""})\par
}
}
{\xe \v DOCTEST_UNARY_ASSERT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_UNARY_ASSERT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_UNARY_ASSERT( assert_type,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAJV}
{\bkmkend AAAAAAAAJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\\par
        doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\\par
                                                   __LINE__, #__VA_ARGS__);                        \\\par
        DOCTEST_WRAP_IN_TRY(DOCTEST_RB.unary_assert(__VA_ARGS__))                                  \\\par
        DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\\par
    \} DOCTEST_FUNC_SCOPE_END\par
}
}
{\xe \v DOCTEST_UNUSED\:doctest.h}
{\xe \v doctest.h\:DOCTEST_UNUSED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_UNUSED\~ __attribute__((unused))}}
\par
{\bkmkstart AAAAAAAAJW}
{\bkmkend AAAAAAAAJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION\:doctest.h}
{\xe \v doctest.h\:DOCTEST_VERSION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION\~     ({\b DOCTEST_VERSION_MAJOR} * 10000 + {\b DOCTEST_VERSION_MINOR} * 100 + {\b DOCTEST_VERSION_PATCH})}}
\par
{\bkmkstart AAAAAAAAJX}
{\bkmkend AAAAAAAAJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION_MAJOR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_VERSION_MAJOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION_MAJOR\~ 2}}
\par
{\bkmkstart AAAAAAAAJY}
{\bkmkend AAAAAAAAJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION_MINOR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_VERSION_MINOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION_MINOR\~ 4}}
\par
{\bkmkstart AAAAAAAAJZ}
{\bkmkend AAAAAAAAJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION_PATCH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_VERSION_PATCH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION_PATCH\~ 11}}
\par
{\bkmkstart AAAAAAAAKA}
{\bkmkend AAAAAAAAKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION_STR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_VERSION_STR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION_STR}}
\par
{\bkmkstart AAAAAAAAKB}
{\bkmkend AAAAAAAAKB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TOSTR(DOCTEST_VERSION_MAJOR) {\cf22 "."}                                                       \\\par
    DOCTEST_TOSTR(DOCTEST_VERSION_MINOR) {\cf22 "."}                                                       \\\par
    DOCTEST_TOSTR(DOCTEST_VERSION_PATCH)\par
}
}
{\xe \v DOCTEST_WARN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_WARN, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKC}
{\bkmkend AAAAAAAAKC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_EQ(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_EQ, eq, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKD}
{\bkmkend AAAAAAAAKD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_FALSE(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_WARN_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKE}
{\bkmkend AAAAAAAAKE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_FALSE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_WARN_FALSE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}}}
\par
{\bkmkstart AAAAAAAAKF}
{\bkmkend AAAAAAAAKF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_GE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_GE, ge, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKG}
{\bkmkend AAAAAAAAKG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_GT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_GT, gt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKH}
{\bkmkend AAAAAAAAKH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_LE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_LE, le, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKI}
{\bkmkend AAAAAAAAKI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_LT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_LT, lt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKJ}
{\bkmkend AAAAAAAAKJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_WARN, cond); \} {\b DOCTEST_FUNC_SCOPE_END}}}
\par
{\bkmkstart AAAAAAAAKK}
{\bkmkend AAAAAAAAKK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_NE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_NE, ne, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKL}
{\bkmkend AAAAAAAAKL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_NOTHROW\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_NOTHROW(  {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAKM}
{\bkmkend AAAAAAAAKM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_NOTHROW_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_NOTHROW_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAKN}
{\bkmkend AAAAAAAAKN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS(  {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAKO}
{\bkmkend AAAAAAAAKO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAKP}
{\bkmkend AAAAAAAAKP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_AS_MESSAGE( expr,  ex,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAKQ}
{\bkmkend AAAAAAAAKQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAKR}
{\bkmkend AAAAAAAAKR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAKS}
{\bkmkend AAAAAAAAKS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_WITH_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_WITH_AS( expr,  with,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAKT}
{\bkmkend AAAAAAAAKT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_WITH_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAKU}
{\bkmkend AAAAAAAAKU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_WITH_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_WITH_MESSAGE( expr,  with,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAKV}
{\bkmkend AAAAAAAAKV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_UNARY(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_WARN_UNARY, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKW}
{\bkmkend AAAAAAAAKW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_WARN_UNARY_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKX}
{\bkmkend AAAAAAAAKX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WHEN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WHEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WHEN( name)\~ {\b DOCTEST_SUBCASE}("    When: " name)}}
\par
{\bkmkstart AAAAAAAAKY}
{\bkmkend AAAAAAAAKY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WRAP_IN_TRY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WRAP_IN_TRY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WRAP_IN_TRY( x)\~ x;}}
\par
{\bkmkstart AAAAAAAAKZ}
{\bkmkend AAAAAAAAKZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAIL\:doctest.h}
{\xe \v doctest.h\:FAIL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAIL(  {\i ...})\~ {\b DOCTEST_FAIL}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALA}
{\bkmkend AAAAAAAALA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAIL_CHECK\:doctest.h}
{\xe \v doctest.h\:FAIL_CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAIL_CHECK(  {\i ...})\~ {\b DOCTEST_FAIL_CHECK}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALB}
{\bkmkend AAAAAAAALB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_EQ\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_EQ(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_EQ}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALC}
{\bkmkend AAAAAAAALC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_GE\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_GE(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_GE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALD}
{\bkmkend AAAAAAAALD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_GT\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_GT(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_GT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALE}
{\bkmkend AAAAAAAALE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_LE\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_LE(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_LE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALF}
{\bkmkend AAAAAAAALF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_LT\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_LT(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_LT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALG}
{\bkmkend AAAAAAAALG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_NE\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_NE(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_NE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALH}
{\bkmkend AAAAAAAALH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_UNARY\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_UNARY(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_UNARY}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALI}
{\bkmkend AAAAAAAALI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_UNARY_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALJ}
{\bkmkend AAAAAAAALJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_EQ\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_EQ(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_EQ}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALK}
{\bkmkend AAAAAAAALK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_GE\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_GE(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_GE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALL}
{\bkmkend AAAAAAAALL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_GT\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_GT(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_GT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALM}
{\bkmkend AAAAAAAALM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_LE\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_LE(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_LE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALN}
{\bkmkend AAAAAAAALN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_LT\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_LT(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_LT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALO}
{\bkmkend AAAAAAAALO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_NE\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_NE(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_NE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALP}
{\bkmkend AAAAAAAALP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_UNARY\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_UNARY(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_UNARY}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALQ}
{\bkmkend AAAAAAAALQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_UNARY_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALR}
{\bkmkend AAAAAAAALR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_EQ\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_EQ(  {\i ...})\~ {\b DOCTEST_FAST_WARN_EQ}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALS}
{\bkmkend AAAAAAAALS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_GE\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_GE(  {\i ...})\~ {\b DOCTEST_FAST_WARN_GE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALT}
{\bkmkend AAAAAAAALT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_GT\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_GT(  {\i ...})\~ {\b DOCTEST_FAST_WARN_GT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALU}
{\bkmkend AAAAAAAALU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_LE\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_LE(  {\i ...})\~ {\b DOCTEST_FAST_WARN_LE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALV}
{\bkmkend AAAAAAAALV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_LT\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_LT(  {\i ...})\~ {\b DOCTEST_FAST_WARN_LT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALW}
{\bkmkend AAAAAAAALW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_NE\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_NE(  {\i ...})\~ {\b DOCTEST_FAST_WARN_NE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALX}
{\bkmkend AAAAAAAALX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_UNARY\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_UNARY(  {\i ...})\~ {\b DOCTEST_FAST_WARN_UNARY}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALY}
{\bkmkend AAAAAAAALY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_FAST_WARN_UNARY_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALZ}
{\bkmkend AAAAAAAALZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v GIVEN\:doctest.h}
{\xe \v doctest.h\:GIVEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define GIVEN( name)\~ {\b DOCTEST_GIVEN}(name)}}
\par
{\bkmkstart AAAAAAAAMA}
{\bkmkend AAAAAAAAMA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v INFO\:doctest.h}
{\xe \v doctest.h\:INFO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INFO(  {\i ...})\~ {\b DOCTEST_INFO}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMB}
{\bkmkend AAAAAAAAMB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MESSAGE\:doctest.h}
{\xe \v doctest.h\:MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MESSAGE(  {\i ...})\~ {\b DOCTEST_MESSAGE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMC}
{\bkmkend AAAAAAAAMC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REGISTER_EXCEPTION_TRANSLATOR\:doctest.h}
{\xe \v doctest.h\:REGISTER_EXCEPTION_TRANSLATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REGISTER_EXCEPTION_TRANSLATOR( signature)\~ {\b DOCTEST_REGISTER_EXCEPTION_TRANSLATOR}(signature)}}
\par
{\bkmkstart AAAAAAAAMD}
{\bkmkend AAAAAAAAMD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REGISTER_LISTENER\:doctest.h}
{\xe \v doctest.h\:REGISTER_LISTENER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REGISTER_LISTENER( name,  priority,  reporter)\~ {\b DOCTEST_REGISTER_LISTENER}(name, priority, reporter)}}
\par
{\bkmkstart AAAAAAAAME}
{\bkmkend AAAAAAAAME}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REGISTER_REPORTER\:doctest.h}
{\xe \v doctest.h\:REGISTER_REPORTER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REGISTER_REPORTER( name,  priority,  reporter)\~ {\b DOCTEST_REGISTER_REPORTER}(name, priority, reporter)}}
\par
{\bkmkstart AAAAAAAAMF}
{\bkmkend AAAAAAAAMF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE\:doctest.h}
{\xe \v doctest.h\:REQUIRE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE(  {\i ...})\~ {\b DOCTEST_REQUIRE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMG}
{\bkmkend AAAAAAAAMG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_EQ\:doctest.h}
{\xe \v doctest.h\:REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_EQ(  {\i ...})\~ {\b DOCTEST_REQUIRE_EQ}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMH}
{\bkmkend AAAAAAAAMH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_FALSE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_FALSE(  {\i ...})\~ {\b DOCTEST_REQUIRE_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMI}
{\bkmkend AAAAAAAAMI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_FALSE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_REQUIRE_FALSE_MESSAGE}(cond, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMJ}
{\bkmkend AAAAAAAAMJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_GE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_GE(  {\i ...})\~ {\b DOCTEST_REQUIRE_GE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMK}
{\bkmkend AAAAAAAAMK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_GT\:doctest.h}
{\xe \v doctest.h\:REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_GT(  {\i ...})\~ {\b DOCTEST_REQUIRE_GT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAML}
{\bkmkend AAAAAAAAML}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_LE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_LE(  {\i ...})\~ {\b DOCTEST_REQUIRE_LE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMM}
{\bkmkend AAAAAAAAMM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_LT\:doctest.h}
{\xe \v doctest.h\:REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_LT(  {\i ...})\~ {\b DOCTEST_REQUIRE_LT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMN}
{\bkmkend AAAAAAAAMN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_REQUIRE_MESSAGE}(cond, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMO}
{\bkmkend AAAAAAAAMO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_NE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_NE(  {\i ...})\~ {\b DOCTEST_REQUIRE_NE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMP}
{\bkmkend AAAAAAAAMP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_NOTHROW\:doctest.h}
{\xe \v doctest.h\:REQUIRE_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_NOTHROW(  {\i ...})\~ {\b DOCTEST_REQUIRE_NOTHROW}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMQ}
{\bkmkend AAAAAAAAMQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_NOTHROW_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_NOTHROW_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_REQUIRE_NOTHROW_MESSAGE}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMR}
{\bkmkend AAAAAAAAMR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS(  {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMS}
{\bkmkend AAAAAAAAMS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_AS}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMT}
{\bkmkend AAAAAAAAMT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_AS_MESSAGE( expr,  ex,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_AS_MESSAGE}(expr, ex, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMU}
{\bkmkend AAAAAAAAMU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_MESSAGE}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMV}
{\bkmkend AAAAAAAAMV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_WITH}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMW}
{\bkmkend AAAAAAAAMW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_WITH_AS\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_WITH_AS( expr,  with,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_WITH_AS}(expr, with, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMX}
{\bkmkend AAAAAAAAMX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_WITH_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE}(expr, with, ex, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMY}
{\bkmkend AAAAAAAAMY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_WITH_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_WITH_MESSAGE( expr,  with,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_WITH_MESSAGE}(expr, with, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMZ}
{\bkmkend AAAAAAAAMZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_UNARY\:doctest.h}
{\xe \v doctest.h\:REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_UNARY(  {\i ...})\~ {\b DOCTEST_REQUIRE_UNARY}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANA}
{\bkmkend AAAAAAAANA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_REQUIRE_UNARY_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANB}
{\bkmkend AAAAAAAANB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SCENARIO\:doctest.h}
{\xe \v doctest.h\:SCENARIO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SCENARIO( name)\~ {\b DOCTEST_SCENARIO}(name)}}
\par
{\bkmkstart AAAAAAAANC}
{\bkmkend AAAAAAAANC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SCENARIO_CLASS\:doctest.h}
{\xe \v doctest.h\:SCENARIO_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SCENARIO_CLASS( name)\~ {\b DOCTEST_SCENARIO_CLASS}(name)}}
\par
{\bkmkstart AAAAAAAAND}
{\bkmkend AAAAAAAAND}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SCENARIO_TEMPLATE\:doctest.h}
{\xe \v doctest.h\:SCENARIO_TEMPLATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SCENARIO_TEMPLATE( name,  T,   {\i ...})\~ {\b DOCTEST_SCENARIO_TEMPLATE}(name, T, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANE}
{\bkmkend AAAAAAAANE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SCENARIO_TEMPLATE_DEFINE\:doctest.h}
{\xe \v doctest.h\:SCENARIO_TEMPLATE_DEFINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SCENARIO_TEMPLATE_DEFINE( name,  T,  id)\~ {\b DOCTEST_SCENARIO_TEMPLATE_DEFINE}(name, T, id)}}
\par
{\bkmkstart AAAAAAAANF}
{\bkmkend AAAAAAAANF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SFINAE_OP\:doctest.h}
{\xe \v doctest.h\:SFINAE_OP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SFINAE_OP( ret,  op)\~ decltype((void)({\b doctest::detail::declval}<L>() op {\b doctest::detail::declval}<R>()),ret\{\})}}
\par
{\bkmkstart AAAAAAAANG}
{\bkmkend AAAAAAAANG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SUBCASE\:doctest.h}
{\xe \v doctest.h\:SUBCASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SUBCASE( name)\~ {\b DOCTEST_SUBCASE}(name)}}
\par
{\bkmkstart AAAAAAAANH}
{\bkmkend AAAAAAAANH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE\:doctest.h}
{\xe \v doctest.h\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE( name)\~ {\b DOCTEST_TEST_CASE}(name)}}
\par
{\bkmkstart AAAAAAAANI}
{\bkmkend AAAAAAAANI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_CLASS\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_CLASS( name)\~ {\b DOCTEST_TEST_CASE_CLASS}(name)}}
\par
{\bkmkstart AAAAAAAANJ}
{\bkmkend AAAAAAAANJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_FIXTURE\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_FIXTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_FIXTURE( x,  name)\~ {\b DOCTEST_TEST_CASE_FIXTURE}(x, name)}}
\par
{\bkmkstart AAAAAAAANK}
{\bkmkend AAAAAAAANK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_TEMPLATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE( name,  T,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE}(name, T, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANL}
{\bkmkend AAAAAAAANL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE_APPLY\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_TEMPLATE_APPLY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE_APPLY( id,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE_APPLY}(id, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANM}
{\bkmkend AAAAAAAANM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE_DEFINE\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_TEMPLATE_DEFINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE_DEFINE( name,  T,  id)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}(name, T, id)}}
\par
{\bkmkstart AAAAAAAANN}
{\bkmkend AAAAAAAANN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE_INSTANTIATE\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_TEMPLATE_INSTANTIATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE_INSTANTIATE( id,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE}(id, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANO}
{\bkmkend AAAAAAAANO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE_INVOKE\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_TEMPLATE_INVOKE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE_INVOKE( id,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}(id, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANP}
{\bkmkend AAAAAAAANP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_SUITE\:doctest.h}
{\xe \v doctest.h\:TEST_SUITE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_SUITE( decorators)\~ {\b DOCTEST_TEST_SUITE}(decorators)}}
\par
{\bkmkstart AAAAAAAANQ}
{\bkmkend AAAAAAAANQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_SUITE_BEGIN\:doctest.h}
{\xe \v doctest.h\:TEST_SUITE_BEGIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_SUITE_BEGIN( name)\~ {\b DOCTEST_TEST_SUITE_BEGIN}(name)}}
\par
{\bkmkstart AAAAAAAANR}
{\bkmkend AAAAAAAANR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_SUITE_END\:doctest.h}
{\xe \v doctest.h\:TEST_SUITE_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_SUITE_END\~ {\b DOCTEST_TEST_SUITE_END}}}
\par
{\bkmkstart AAAAAAAANS}
{\bkmkend AAAAAAAANS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v THEN\:doctest.h}
{\xe \v doctest.h\:THEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define THEN( name)\~ {\b DOCTEST_THEN}(name)}}
\par
{\bkmkstart AAAAAAAANT}
{\bkmkend AAAAAAAANT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TO_LVALUE\:doctest.h}
{\xe \v doctest.h\:TO_LVALUE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TO_LVALUE(  {\i ...})\~ {\b DOCTEST_TO_LVALUE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANU}
{\bkmkend AAAAAAAANU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TYPE_TO_STRING\:doctest.h}
{\xe \v doctest.h\:TYPE_TO_STRING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TYPE_TO_STRING(  {\i ...})\~ {\b DOCTEST_TYPE_TO_STRING}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANV}
{\bkmkend AAAAAAAANV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TYPE_TO_STRING_AS\:doctest.h}
{\xe \v doctest.h\:TYPE_TO_STRING_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TYPE_TO_STRING_AS( str,   {\i ...})\~ {\b DOCTEST_TYPE_TO_STRING_AS}(str, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANW}
{\bkmkend AAAAAAAANW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN\:doctest.h}
{\xe \v doctest.h\:WARN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN(  {\i ...})\~ {\b DOCTEST_WARN}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANX}
{\bkmkend AAAAAAAANX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_EQ\:doctest.h}
{\xe \v doctest.h\:WARN_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_EQ(  {\i ...})\~ {\b DOCTEST_WARN_EQ}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANY}
{\bkmkend AAAAAAAANY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_FALSE\:doctest.h}
{\xe \v doctest.h\:WARN_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_FALSE(  {\i ...})\~ {\b DOCTEST_WARN_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANZ}
{\bkmkend AAAAAAAANZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_FALSE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_WARN_FALSE_MESSAGE}(cond, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOA}
{\bkmkend AAAAAAAAOA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_GE\:doctest.h}
{\xe \v doctest.h\:WARN_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_GE(  {\i ...})\~ {\b DOCTEST_WARN_GE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOB}
{\bkmkend AAAAAAAAOB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_GT\:doctest.h}
{\xe \v doctest.h\:WARN_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_GT(  {\i ...})\~ {\b DOCTEST_WARN_GT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOC}
{\bkmkend AAAAAAAAOC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_LE\:doctest.h}
{\xe \v doctest.h\:WARN_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_LE(  {\i ...})\~ {\b DOCTEST_WARN_LE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOD}
{\bkmkend AAAAAAAAOD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_LT\:doctest.h}
{\xe \v doctest.h\:WARN_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_LT(  {\i ...})\~ {\b DOCTEST_WARN_LT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOE}
{\bkmkend AAAAAAAAOE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_WARN_MESSAGE}(cond, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOF}
{\bkmkend AAAAAAAAOF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_NE\:doctest.h}
{\xe \v doctest.h\:WARN_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_NE(  {\i ...})\~ {\b DOCTEST_WARN_NE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOG}
{\bkmkend AAAAAAAAOG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_NOTHROW\:doctest.h}
{\xe \v doctest.h\:WARN_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_NOTHROW(  {\i ...})\~ {\b DOCTEST_WARN_NOTHROW}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOH}
{\bkmkend AAAAAAAAOH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_NOTHROW_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_NOTHROW_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_WARN_NOTHROW_MESSAGE}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOI}
{\bkmkend AAAAAAAAOI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS(  {\i ...})\~ {\b DOCTEST_WARN_THROWS}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOJ}
{\bkmkend AAAAAAAAOJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_AS}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOK}
{\bkmkend AAAAAAAAOK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_AS_MESSAGE( expr,  ex,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_AS_MESSAGE}(expr, ex, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOL}
{\bkmkend AAAAAAAAOL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_MESSAGE}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOM}
{\bkmkend AAAAAAAAOM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_WITH}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAON}
{\bkmkend AAAAAAAAON}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_WITH_AS\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_WITH_AS( expr,  with,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_WITH_AS}(expr, with, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOO}
{\bkmkend AAAAAAAAOO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_WITH_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_WITH_AS_MESSAGE}(expr, with, ex, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOP}
{\bkmkend AAAAAAAAOP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_WITH_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_WITH_MESSAGE( expr,  with,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_WITH_MESSAGE}(expr, with, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOQ}
{\bkmkend AAAAAAAAOQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_UNARY\:doctest.h}
{\xe \v doctest.h\:WARN_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_UNARY(  {\i ...})\~ {\b DOCTEST_WARN_UNARY}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOR}
{\bkmkend AAAAAAAAOR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:WARN_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_WARN_UNARY_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOS}
{\bkmkend AAAAAAAAOS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WHEN\:doctest.h}
{\xe \v doctest.h\:WHEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WHEN( name)\~ {\b DOCTEST_WHEN}(name)}}
\par
{\bkmkstart AAAAAAAAOT}
{\bkmkend AAAAAAAAOT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest.h\par \pard\plain 
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // ====================================================================== lgtm [cpp/missing-header-guard]}\par
2 {\cf20 // == DO NOT MODIFY THIS FILE BY HAND - IT IS AUTO GENERATED BY CMAKE! ==}\par
3 {\cf20 // ======================================================================}\par
4 {\cf20 //}\par
5 {\cf20 // doctest.h - the lightest feature-rich C++ single-header testing framework for unit tests and TDD}\par
6 {\cf20 //}\par
7 {\cf20 // Copyright (c) 2016-2023 Viktor Kirilov}\par
8 {\cf20 //}\par
9 {\cf20 // Distributed under the MIT Software License}\par
10 {\cf20 // See accompanying file LICENSE.txt or copy at}\par
11 {\cf20 // https://opensource.org/licenses/MIT}\par
12 {\cf20 //}\par
13 {\cf20 // The documentation can be found at the library's page:}\par
14 {\cf20 // https://github.com/doctest/doctest/blob/master/doc/markdown/readme.md}\par
15 {\cf20 //}\par
16 {\cf20 // =================================================================================================}\par
17 {\cf20 // =================================================================================================}\par
18 {\cf20 // =================================================================================================}\par
19 {\cf20 //}\par
20 {\cf20 // The library is heavily influenced by Catch - https://github.com/catchorg/Catch2}\par
21 {\cf20 // which uses the Boost Software License - Version 1.0}\par
22 {\cf20 // see here - https://github.com/catchorg/Catch2/blob/master/LICENSE.txt}\par
23 {\cf20 //}\par
24 {\cf20 // The concept of subcases (sections in Catch) and expression decomposition are from there.}\par
25 {\cf20 // Some parts of the code are taken directly:}\par
26 {\cf20 // - stringification - the detection of "ostream& operator<<(ostream&, const T&)" and StringMaker<>}\par
27 {\cf20 // - the Approx() helper class for floating point comparison}\par
28 {\cf20 // - colors in the console}\par
29 {\cf20 // - breaking into a debugger}\par
30 {\cf20 // - signal / SEH handling}\par
31 {\cf20 // - timer}\par
32 {\cf20 // - XmlWriter class - thanks to Phil Nash for allowing the direct reuse (AKA copy/paste)}\par
33 {\cf20 //}\par
34 {\cf20 // The expression decomposing templates are taken from lest - https://github.com/martinmoene/lest}\par
35 {\cf20 // which uses the Boost Software License - Version 1.0}\par
36 {\cf20 // see here - https://github.com/martinmoene/lest/blob/master/LICENSE.txt}\par
37 {\cf20 //}\par
38 {\cf20 // =================================================================================================}\par
39 {\cf20 // =================================================================================================}\par
40 {\cf20 // =================================================================================================}\par
41 \par
42 {\cf21 #ifndef DOCTEST_LIBRARY_INCLUDED}\par
43 {\cf21 #define DOCTEST_LIBRARY_INCLUDED}\par
44 \par
45 {\cf20 // =================================================================================================}\par
46 {\cf20 // == VERSION ======================================================================================}\par
47 {\cf20 // =================================================================================================}\par
48 \par
49 {\cf21 #define DOCTEST_VERSION_MAJOR 2}\par
50 {\cf21 #define DOCTEST_VERSION_MINOR 4}\par
51 {\cf21 #define DOCTEST_VERSION_PATCH 11}\par
52 \par
53 {\cf20 // util we need here}\par
54 {\cf21 #define DOCTEST_TOSTR_IMPL(x) #x}\par
55 {\cf21 #define DOCTEST_TOSTR(x) DOCTEST_TOSTR_IMPL(x)}\par
56 \par
57 {\cf21 #define DOCTEST_VERSION_STR                                                                        \\}\par
58 {\cf21     DOCTEST_TOSTR(DOCTEST_VERSION_MAJOR) "."                                                       \\}\par
59 {\cf21     DOCTEST_TOSTR(DOCTEST_VERSION_MINOR) "."                                                       \\}\par
60 {\cf21     DOCTEST_TOSTR(DOCTEST_VERSION_PATCH)}\par
61 \par
62 {\cf21 #define DOCTEST_VERSION                                                                            \\}\par
63 {\cf21     (DOCTEST_VERSION_MAJOR * 10000 + DOCTEST_VERSION_MINOR * 100 + DOCTEST_VERSION_PATCH)}\par
64 \par
65 {\cf20 // =================================================================================================}\par
66 {\cf20 // == COMPILER VERSION =============================================================================}\par
67 {\cf20 // =================================================================================================}\par
68 \par
69 {\cf20 // ideas for the version stuff are taken from here: https://github.com/cxxstuff/cxx_detect}\par
70 \par
71 {\cf21 #ifdef _MSC_VER}\par
72 {\cf21 #define DOCTEST_CPLUSPLUS _MSVC_LANG}\par
73 {\cf21 #else}\par
74 {\cf21 #define DOCTEST_CPLUSPLUS __cplusplus}\par
75 {\cf21 #endif}\par
76 \par
77 {\cf21 #define DOCTEST_COMPILER(MAJOR, MINOR, PATCH) ((MAJOR)*10000000 + (MINOR)*100000 + (PATCH))}\par
78 \par
79 {\cf20 // GCC/Clang and GCC/MSVC are mutually exclusive, but Clang/MSVC are not because of clang-cl...}\par
80 {\cf21 #if defined(_MSC_VER) && defined(_MSC_FULL_VER)}\par
81 {\cf21 #if _MSC_VER == _MSC_FULL_VER / 10000}\par
82 {\cf21 #define DOCTEST_MSVC DOCTEST_COMPILER(_MSC_VER / 100, _MSC_VER % 100, _MSC_FULL_VER % 10000)}\par
83 {\cf21 #else }{\cf20 // MSVC}\par
84 {\cf21 #define DOCTEST_MSVC                                                                               \\}\par
85 {\cf21     DOCTEST_COMPILER(_MSC_VER / 100, (_MSC_FULL_VER / 100000) % 100, _MSC_FULL_VER % 100000)}\par
86 {\cf21 #endif }{\cf20 // MSVC}\par
87 {\cf21 #endif }{\cf20 // MSVC}\par
88 {\cf21 #if defined(__clang__) && defined(__clang_minor__) && defined(__clang_patchlevel__)}\par
89 {\cf21 #define DOCTEST_CLANG DOCTEST_COMPILER(__clang_major__, __clang_minor__, __clang_patchlevel__)}\par
90 {\cf21 #elif defined(__GNUC__) && defined(__GNUC_MINOR__) && defined(__GNUC_PATCHLEVEL__) &&              \\}\par
91 {\cf21         !defined(__INTEL_COMPILER)}\par
92 {\cf21 #define DOCTEST_GCC DOCTEST_COMPILER(__GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__)}\par
93 {\cf21 #endif }{\cf20 // GCC}\par
94 {\cf21 #if defined(__INTEL_COMPILER)}\par
95 {\cf21 #define DOCTEST_ICC DOCTEST_COMPILER(__INTEL_COMPILER / 100, __INTEL_COMPILER % 100, 0)}\par
96 {\cf21 #endif }{\cf20 // ICC}\par
97 \par
98 {\cf21 #ifndef DOCTEST_MSVC}\par
99 {\cf21 #define DOCTEST_MSVC 0}\par
100 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
101 {\cf21 #ifndef DOCTEST_CLANG}\par
102 {\cf21 #define DOCTEST_CLANG 0}\par
103 {\cf21 #endif }{\cf20 // DOCTEST_CLANG}\par
104 {\cf21 #ifndef DOCTEST_GCC}\par
105 {\cf21 #define DOCTEST_GCC 0}\par
106 {\cf21 #endif }{\cf20 // DOCTEST_GCC}\par
107 {\cf21 #ifndef DOCTEST_ICC}\par
108 {\cf21 #define DOCTEST_ICC 0}\par
109 {\cf21 #endif }{\cf20 // DOCTEST_ICC}\par
110 \par
111 {\cf20 // =================================================================================================}\par
112 {\cf20 // == COMPILER WARNINGS HELPERS ====================================================================}\par
113 {\cf20 // =================================================================================================}\par
114 \par
115 {\cf21 #if DOCTEST_CLANG && !DOCTEST_ICC}\par
116 {\cf21 #define DOCTEST_PRAGMA_TO_STR(x) _Pragma(#x)}\par
117 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_PUSH _Pragma("clang diagnostic push")}\par
118 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING(w) DOCTEST_PRAGMA_TO_STR(clang diagnostic ignored w)}\par
119 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_POP _Pragma("clang diagnostic pop")}\par
120 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(w)                                                \\}\par
121 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_PUSH DOCTEST_CLANG_SUPPRESS_WARNING(w)}\par
122 {\cf21 #else }{\cf20 // DOCTEST_CLANG}\par
123 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_PUSH}\par
124 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING(w)}\par
125 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
126 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(w)}\par
127 {\cf21 #endif }{\cf20 // DOCTEST_CLANG}\par
128 \par
129 {\cf21 #if DOCTEST_GCC}\par
130 {\cf21 #define DOCTEST_PRAGMA_TO_STR(x) _Pragma(#x)}\par
131 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_PUSH _Pragma("GCC diagnostic push")}\par
132 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING(w) DOCTEST_PRAGMA_TO_STR(GCC diagnostic ignored w)}\par
133 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_POP _Pragma("GCC diagnostic pop")}\par
134 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(w)                                                  \\}\par
135 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING_PUSH DOCTEST_GCC_SUPPRESS_WARNING(w)}\par
136 {\cf21 #else }{\cf20 // DOCTEST_GCC}\par
137 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_PUSH}\par
138 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING(w)}\par
139 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_POP}\par
140 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(w)}\par
141 {\cf21 #endif }{\cf20 // DOCTEST_GCC}\par
142 \par
143 {\cf21 #if DOCTEST_MSVC}\par
144 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_PUSH __pragma(warning(push))}\par
145 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING(w) __pragma(warning(disable : w))}\par
146 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_POP __pragma(warning(pop))}\par
147 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(w)                                                 \\}\par
148 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH DOCTEST_MSVC_SUPPRESS_WARNING(w)}\par
149 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
150 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_PUSH}\par
151 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING(w)}\par
152 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
153 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(w)}\par
154 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
155 \par
156 {\cf20 // =================================================================================================}\par
157 {\cf20 // == COMPILER WARNINGS ============================================================================}\par
158 {\cf20 // =================================================================================================}\par
159 \par
160 {\cf20 // both the header and the implementation suppress all of these,}\par
161 {\cf20 // so it only makes sense to aggregate them like so}\par
162 {\cf21 #define DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH                                                      \\}\par
163 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_PUSH                                                            \\}\par
164 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING("-Wunknown-pragmas")                                            \\}\par
165 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING("-Wweak-vtables")                                               \\}\par
166 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING("-Wpadded")                                                     \\}\par
167 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-prototypes")                                         \\}\par
168 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING("-Wc++98-compat")                                               \\}\par
169 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING("-Wc++98-compat-pedantic")                                      \\}\par
170 {\cf21                                                                                                    \\}\par
171 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING_PUSH                                                              \\}\par
172 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wunknown-pragmas")                                              \\}\par
173 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wpragmas")                                                      \\}\par
174 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Weffc++")                                                       \\}\par
175 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wstrict-overflow")                                              \\}\par
176 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wstrict-aliasing")                                              \\}\par
177 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wmissing-declarations")                                         \\}\par
178 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wuseless-cast")                                                 \\}\par
179 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wnoexcept")                                                     \\}\par
180 {\cf21                                                                                                    \\}\par
181 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH                                                             \\}\par
182 {\cf21     }{\cf20 /* these 4 also disabled globally via cmake: */}{\cf21                                                 \\}\par
183 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4514) }{\cf20 /* unreferenced inline function has been removed */}{\cf21         \\}\par
184 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4571) }{\cf20 /* SEH related */}{\cf21                                           \\}\par
185 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4710) }{\cf20 /* function not inlined */}{\cf21                                  \\}\par
186 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4711) }{\cf20 /* function selected for inline expansion*/}{\cf21                 \\}\par
187 {\cf21     }{\cf20 /* common ones */}{\cf21                                                                               \\}\par
188 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4616) }{\cf20 /* invalid compiler warning */}{\cf21                              \\}\par
189 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4619) }{\cf20 /* invalid compiler warning */}{\cf21                              \\}\par
190 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4996) }{\cf20 /* The compiler encountered a deprecated declaration */}{\cf21     \\}\par
191 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4706) }{\cf20 /* assignment within conditional expression */}{\cf21              \\}\par
192 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4512) }{\cf20 /* 'class' : assignment operator could not be generated */}{\cf21  \\}\par
193 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4127) }{\cf20 /* conditional expression is constant */}{\cf21                    \\}\par
194 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4820) }{\cf20 /* padding */}{\cf21                                               \\}\par
195 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4625) }{\cf20 /* copy constructor was implicitly deleted */}{\cf21               \\}\par
196 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4626) }{\cf20 /* assignment operator was implicitly deleted */}{\cf21            \\}\par
197 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5027) }{\cf20 /* move assignment operator implicitly deleted */}{\cf21           \\}\par
198 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5026) }{\cf20 /* move constructor was implicitly deleted */}{\cf21               \\}\par
199 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4640) }{\cf20 /* construction of local static object not thread-safe */}{\cf21   \\}\par
200 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5045) }{\cf20 /* Spectre mitigation for memory load */}{\cf21                    \\}\par
201 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5264) }{\cf20 /* 'variable-name': 'const' variable is not used */}{\cf21         \\}\par
202 {\cf21     }{\cf20 /* static analysis */}{\cf21                                                                           \\}\par
203 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(26439) }{\cf20 /* Function may not throw. Declare it 'noexcept' */}{\cf21        \\}\par
204 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(26495) }{\cf20 /* Always initialize a member variable */}{\cf21                  \\}\par
205 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(26451) }{\cf20 /* Arithmetic overflow ... */}{\cf21                              \\}\par
206 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(26444) }{\cf20 /* Avoid unnamed objects with custom ctor and dtor... */}{\cf21   \\}\par
207 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(26812) }{\cf20 /* Prefer 'enum class' over 'enum' */}{\cf21 }\par
208 \par
209 {\cf21 #define DOCTEST_SUPPRESS_COMMON_WARNINGS_POP                                                       \\}\par
210 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                             \\}\par
211 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING_POP                                                               \\}\par
212 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
213 \par
214 DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH\par
215 \par
216 DOCTEST_CLANG_SUPPRESS_WARNING_PUSH\par
217 DOCTEST_CLANG_SUPPRESS_WARNING({\cf22 "-Wnon-virtual-dtor"})\par
218 DOCTEST_CLANG_SUPPRESS_WARNING("-Wdeprecated")\par
219 \par
220 DOCTEST_GCC_SUPPRESS_WARNING_PUSH\par
221 DOCTEST_GCC_SUPPRESS_WARNING("-Wctor-dtor-privacy")\par
222 DOCTEST_GCC_SUPPRESS_WARNING("-Wnon-virtual-dtor")\par
223 DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-promo")\par
224 \par
225 DOCTEST_MSVC_SUPPRESS_WARNING_PUSH\par
226 DOCTEST_MSVC_SUPPRESS_WARNING(4623) {\cf20 // default constructor was implicitly defined as deleted}\par
227 \par
228 {\cf21 #define DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN                                 \\}\par
229 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH                                                             \\}\par
230 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4548) }{\cf20 /* before comma no effect; expected side - effect */}{\cf21        \\}\par
231 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4265) }{\cf20 /* virtual functions, but destructor is not virtual */}{\cf21      \\}\par
232 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4986) }{\cf20 /* exception specification does not match previous */}{\cf21       \\}\par
233 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4350) }{\cf20 /* 'member1' called instead of 'member2' */}{\cf21                 \\}\par
234 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4668) }{\cf20 /* not defined as a preprocessor macro */}{\cf21                   \\}\par
235 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4365) }{\cf20 /* signed/unsigned mismatch */}{\cf21                              \\}\par
236 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4774) }{\cf20 /* format string not a string literal */}{\cf21                    \\}\par
237 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4820) }{\cf20 /* padding */}{\cf21                                               \\}\par
238 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4625) }{\cf20 /* copy constructor was implicitly deleted */}{\cf21               \\}\par
239 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4626) }{\cf20 /* assignment operator was implicitly deleted */}{\cf21            \\}\par
240 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5027) }{\cf20 /* move assignment operator implicitly deleted */}{\cf21           \\}\par
241 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5026) }{\cf20 /* move constructor was implicitly deleted */}{\cf21               \\}\par
242 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4623) }{\cf20 /* default constructor was implicitly deleted */}{\cf21            \\}\par
243 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5039) }{\cf20 /* pointer to pot. throwing function passed to extern C */}{\cf21  \\}\par
244 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5045) }{\cf20 /* Spectre mitigation for memory load */}{\cf21                    \\}\par
245 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5105) }{\cf20 /* macro producing 'defined' has undefined behavior */}{\cf21      \\}\par
246 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4738) }{\cf20 /* storing float result in memory, loss of performance */}{\cf21   \\}\par
247 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5262) }{\cf20 /* implicit fall-through */}{\cf21 }\par
248 \par
249 {\cf21 #define DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
250 \par
251 {\cf20 // =================================================================================================}\par
252 {\cf20 // == FEATURE DETECTION ============================================================================}\par
253 {\cf20 // =================================================================================================}\par
254 \par
255 {\cf20 // general compiler feature support table: https://en.cppreference.com/w/cpp/compiler_support}\par
256 {\cf20 // MSVC C++11 feature support table: https://msdn.microsoft.com/en-us/library/hh567368.aspx}\par
257 {\cf20 // GCC C++11 feature support table: https://gcc.gnu.org/projects/cxx-status.html}\par
258 {\cf20 // MSVC version table:}\par
259 {\cf20 // https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B#Internal_version_numbering}\par
260 {\cf20 // MSVC++ 14.3 (17) _MSC_VER == 1930 (Visual Studio 2022)}\par
261 {\cf20 // MSVC++ 14.2 (16) _MSC_VER == 1920 (Visual Studio 2019)}\par
262 {\cf20 // MSVC++ 14.1 (15) _MSC_VER == 1910 (Visual Studio 2017)}\par
263 {\cf20 // MSVC++ 14.0      _MSC_VER == 1900 (Visual Studio 2015)}\par
264 {\cf20 // MSVC++ 12.0      _MSC_VER == 1800 (Visual Studio 2013)}\par
265 {\cf20 // MSVC++ 11.0      _MSC_VER == 1700 (Visual Studio 2012)}\par
266 {\cf20 // MSVC++ 10.0      _MSC_VER == 1600 (Visual Studio 2010)}\par
267 {\cf20 // MSVC++ 9.0       _MSC_VER == 1500 (Visual Studio 2008)}\par
268 {\cf20 // MSVC++ 8.0       _MSC_VER == 1400 (Visual Studio 2005)}\par
269 \par
270 {\cf20 // Universal Windows Platform support}\par
271 {\cf21 #if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)}\par
272 {\cf21 #define DOCTEST_CONFIG_NO_WINDOWS_SEH}\par
273 {\cf21 #endif }{\cf20 // WINAPI_FAMILY}\par
274 {\cf21 #if DOCTEST_MSVC && !defined(DOCTEST_CONFIG_WINDOWS_SEH)}\par
275 {\cf21 #define DOCTEST_CONFIG_WINDOWS_SEH}\par
276 {\cf21 #endif }{\cf20 // MSVC}\par
277 {\cf21 #if defined(DOCTEST_CONFIG_NO_WINDOWS_SEH) && defined(DOCTEST_CONFIG_WINDOWS_SEH)}\par
278 {\cf21 #undef DOCTEST_CONFIG_WINDOWS_SEH}\par
279 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_WINDOWS_SEH}\par
280 \par
281 {\cf21 #if !defined(_WIN32) && !defined(__QNX__) && !defined(DOCTEST_CONFIG_POSIX_SIGNALS) &&             \\}\par
282 {\cf21         !defined(__EMSCRIPTEN__) && !defined(__wasi__)}\par
283 {\cf21 #define DOCTEST_CONFIG_POSIX_SIGNALS}\par
284 {\cf21 #endif }{\cf20 // _WIN32}\par
285 {\cf21 #if defined(DOCTEST_CONFIG_NO_POSIX_SIGNALS) && defined(DOCTEST_CONFIG_POSIX_SIGNALS)}\par
286 {\cf21 #undef DOCTEST_CONFIG_POSIX_SIGNALS}\par
287 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_POSIX_SIGNALS}\par
288 \par
289 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
290 {\cf21 #if !defined(__cpp_exceptions) && !defined(__EXCEPTIONS) && !defined(_CPPUNWIND)                   \\}\par
291 {\cf21         || defined(__wasi__)}\par
292 {\cf21 #define DOCTEST_CONFIG_NO_EXCEPTIONS}\par
293 {\cf21 #endif }{\cf20 // no exceptions}\par
294 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
295 \par
296 {\cf21 #ifdef DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
297 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
298 {\cf21 #define DOCTEST_CONFIG_NO_EXCEPTIONS}\par
299 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
300 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
301 \par
302 {\cf21 #if defined(DOCTEST_CONFIG_NO_EXCEPTIONS) && !defined(DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS)}\par
303 {\cf21 #define DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
304 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS && !DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
305 \par
306 {\cf21 #ifdef __wasi__}\par
307 {\cf21 #define DOCTEST_CONFIG_NO_MULTITHREADING}\par
308 {\cf21 #endif}\par
309 \par
310 {\cf21 #if defined(DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN) && !defined(DOCTEST_CONFIG_IMPLEMENT)}\par
311 {\cf21 #define DOCTEST_CONFIG_IMPLEMENT}\par
312 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
313 \par
314 {\cf21 #if defined(_WIN32) || defined(__CYGWIN__)}\par
315 {\cf21 #if DOCTEST_MSVC}\par
316 {\cf21 #define DOCTEST_SYMBOL_EXPORT __declspec(dllexport)}\par
317 {\cf21 #define DOCTEST_SYMBOL_IMPORT __declspec(dllimport)}\par
318 {\cf21 #else }{\cf20 // MSVC}\par
319 {\cf21 #define DOCTEST_SYMBOL_EXPORT __attribute__((dllexport))}\par
320 {\cf21 #define DOCTEST_SYMBOL_IMPORT __attribute__((dllimport))}\par
321 {\cf21 #endif }{\cf20 // MSVC}\par
322 {\cf21 #else  }{\cf20 // _WIN32}\par
323 {\cf21 #define DOCTEST_SYMBOL_EXPORT __attribute__((visibility("default")))}\par
324 {\cf21 #define DOCTEST_SYMBOL_IMPORT}\par
325 {\cf21 #endif }{\cf20 // _WIN32}\par
326 \par
327 {\cf21 #ifdef DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL}\par
328 {\cf21 #ifdef DOCTEST_CONFIG_IMPLEMENT}\par
329 {\cf21 #define DOCTEST_INTERFACE DOCTEST_SYMBOL_EXPORT}\par
330 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_IMPLEMENT}\par
331 {\cf21 #define DOCTEST_INTERFACE DOCTEST_SYMBOL_IMPORT}\par
332 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENT}\par
333 {\cf21 #else  }{\cf20 // DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL}\par
334 {\cf21 #define DOCTEST_INTERFACE}\par
335 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL}\par
336 \par
337 {\cf20 // needed for extern template instantiations}\par
338 {\cf20 // see https://github.com/fmtlib/fmt/issues/2228}\par
339 {\cf21 #if DOCTEST_MSVC}\par
340 {\cf21 #define DOCTEST_INTERFACE_DECL}\par
341 {\cf21 #define DOCTEST_INTERFACE_DEF DOCTEST_INTERFACE}\par
342 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
343 {\cf21 #define DOCTEST_INTERFACE_DECL DOCTEST_INTERFACE}\par
344 {\cf21 #define DOCTEST_INTERFACE_DEF}\par
345 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
346 \par
347 {\cf21 #define DOCTEST_EMPTY}\par
348 \par
349 {\cf21 #if DOCTEST_MSVC}\par
350 {\cf21 #define DOCTEST_NOINLINE __declspec(noinline)}\par
351 {\cf21 #define DOCTEST_UNUSED}\par
352 {\cf21 #define DOCTEST_ALIGNMENT(x)}\par
353 {\cf21 #elif DOCTEST_CLANG && DOCTEST_CLANG < DOCTEST_COMPILER(3, 5, 0)}\par
354 {\cf21 #define DOCTEST_NOINLINE}\par
355 {\cf21 #define DOCTEST_UNUSED}\par
356 {\cf21 #define DOCTEST_ALIGNMENT(x)}\par
357 {\cf21 #else}\par
358 {\cf21 #define DOCTEST_NOINLINE __attribute__((noinline))}\par
359 {\cf21 #define DOCTEST_UNUSED __attribute__((unused))}\par
360 {\cf21 #define DOCTEST_ALIGNMENT(x) __attribute__((aligned(x)))}\par
361 {\cf21 #endif}\par
362 \par
363 {\cf21 #ifdef DOCTEST_CONFIG_NO_CONTRADICTING_INLINE}\par
364 {\cf21 #define DOCTEST_INLINE_NOINLINE inline}\par
365 {\cf21 #else}\par
366 {\cf21 #define DOCTEST_INLINE_NOINLINE inline DOCTEST_NOINLINE}\par
367 {\cf21 #endif}\par
368 \par
369 {\cf21 #ifndef DOCTEST_NORETURN}\par
370 {\cf21 #if DOCTEST_MSVC && (DOCTEST_MSVC < DOCTEST_COMPILER(19, 0, 0))}\par
371 {\cf21 #define DOCTEST_NORETURN}\par
372 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
373 {\cf21 #define DOCTEST_NORETURN [[noreturn]]}\par
374 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
375 {\cf21 #endif }{\cf20 // DOCTEST_NORETURN}\par
376 \par
377 {\cf21 #ifndef DOCTEST_NOEXCEPT}\par
378 {\cf21 #if DOCTEST_MSVC && (DOCTEST_MSVC < DOCTEST_COMPILER(19, 0, 0))}\par
379 {\cf21 #define DOCTEST_NOEXCEPT}\par
380 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
381 {\cf21 #define DOCTEST_NOEXCEPT noexcept}\par
382 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
383 {\cf21 #endif }{\cf20 // DOCTEST_NOEXCEPT}\par
384 \par
385 {\cf21 #ifndef DOCTEST_CONSTEXPR}\par
386 {\cf21 #if DOCTEST_MSVC && (DOCTEST_MSVC < DOCTEST_COMPILER(19, 0, 0))}\par
387 {\cf21 #define DOCTEST_CONSTEXPR const}\par
388 {\cf21 #define DOCTEST_CONSTEXPR_FUNC inline}\par
389 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
390 {\cf21 #define DOCTEST_CONSTEXPR constexpr}\par
391 {\cf21 #define DOCTEST_CONSTEXPR_FUNC constexpr}\par
392 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
393 {\cf21 #endif }{\cf20 // DOCTEST_CONSTEXPR}\par
394 \par
395 {\cf21 #ifndef DOCTEST_NO_SANITIZE_INTEGER}\par
396 {\cf21 #if DOCTEST_CLANG >= DOCTEST_COMPILER(3, 7, 0)}\par
397 {\cf21 #define DOCTEST_NO_SANITIZE_INTEGER __attribute__((no_sanitize("integer")))}\par
398 {\cf21 #else}\par
399 {\cf21 #define DOCTEST_NO_SANITIZE_INTEGER}\par
400 {\cf21 #endif}\par
401 {\cf21 #endif }{\cf20 // DOCTEST_NO_SANITIZE_INTEGER}\par
402 \par
403 {\cf20 // =================================================================================================}\par
404 {\cf20 // == FEATURE DETECTION END ========================================================================}\par
405 {\cf20 // =================================================================================================}\par
406 \par
407 {\cf21 #define DOCTEST_DECLARE_INTERFACE(name)                                                            \\}\par
408 {\cf21     virtual ~name();                                                                               \\}\par
409 {\cf21     name() = default;                                                                              \\}\par
410 {\cf21     name(const name&) = delete;                                                                    \\}\par
411 {\cf21     name(name&&) = delete;                                                                         \\}\par
412 {\cf21     name& operator=(const name&) = delete;                                                         \\}\par
413 {\cf21     name& operator=(name&&) = delete;}\par
414 \par
415 {\cf21 #define DOCTEST_DEFINE_INTERFACE(name)                                                             \\}\par
416 {\cf21     name::~name() = default;}\par
417 \par
418 {\cf20 // internal macros for string concatenation and anonymous variable name generation}\par
419 {\cf21 #define DOCTEST_CAT_IMPL(s1, s2) s1##s2}\par
420 {\cf21 #define DOCTEST_CAT(s1, s2) DOCTEST_CAT_IMPL(s1, s2)}\par
421 {\cf21 #ifdef __COUNTER__ }{\cf20 // not standard and may be missing for some compilers}\par
422 {\cf21 #define DOCTEST_ANONYMOUS(x) DOCTEST_CAT(x, __COUNTER__)}\par
423 {\cf21 #else }{\cf20 // __COUNTER__}\par
424 {\cf21 #define DOCTEST_ANONYMOUS(x) DOCTEST_CAT(x, __LINE__)}\par
425 {\cf21 #endif }{\cf20 // __COUNTER__}\par
426 \par
427 {\cf21 #ifndef DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE}\par
428 {\cf21 #define DOCTEST_REF_WRAP(x) x&}\par
429 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE}\par
430 {\cf21 #define DOCTEST_REF_WRAP(x) x}\par
431 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE}\par
432 \par
433 {\cf20 // not using __APPLE__ because... this is how Catch does it}\par
434 {\cf21 #ifdef __MAC_OS_X_VERSION_MIN_REQUIRED}\par
435 {\cf21 #define DOCTEST_PLATFORM_MAC}\par
436 {\cf21 #elif defined(__IPHONE_OS_VERSION_MIN_REQUIRED)}\par
437 {\cf21 #define DOCTEST_PLATFORM_IPHONE}\par
438 {\cf21 #elif defined(_WIN32)}\par
439 {\cf21 #define DOCTEST_PLATFORM_WINDOWS}\par
440 {\cf21 #elif defined(__wasi__)}\par
441 {\cf21 #define DOCTEST_PLATFORM_WASI}\par
442 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM}\par
443 {\cf21 #define DOCTEST_PLATFORM_LINUX}\par
444 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM}\par
445 \par
446 {\cf17 namespace }doctest \{ {\cf17 namespace }detail \{\par
447     {\cf17 static} DOCTEST_CONSTEXPR {\cf18 int} consume({\cf17 const} {\cf18 int}*, {\cf18 int}) {\cf17 noexcept} \{ {\cf19 return} 0; \}\par
448 \}\}\par
449 \par
450 {\cf21 #define DOCTEST_GLOBAL_NO_WARNINGS(var, ...)                                                         \\}\par
451 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wglobal-constructors")                                \\}\par
452 {\cf21     static const int var = doctest::detail::consume(&var, __VA_ARGS__);                              \\}\par
453 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
454 \par
455 {\cf21 #ifndef DOCTEST_BREAK_INTO_DEBUGGER}\par
456 {\cf20 // should probably take a look at https://github.com/scottt/debugbreak}\par
457 {\cf21 #ifdef DOCTEST_PLATFORM_LINUX}\par
458 {\cf21 #if defined(__GNUC__) && (defined(__i386) || defined(__x86_64))}\par
459 {\cf20 // Break at the location of the failing check if possible}\par
460 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() __asm__("int $3\\n" : :) }{\cf20 // NOLINT(hicpp-no-assembler)}\par
461 {\cf21 #else}\par
462 {\cf21 #include <signal.h>}\par
463 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() raise(SIGTRAP)}\par
464 {\cf21 #endif}\par
465 {\cf21 #elif defined(DOCTEST_PLATFORM_MAC)}\par
466 {\cf21 #if defined(__x86_64) || defined(__x86_64__) || defined(__amd64__) || defined(__i386)}\par
467 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() __asm__("int $3\\n" : :) }{\cf20 // NOLINT(hicpp-no-assembler)}\par
468 {\cf21 #elif defined(__ppc__) || defined(__ppc64__)}\par
469 {\cf20 // https://www.cocoawithlove.com/2008/03/break-into-debugger.html}\par
470 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() __asm__("li r0, 20\\nsc\\nnop\\nli r0, 37\\nli r4, 2\\nsc\\nnop\\n": : : "memory","r0","r3","r4") }{\cf20 // NOLINT(hicpp-no-assembler)}\par
471 {\cf21 #else}\par
472 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() __asm__("brk #0"); }{\cf20 // NOLINT(hicpp-no-assembler)}\par
473 {\cf21 #endif}\par
474 {\cf21 #elif DOCTEST_MSVC}\par
475 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() __debugbreak()}\par
476 {\cf21 #elif defined(__MINGW32__)}\par
477 DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wredundant-decls"})\par
478 extern "C" __declspec(dllimport) {\cf18 void} __stdcall DebugBreak();\par
479 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
480 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() ::DebugBreak()}\par
481 {\cf21 #else }{\cf20 // linux}\par
482 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() (static_cast<void>(0))}\par
483 {\cf21 #endif }{\cf20 // linux}\par
484 {\cf21 #endif }{\cf20 // DOCTEST_BREAK_INTO_DEBUGGER}\par
485 \par
486 {\cf20 // this is kept here for backwards compatibility since the config option was changed}\par
487 {\cf21 #ifdef DOCTEST_CONFIG_USE_IOSFWD}\par
488 {\cf21 #ifndef DOCTEST_CONFIG_USE_STD_HEADERS}\par
489 {\cf21 #define DOCTEST_CONFIG_USE_STD_HEADERS}\par
490 {\cf21 #endif}\par
491 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_USE_IOSFWD}\par
492 \par
493 {\cf20 // for clang - always include ciso646 (which drags some std stuff) because}\par
494 {\cf20 // we want to check if we are using libc++ with the _LIBCPP_VERSION macro in}\par
495 {\cf20 // which case we don't want to forward declare stuff from std - for reference:}\par
496 {\cf20 // https://github.com/doctest/doctest/issues/126}\par
497 {\cf20 // https://github.com/doctest/doctest/issues/356}\par
498 {\cf21 #if DOCTEST_CLANG}\par
499 {\cf21 #include <ciso646>}\par
500 {\cf21 #endif }{\cf20 // clang}\par
501 \par
502 {\cf21 #ifdef _LIBCPP_VERSION}\par
503 {\cf21 #ifndef DOCTEST_CONFIG_USE_STD_HEADERS}\par
504 {\cf21 #define DOCTEST_CONFIG_USE_STD_HEADERS}\par
505 {\cf21 #endif}\par
506 {\cf21 #endif }{\cf20 // _LIBCPP_VERSION}\par
507 \par
508 {\cf21 #ifdef DOCTEST_CONFIG_USE_STD_HEADERS}\par
509 {\cf21 #ifndef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
510 {\cf21 #define DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
511 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
512 DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN\par
513 {\cf21 #include <cstddef>}\par
514 {\cf21 #include <ostream>}\par
515 {\cf21 #include <istream>}\par
516 DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END\par
517 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_USE_STD_HEADERS}\par
518 \par
519 {\cf20 // Forward declaring 'X' in namespace std is not permitted by the C++ Standard.}\par
520 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4643)\par
521 \par
522 namespace std \{ {\cf20 // NOLINT(cert-dcl58-cpp)}\par
523 {\cf17 typedef} {\cf17 decltype}({\cf17 nullptr}) nullptr_t; {\cf20 // NOLINT(modernize-use-using)}\par
524 {\cf17 typedef} {\cf17 decltype}({\cf17 sizeof}({\cf18 void}*)) size_t; {\cf20 // NOLINT(modernize-use-using)}\par
525 {\cf17 template} <{\cf17 class} {\cf18 char}T>\par
526 {\cf17 struct }char_traits;\par
527 {\cf17 template} <>\par
528 {\cf17 struct }char_traits<char>;\par
529 {\cf17 template} <{\cf17 class} {\cf18 char}T, {\cf17 class} traits>\par
530 {\cf17 class }basic_ostream; {\cf20 // NOLINT(fuchsia-virtual-inheritance)}\par
531 {\cf17 typedef} basic_ostream<char, char_traits<char>> ostream; {\cf20 // NOLINT(modernize-use-using)}\par
532 {\cf17 template}<{\cf17 class} traits>\par
533 {\cf20 // NOLINTNEXTLINE}\par
534 basic_ostream<char, traits>& operator<<(basic_ostream<char, traits>&, {\cf17 const} {\cf18 char}*);\par
535 {\cf17 template} <{\cf17 class} {\cf18 char}T, {\cf17 class} traits>\par
536 {\cf17 class }basic_istream;\par
537 {\cf17 typedef} basic_istream<char, char_traits<char>> istream; {\cf20 // NOLINT(modernize-use-using)}\par
538 {\cf17 template} <{\cf17 class}... Types>\par
539 {\cf17 class }tuple;\par
540 {\cf21 #if DOCTEST_MSVC >= DOCTEST_COMPILER(19, 20, 0)}\par
541 {\cf20 // see this issue on why this is needed: https://github.com/doctest/doctest/issues/183}\par
542 {\cf17 template} <{\cf17 class} Ty>\par
543 {\cf17 class }allocator;\par
544 {\cf17 template} <{\cf17 class} Elem, {\cf17 class} Traits, {\cf17 class} Alloc>\par
545 {\cf17 class }basic_string;\par
546 {\cf17 using }string = basic_string<char, char_traits<char>, allocator<char>>;\par
547 {\cf21 #endif }{\cf20 // VS 2019}\par
548 \} {\cf20 // namespace std}\par
549 \par
550 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
551 \par
552 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_USE_STD_HEADERS}\par
553 \par
554 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
555 {\cf21 #include <type_traits>}\par
556 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
557 \par
558 {\cf17 namespace }doctest \{\par
559 \par
560 {\cf17 using }std::size_t;\par
561 \par
562 DOCTEST_INTERFACE {\cf17 extern} {\cf18 bool} is_running_in_test;\par
563 \par
564 {\cf21 #ifndef DOCTEST_CONFIG_STRING_SIZE_TYPE}\par
565 {\cf21 #define DOCTEST_CONFIG_STRING_SIZE_TYPE unsigned}\par
566 {\cf21 #endif}\par
567 \par
568 {\cf20 // A 24 byte string class (can be as small as 17 for x64 and 13 for x86) that can hold strings with length}\par
569 {\cf20 // of up to 23 chars on the stack before going on the heap - the last byte of the buffer is used for:}\par
570 {\cf20 // - "is small" bit - the highest bit - if "0" then it is small - otherwise its "1" (128)}\par
571 {\cf20 // - if small - capacity left before going on the heap - using the lowest 5 bits}\par
572 {\cf20 // - if small - 2 bits are left unused - the second and third highest ones}\par
573 {\cf20 // - if small - acts as a null terminator if strlen() is 23 (24 including the null terminator)}\par
574 {\cf20 //              and the "is small" bit remains "0" ("as well as the capacity left") so its OK}\par
575 {\cf20 // Idea taken from this lecture about the string implementation of facebook/folly - fbstring}\par
576 {\cf20 // https://www.youtube.com/watch?v=kPR8h4-qZdk}\par
577 {\cf20 // TODO:}\par
578 {\cf20 // - optimizations - like not deleting memory unnecessarily in operator= and etc.}\par
579 {\cf20 // - resize/reserve/clear}\par
580 {\cf20 // - replace}\par
581 {\cf20 // - back/front}\par
582 {\cf20 // - iterator stuff}\par
583 {\cf20 // - find & friends}\par
584 {\cf20 // - push_back/pop_back}\par
585 {\cf20 // - assign/insert/erase}\par
586 {\cf20 // - relational operators as free functions - taking const char* as one of the params}\par
587 {\cf17 class }DOCTEST_INTERFACE String\par
588 \{\par
589 {\cf17 public}:\par
590     {\cf17 using }size_type = DOCTEST_CONFIG_STRING_SIZE_TYPE;\par
591 \par
592 {\cf17 private}:\par
593     {\cf17 static} DOCTEST_CONSTEXPR size_type len  = 24;      \par
594     {\cf17 static} DOCTEST_CONSTEXPR size_type last = len - 1; \par
595 \par
596     {\cf17 struct }view {\cf20 // len should be more than sizeof(view) - because of the final byte for flags}\par
597     \{\par
598         {\cf18 char}*    ptr;\par
599         size_type size;\par
600         size_type capacity;\par
601     \};\par
602 \par
603     {\cf17 union}\par
604     \{\par
605         {\cf18 char} buf[len]; {\cf20 // NOLINT(*-avoid-c-arrays)}\par
606         view data;\par
607     \};\par
608 \par
609     {\cf18 char}* allocate(size_type sz);\par
610 \par
611     {\cf18 bool} isOnStack() const noexcept \{ {\cf19 return} (buf[last] & 128) == 0; \}\par
612     {\cf18 void} setOnHeap() noexcept;\par
613     {\cf18 void} setLast(size_type in = last) noexcept;\par
614     {\cf18 void} setSize(size_type sz) noexcept;\par
615 \par
616     {\cf18 void} copy(const String& other);\par
617 \par
618 public:\par
619     static DOCTEST_CONSTEXPR size_type npos = static_cast<size_type>(-1);\par
620 \par
621     String() noexcept;\par
622     ~String();\par
623 \par
624     {\cf20 // cppcheck-suppress noExplicitConstructor}\par
625     String(const {\cf18 char}* in);\par
626     String(const {\cf18 char}* in, size_type in_size);\par
627 \par
628     String(std::istream& in, size_type in_size);\par
629 \par
630     String(const String& other);\par
631     String& operator=(const String& other);\par
632 \par
633     String& operator+=(const String& other);\par
634 \par
635     String(String&& other) noexcept;\par
636     String& operator=(String&& other) noexcept;\par
637 \par
638     {\cf18 char}  operator[](size_type i) const;\par
639     {\cf18 char}& operator[](size_type i);\par
640 \par
641     {\cf20 // the only functions I'm willing to leave in the interface - available for inlining}\par
642     const {\cf18 char}* c_str(){\cf17  const }\{ {\cf19 return} {\cf17 const_cast<}String*{\cf17 >}({\cf17 this})->c_str(); \} {\cf20 // NOLINT}\par
643     {\cf18 char}*       c_str() \{\par
644         {\cf19 if} (isOnStack()) \{\par
645             {\cf19 return} {\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(buf);\par
646         \}\par
647         {\cf19 return} data.ptr;\par
648     \}\par
649 \par
650     size_type size() {\cf17 const};\par
651     size_type capacity() {\cf17 const};\par
652 \par
653     String substr(size_type pos, size_type cnt = npos) &&;\par
654     String substr(size_type pos, size_type cnt = npos) {\cf17 const} &;\par
655 \par
656     size_type find({\cf18 char} ch, size_type pos = 0) {\cf17 const};\par
657     size_type rfind({\cf18 char} ch, size_type pos = npos) {\cf17 const};\par
658 \par
659     {\cf18 int} compare({\cf17 const} {\cf18 char}* other, {\cf18 bool} no_case = {\cf17 false}) {\cf17 const};\par
660     {\cf18 int} compare({\cf17 const} String& other, {\cf18 bool} no_case = {\cf17 false}) {\cf17 const};\par
661 \par
662 {\cf17 friend} DOCTEST_INTERFACE std::ostream& operator<<(std::ostream& s, {\cf17 const} String& in);\par
663 \};\par
664 \par
665 DOCTEST_INTERFACE String operator+({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
666 \par
667 DOCTEST_INTERFACE {\cf18 bool} operator==({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
668 DOCTEST_INTERFACE {\cf18 bool} operator!=({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
669 DOCTEST_INTERFACE {\cf18 bool} operator<({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
670 DOCTEST_INTERFACE {\cf18 bool} operator>({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
671 DOCTEST_INTERFACE {\cf18 bool} operator<=({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
672 DOCTEST_INTERFACE {\cf18 bool} operator>=({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
673 \par
674 {\cf17 class }DOCTEST_INTERFACE Contains \{\par
675 {\cf17 public}:\par
676     {\cf17 explicit} Contains({\cf17 const} String& {\cf18 string});\par
677 \par
678     {\cf18 bool} checkWith({\cf17 const} String& other) {\cf17 const};\par
679 \par
680     String string;\par
681 \};\par
682 \par
683 DOCTEST_INTERFACE String toString({\cf17 const} Contains& in);\par
684 \par
685 DOCTEST_INTERFACE {\cf18 bool} operator==({\cf17 const} String& lhs, {\cf17 const} Contains& rhs);\par
686 DOCTEST_INTERFACE {\cf18 bool} operator==({\cf17 const} Contains& lhs, {\cf17 const} String& rhs);\par
687 DOCTEST_INTERFACE {\cf18 bool} operator!=({\cf17 const} String& lhs, {\cf17 const} Contains& rhs);\par
688 DOCTEST_INTERFACE {\cf18 bool} operator!=({\cf17 const} Contains& lhs, {\cf17 const} String& rhs);\par
689 \par
690 {\cf17 namespace }Color \{\par
691     {\cf17 enum} Enum\par
692     \{\par
693         None = 0,\par
694         White,\par
695         Red,\par
696         Green,\par
697         Blue,\par
698         Cyan,\par
699         Yellow,\par
700         Grey,\par
701 \par
702         Bright = 0x10,\par
703 \par
704         BrightRed   = Bright | Red,\par
705         BrightGreen = Bright | Green,\par
706         LightGrey   = Bright | Grey,\par
707         BrightWhite = Bright | White\par
708     \};\par
709 \par
710     DOCTEST_INTERFACE std::ostream& operator<<(std::ostream& s, Color::Enum code);\par
711 \} {\cf20 // namespace Color}\par
712 \par
713 {\cf17 namespace }assertType \{\par
714     {\cf17 enum} Enum\par
715     \{\par
716         {\cf20 // macro traits}\par
717 \par
718         is_warn    = 1,\par
719         is_check   = 2 * is_warn,\par
720         is_require = 2 * is_check,\par
721 \par
722         is_normal      = 2 * is_require,\par
723         is_throws      = 2 * is_normal,\par
724         is_throws_as   = 2 * is_throws,\par
725         is_throws_with = 2 * is_throws_as,\par
726         is_nothrow     = 2 * is_throws_with,\par
727 \par
728         is_false = 2 * is_nothrow,\par
729         is_unary = 2 * is_false, {\cf20 // not checked anywhere - used just to distinguish the types}\par
730 \par
731         is_eq = 2 * is_unary,\par
732         is_ne = 2 * is_eq,\par
733 \par
734         is_lt = 2 * is_ne,\par
735         is_gt = 2 * is_lt,\par
736 \par
737         is_ge = 2 * is_gt,\par
738         is_le = 2 * is_ge,\par
739 \par
740         {\cf20 // macro types}\par
741 \par
742         DT_WARN    = is_normal | is_warn,\par
743         DT_CHECK   = is_normal | is_check,\par
744         DT_REQUIRE = is_normal | is_require,\par
745 \par
746         DT_WARN_FALSE    = is_normal | is_false | is_warn,\par
747         DT_CHECK_FALSE   = is_normal | is_false | is_check,\par
748         DT_REQUIRE_FALSE = is_normal | is_false | is_require,\par
749 \par
750         DT_WARN_THROWS    = is_throws | is_warn,\par
751         DT_CHECK_THROWS   = is_throws | is_check,\par
752         DT_REQUIRE_THROWS = is_throws | is_require,\par
753 \par
754         DT_WARN_THROWS_AS    = is_throws_as | is_warn,\par
755         DT_CHECK_THROWS_AS   = is_throws_as | is_check,\par
756         DT_REQUIRE_THROWS_AS = is_throws_as | is_require,\par
757 \par
758         DT_WARN_THROWS_WITH    = is_throws_with | is_warn,\par
759         DT_CHECK_THROWS_WITH   = is_throws_with | is_check,\par
760         DT_REQUIRE_THROWS_WITH = is_throws_with | is_require,\par
761 \par
762         DT_WARN_THROWS_WITH_AS    = is_throws_with | is_throws_as | is_warn,\par
763         DT_CHECK_THROWS_WITH_AS   = is_throws_with | is_throws_as | is_check,\par
764         DT_REQUIRE_THROWS_WITH_AS = is_throws_with | is_throws_as | is_require,\par
765 \par
766         DT_WARN_NOTHROW    = is_nothrow | is_warn,\par
767         DT_CHECK_NOTHROW   = is_nothrow | is_check,\par
768         DT_REQUIRE_NOTHROW = is_nothrow | is_require,\par
769 \par
770         DT_WARN_EQ    = is_normal | is_eq | is_warn,\par
771         DT_CHECK_EQ   = is_normal | is_eq | is_check,\par
772         DT_REQUIRE_EQ = is_normal | is_eq | is_require,\par
773 \par
774         DT_WARN_NE    = is_normal | is_ne | is_warn,\par
775         DT_CHECK_NE   = is_normal | is_ne | is_check,\par
776         DT_REQUIRE_NE = is_normal | is_ne | is_require,\par
777 \par
778         DT_WARN_GT    = is_normal | is_gt | is_warn,\par
779         DT_CHECK_GT   = is_normal | is_gt | is_check,\par
780         DT_REQUIRE_GT = is_normal | is_gt | is_require,\par
781 \par
782         DT_WARN_LT    = is_normal | is_lt | is_warn,\par
783         DT_CHECK_LT   = is_normal | is_lt | is_check,\par
784         DT_REQUIRE_LT = is_normal | is_lt | is_require,\par
785 \par
786         DT_WARN_GE    = is_normal | is_ge | is_warn,\par
787         DT_CHECK_GE   = is_normal | is_ge | is_check,\par
788         DT_REQUIRE_GE = is_normal | is_ge | is_require,\par
789 \par
790         DT_WARN_LE    = is_normal | is_le | is_warn,\par
791         DT_CHECK_LE   = is_normal | is_le | is_check,\par
792         DT_REQUIRE_LE = is_normal | is_le | is_require,\par
793 \par
794         DT_WARN_UNARY    = is_normal | is_unary | is_warn,\par
795         DT_CHECK_UNARY   = is_normal | is_unary | is_check,\par
796         DT_REQUIRE_UNARY = is_normal | is_unary | is_require,\par
797 \par
798         DT_WARN_UNARY_FALSE    = is_normal | is_false | is_unary | is_warn,\par
799         DT_CHECK_UNARY_FALSE   = is_normal | is_false | is_unary | is_check,\par
800         DT_REQUIRE_UNARY_FALSE = is_normal | is_false | is_unary | is_require,\par
801     \};\par
802 \} {\cf20 // namespace assertType}\par
803 \par
804 DOCTEST_INTERFACE {\cf17 const} {\cf18 char}* assertString(assertType::Enum at);\par
805 DOCTEST_INTERFACE {\cf17 const} {\cf18 char}* failureString(assertType::Enum at);\par
806 DOCTEST_INTERFACE {\cf17 const} {\cf18 char}* skipPathFromFilename({\cf17 const} {\cf18 char}* file);\par
807 \par
808 {\cf17 struct }DOCTEST_INTERFACE TestCaseData\par
809 \{\par
810     String      m_file;       {\cf20 // the file in which the test was registered (using String - see #350)}\par
811     {\cf18 unsigned}    m_line;       {\cf20 // the line where the test was registered}\par
812     {\cf17 const} {\cf18 char}* m_name;       {\cf20 // name of the test case}\par
813     {\cf17 const} {\cf18 char}* m_test_suite; {\cf20 // the test suite in which the test was added}\par
814     {\cf17 const} {\cf18 char}* m_description;\par
815     {\cf18 bool}        m_skip;\par
816     {\cf18 bool}        m_no_breaks;\par
817     {\cf18 bool}        m_no_output;\par
818     {\cf18 bool}        m_may_fail;\par
819     {\cf18 bool}        m_should_fail;\par
820     {\cf18 int}         m_expected_failures;\par
821     {\cf18 double}      m_timeout;\par
822 \};\par
823 \par
824 {\cf17 struct }DOCTEST_INTERFACE AssertData\par
825 \{\par
826     {\cf20 // common - for all asserts}\par
827     {\cf17 const} TestCaseData* m_test_case;\par
828     assertType::Enum    m_at;\par
829     {\cf17 const} {\cf18 char}*         m_file;\par
830     {\cf18 int}                 m_line;\par
831     {\cf17 const} {\cf18 char}*         m_expr;\par
832     {\cf18 bool}                m_failed;\par
833 \par
834     {\cf20 // exception-related - for all asserts}\par
835     {\cf18 bool}   m_threw;\par
836     String m_exception;\par
837 \par
838     {\cf20 // for normal asserts}\par
839     String m_decomp;\par
840 \par
841     {\cf20 // for specific exception-related asserts}\par
842     {\cf18 bool}           m_threw_as;\par
843     {\cf17 const} {\cf18 char}*    m_exception_type;\par
844 \par
845     {\cf17 class }DOCTEST_INTERFACE StringContains \{\par
846         {\cf17 private}:\par
847             Contains content;\par
848             {\cf18 bool} isContains;\par
849 \par
850         {\cf17 public}:\par
851             StringContains({\cf17 const} String& str) : content(str), isContains(false) \{ \}\par
852             StringContains(Contains cntn) : content(static_cast<Contains&&>(cntn)), isContains(true) \{ \}\par
853 \par
854             {\cf18 bool} check({\cf17 const} String& str) \{ {\cf19 return} isContains ? (content == str) : (content.string == str); \}\par
855 \par
856             {\cf17 operator} {\cf17 const} String&() {\cf17 const} \{ {\cf19 return} content.string; \}\par
857 \par
858             {\cf17 const} {\cf18 char}* c_str(){\cf17  const }\{ {\cf19 return} content.string.c_str(); \}\par
859     \} m_exception_string;\par
860 \par
861     AssertData(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
862         {\cf17 const} {\cf18 char}* exception_type, {\cf17 const} StringContains& exception_string);\par
863 \};\par
864 \par
865 {\cf17 struct }DOCTEST_INTERFACE MessageData\par
866 \{\par
867     String           m_string;\par
868     {\cf17 const} {\cf18 char}*      m_file;\par
869     {\cf18 int}              m_line;\par
870     assertType::Enum m_severity;\par
871 \};\par
872 \par
873 {\cf17 struct }DOCTEST_INTERFACE SubcaseSignature\par
874 \{\par
875     String      m_name;\par
876     {\cf17 const} {\cf18 char}* m_file;\par
877     {\cf18 int}         m_line;\par
878 \par
879     {\cf18 bool} operator==({\cf17 const} SubcaseSignature& other) {\cf17 const};\par
880     {\cf18 bool} operator<({\cf17 const} SubcaseSignature& other) {\cf17 const};\par
881 \};\par
882 \par
883 {\cf17 struct }DOCTEST_INTERFACE IContextScope\par
884 \{\par
885     DOCTEST_DECLARE_INTERFACE(IContextScope)\par
886     virtual {\cf18 void} stringify(std::ostream*) const = 0;\par
887 \};\par
888 \par
889 namespace detail \{\par
890     {\cf17 struct }DOCTEST_INTERFACE TestCase;\par
891 \} {\cf20 // namespace detail}\par
892 \par
893 {\cf17 struct }ContextOptions \par
894 \{\par
895     std::ostream* cout = {\cf17 nullptr}; {\cf20 // stdout stream}\par
896     String        binary_name;    {\cf20 // the test binary name}\par
897 \par
898     {\cf17 const} detail::TestCase* currentTest = {\cf17 nullptr};\par
899 \par
900     {\cf20 // == parameters from the command line}\par
901     String   out;       {\cf20 // output filename}\par
902     String   order_by;  {\cf20 // how tests should be ordered}\par
903     {\cf18 unsigned} rand_seed; {\cf20 // the seed for rand ordering}\par
904 \par
905     {\cf18 unsigned} first; {\cf20 // the first (matching) test to be executed}\par
906     {\cf18 unsigned} last;  {\cf20 // the last (matching) test to be executed}\par
907 \par
908     {\cf18 int} abort_after;           {\cf20 // stop tests after this many failed assertions}\par
909     {\cf18 int} subcase_filter_levels; {\cf20 // apply the subcase filters for the first N levels}\par
910 \par
911     {\cf18 bool} success;              {\cf20 // include successful assertions in output}\par
912     {\cf18 bool} case_sensitive;       {\cf20 // if filtering should be case sensitive}\par
913     {\cf18 bool} exit;                 {\cf20 // if the program should be exited after the tests are ran/whatever}\par
914     {\cf18 bool} duration;             {\cf20 // print the time duration of each test case}\par
915     {\cf18 bool} minimal;              {\cf20 // minimal console output (only test failures)}\par
916     {\cf18 bool} quiet;                {\cf20 // no console output}\par
917     {\cf18 bool} no_throw;             {\cf20 // to skip exceptions-related assertion macros}\par
918     {\cf18 bool} no_exitcode;          {\cf20 // if the framework should return 0 as the exitcode}\par
919     {\cf18 bool} no_run;               {\cf20 // to not run the tests at all (can be done with an "*" exclude)}\par
920     {\cf18 bool} no_intro;             {\cf20 // to not print the intro of the framework}\par
921     {\cf18 bool} no_version;           {\cf20 // to not print the version of the framework}\par
922     {\cf18 bool} no_colors;            {\cf20 // if output to the console should be colorized}\par
923     {\cf18 bool} force_colors;         {\cf20 // forces the use of colors even when a tty cannot be detected}\par
924     {\cf18 bool} no_breaks;            {\cf20 // to not break into the debugger}\par
925     {\cf18 bool} no_skip;              {\cf20 // don't skip test cases which are marked to be skipped}\par
926     {\cf18 bool} gnu_file_line;        {\cf20 // if line numbers should be surrounded with :x: and not (x):}\par
927     {\cf18 bool} no_path_in_filenames; {\cf20 // if the path to files should be removed from the output}\par
928     {\cf18 bool} no_line_numbers;      {\cf20 // if source code line numbers should be omitted from the output}\par
929     {\cf18 bool} no_debug_output;      {\cf20 // no output in the debug console when a debugger is attached}\par
930     {\cf18 bool} no_skipped_summary;   {\cf20 // don't print "skipped" in the summary !!! UNDOCUMENTED !!!}\par
931     {\cf18 bool} no_time_in_output;    {\cf20 // omit any time/timestamps from output !!! UNDOCUMENTED !!!}\par
932 \par
933     {\cf18 bool} help;             {\cf20 // to print the help}\par
934     {\cf18 bool} version;          {\cf20 // to print the version}\par
935     {\cf18 bool} count;            {\cf20 // if only the count of matching tests is to be retrieved}\par
936     {\cf18 bool} list_test_cases;  {\cf20 // to list all tests matching the filters}\par
937     {\cf18 bool} list_test_suites; {\cf20 // to list all suites matching the filters}\par
938     {\cf18 bool} list_reporters;   {\cf20 // lists all registered reporters}\par
939 \};\par
940 \par
941 {\cf17 namespace }detail \{\par
942     {\cf17 namespace }types \{\par
943 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
944         {\cf17 using namespace }std;\par
945 {\cf21 #else}\par
946         {\cf17 template} <{\cf18 bool} COND, {\cf17 typename} T = {\cf18 void}>\par
947         {\cf17 struct }enable_if \{ \};\par
948 \par
949         {\cf17 template} <{\cf17 typename} T>\par
950         {\cf17 struct }enable_if<true, T> \{ {\cf17 using }type = T; \};\par
951 \par
952         {\cf17 struct }true_type \{ {\cf17 static} DOCTEST_CONSTEXPR {\cf18 bool} value = {\cf17 true}; \};\par
953         {\cf17 struct }false_type \{ {\cf17 static} DOCTEST_CONSTEXPR {\cf18 bool} value = {\cf17 false}; \};\par
954 \par
955         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }remove_reference \{ {\cf17 using }type = T; \};\par
956         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }remove_reference<T&> \{ {\cf17 using }type = T; \};\par
957         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }remove_reference<T&&> \{ {\cf17 using }type = T; \};\par
958 \par
959         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }is_rvalue_reference : false_type \{ \};\par
960         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }is_rvalue_reference<T&&> : true_type \{ \};\par
961 \par
962         {\cf17 template}<{\cf17 typename} T> {\cf17 struct }remove_const \{ {\cf17 using }type = T; \};\par
963         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }remove_const<const T> \{ {\cf17 using }type = T; \};\par
964 \par
965         {\cf20 // Compiler intrinsics}\par
966         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }is_enum \{ {\cf17 static} DOCTEST_CONSTEXPR {\cf18 bool} value = __is_enum(T); \};\par
967         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }underlying_type \{ {\cf17 using }type = __underlying_type(T); \};\par
968 \par
969         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }is_pointer : false_type \{ \};\par
970         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }is_pointer<T*> : true_type \{ \};\par
971 \par
972         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }is_array : false_type \{ \};\par
973         {\cf20 // NOLINTNEXTLINE(*-avoid-c-arrays)}\par
974         {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} SIZE> {\cf17 struct }is_array<T[SIZE]> : true_type \{ \};\par
975 {\cf21 #endif}\par
976     \}\par
977 \par
978     {\cf20 // <utility>}\par
979     {\cf17 template} <{\cf17 typename} T>\par
980     T&& declval();\par
981 \par
982     {\cf17 template} <{\cf17 class} T>\par
983     DOCTEST_CONSTEXPR_FUNC T&& forward({\cf17 typename} types::remove_reference<T>::type& t) DOCTEST_NOEXCEPT \{\par
984         {\cf19 return} {\cf17 static_cast<}T&&{\cf17 >}(t);\par
985     \}\par
986 \par
987     {\cf17 template} <{\cf17 class} T>\par
988     DOCTEST_CONSTEXPR_FUNC T&& forward({\cf17 typename} types::remove_reference<T>::type&& t) DOCTEST_NOEXCEPT \{\par
989         {\cf19 return} {\cf17 static_cast<}T&&{\cf17 >}(t);\par
990     \}\par
991 \par
992     {\cf17 template} <{\cf17 typename} T>\par
993     {\cf17 struct }deferred_false : types::false_type \{ \};\par
994 \par
995 {\cf20 // MSVS 2015 :(}\par
996 {\cf21 #if !DOCTEST_CLANG && defined(_MSC_VER) && _MSC_VER <= 1900}\par
997     {\cf17 template} <{\cf17 typename} T, {\cf17 typename} = {\cf18 void}>\par
998     {\cf17 struct }has_global_insertion_operator : types::false_type \{ \};\par
999 \par
1000     {\cf17 template} <{\cf17 typename} T>\par
1001     {\cf17 struct }has_global_insertion_operator<T, decltype(::operator<<(declval<std::ostream&>(), declval<const T&>()), void())> : types::true_type \{ \};\par
1002 \par
1003     {\cf17 template} <{\cf17 typename} T, {\cf17 typename} = {\cf18 void}>\par
1004     {\cf17 struct }has_insertion_operator \{ {\cf17 static} DOCTEST_CONSTEXPR {\cf18 bool} value = has_global_insertion_operator<T>::value; \};\par
1005 \par
1006     {\cf17 template} <{\cf17 typename} T, {\cf18 bool} global>\par
1007     {\cf17 struct }insert_hack;\par
1008 \par
1009     {\cf17 template} <{\cf17 typename} T>\par
1010     {\cf17 struct }insert_hack<T, true> \{\par
1011         {\cf17 static} {\cf18 void} insert(std::ostream& os, {\cf17 const} T& t) \{ ::operator<<(os, t); \}\par
1012     \};\par
1013 \par
1014     {\cf17 template} <{\cf17 typename} T>\par
1015     {\cf17 struct }insert_hack<T, false> \{\par
1016         {\cf17 static} {\cf18 void} insert(std::ostream& os, {\cf17 const} T& t) \{ operator<<(os, t); \}\par
1017     \};\par
1018 \par
1019     {\cf17 template} <{\cf17 typename} T>\par
1020     {\cf17 using }insert_hack_t = insert_hack<T, has_global_insertion_operator<T>::value>;\par
1021 {\cf21 #else}\par
1022     {\cf17 template} <{\cf17 typename} T, {\cf17 typename} = {\cf18 void}>\par
1023     {\cf17 struct }has_insertion_operator : types::false_type \{ \};\par
1024 {\cf21 #endif}\par
1025 \par
1026     {\cf17 template} <{\cf17 typename} T>\par
1027     {\cf17 struct }has_insertion_operator<T, decltype(operator<<(declval<std::ostream&>(), declval<const T&>()), void())> : types::true_type \{ \};\par
1028 \par
1029     {\cf17 template} <{\cf17 typename} T>\par
1030     {\cf17 struct }should_stringify_as_underlying_type \{\par
1031         {\cf17 static} DOCTEST_CONSTEXPR {\cf18 bool} value = detail::types::is_enum<T>::value && !doctest::detail::has_insertion_operator<T>::value;\par
1032     \};\par
1033 \par
1034     DOCTEST_INTERFACE std::ostream* tlssPush();\par
1035     DOCTEST_INTERFACE String tlssPop();\par
1036 \par
1037     {\cf17 template} <{\cf18 bool} C>\par
1038     {\cf17 struct }StringMakerBase \{\par
1039         {\cf17 template} <{\cf17 typename} T>\par
1040         {\cf17 static} String convert({\cf17 const} DOCTEST_REF_WRAP(T)) \{\par
1041 {\cf21 #ifdef DOCTEST_CONFIG_REQUIRE_STRINGIFICATION_FOR_ALL_USED_TYPES}\par
1042             {\cf17 static_assert}(deferred_false<T>::value, {\cf22 "No stringification detected for type T. See string conversion manual"});\par
1043 {\cf21 #endif}\par
1044             {\cf19 return} {\cf22 "\{?\}"};\par
1045         \}\par
1046     \};\par
1047 \par
1048     {\cf17 template} <{\cf17 typename} T>\par
1049     {\cf17 struct }filldata;\par
1050 \par
1051     {\cf17 template} <{\cf17 typename} T>\par
1052     {\cf18 void} filloss(std::ostream* stream, {\cf17 const} T& in) \{\par
1053         filldata<T>::fill(stream, in);\par
1054     \}\par
1055 \par
1056     {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} N>\par
1057     {\cf18 void} filloss(std::ostream* stream, {\cf17 const} T (&in)[N]) \{ {\cf20 // NOLINT(*-avoid-c-arrays)}\par
1058         {\cf20 // T[N], T(&)[N], T(&&)[N] have same behaviour.}\par
1059         {\cf20 // Hence remove reference.}\par
1060         filloss<{\cf17 typename} types::remove_reference<{\cf17 decltype}(in)>::type>(stream, in);\par
1061     \}\par
1062 \par
1063     {\cf17 template} <{\cf17 typename} T>\par
1064     String toStream({\cf17 const} T& in) \{\par
1065         std::ostream* stream = tlssPush();\par
1066         filloss(stream, in);\par
1067         {\cf19 return} tlssPop();\par
1068     \}\par
1069 \par
1070     {\cf17 template} <>\par
1071     {\cf17 struct }StringMakerBase<true> \{\par
1072         {\cf17 template} <{\cf17 typename} T>\par
1073         {\cf17 static} String convert({\cf17 const} DOCTEST_REF_WRAP(T) in) \{\par
1074             {\cf19 return} toStream(in);\par
1075         \}\par
1076     \};\par
1077 \} {\cf20 // namespace detail}\par
1078 \par
1079 {\cf17 template} <{\cf17 typename} T>\par
1080 {\cf17 struct }StringMaker : {\cf17 public} detail::StringMakerBase<\par
1081     detail::has_insertion_operator<T>::value || detail::types::is_pointer<T>::value || detail::types::is_array<T>::value>\par
1082 \{\};\par
1083 \par
1084 {\cf21 #ifndef DOCTEST_STRINGIFY}\par
1085 {\cf21 #ifdef DOCTEST_CONFIG_DOUBLE_STRINGIFY}\par
1086 {\cf21 #define DOCTEST_STRINGIFY(...) toString(toString(__VA_ARGS__))}\par
1087 {\cf21 #else}\par
1088 {\cf21 #define DOCTEST_STRINGIFY(...) toString(__VA_ARGS__)}\par
1089 {\cf21 #endif}\par
1090 {\cf21 #endif}\par
1091 \par
1092 {\cf17 template} <{\cf17 typename} T>\par
1093 String toString() \{\par
1094 {\cf21 #if DOCTEST_CLANG == 0 && DOCTEST_GCC == 0 && DOCTEST_ICC == 0}\par
1095     String ret = __FUNCSIG__; {\cf20 // class doctest::String __cdecl doctest::toString<TYPE>(void)}\par
1096     String::size_type beginPos = ret.find({\cf23 '<'});\par
1097     {\cf19 return} ret.substr(beginPos + 1, ret.size() - beginPos - {\cf17 static_cast<}String::size_type{\cf17 >}({\cf17 sizeof}({\cf22 ">(void)"})));\par
1098 {\cf21 #else}\par
1099     String ret = __PRETTY_FUNCTION__; {\cf20 // doctest::String toString() [with T = TYPE]}\par
1100     String::size_type begin = ret.find({\cf23 '='}) + 2;\par
1101     {\cf19 return} ret.substr(begin, ret.size() - begin - 1);\par
1102 {\cf21 #endif}\par
1103 \}\par
1104 \par
1105 template <typename T, typename detail::types::enable_if<!detail::should_stringify_as_underlying_type<T>::value, {\cf18 bool}>::type = {\cf17 true}>\par
1106 String toString({\cf17 const} DOCTEST_REF_WRAP(T) value) \{\par
1107     {\cf19 return} StringMaker<T>::convert(value);\par
1108 \}\par
1109 \par
1110 {\cf21 #ifdef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1111 DOCTEST_INTERFACE String toString({\cf17 const} {\cf18 char}* in);\par
1112 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1113 \par
1114 {\cf21 #if DOCTEST_MSVC >= DOCTEST_COMPILER(19, 20, 0)}\par
1115 {\cf20 // see this issue on why this is needed: https://github.com/doctest/doctest/issues/183}\par
1116 DOCTEST_INTERFACE String toString({\cf17 const} std::string& in);\par
1117 {\cf21 #endif }{\cf20 // VS 2019}\par
1118 \par
1119 DOCTEST_INTERFACE String toString(String in);\par
1120 \par
1121 DOCTEST_INTERFACE String toString(std::nullptr_t);\par
1122 \par
1123 DOCTEST_INTERFACE String toString({\cf18 bool} in);\par
1124 \par
1125 DOCTEST_INTERFACE String toString({\cf18 float} in);\par
1126 DOCTEST_INTERFACE String toString({\cf18 double} in);\par
1127 DOCTEST_INTERFACE String toString({\cf18 double} {\cf18 long} in);\par
1128 \par
1129 DOCTEST_INTERFACE String toString({\cf18 char} in);\par
1130 DOCTEST_INTERFACE String toString({\cf18 char} {\cf18 signed} in);\par
1131 DOCTEST_INTERFACE String toString({\cf18 char} {\cf18 unsigned} in);\par
1132 DOCTEST_INTERFACE String toString({\cf18 short} in);\par
1133 DOCTEST_INTERFACE String toString({\cf18 short} {\cf18 unsigned} in);\par
1134 DOCTEST_INTERFACE String toString({\cf18 signed} in);\par
1135 DOCTEST_INTERFACE String toString({\cf18 unsigned} in);\par
1136 DOCTEST_INTERFACE String toString({\cf18 long} in);\par
1137 DOCTEST_INTERFACE String toString({\cf18 long} {\cf18 unsigned} in);\par
1138 DOCTEST_INTERFACE String toString({\cf18 long} {\cf18 long} in);\par
1139 DOCTEST_INTERFACE String toString({\cf18 long} {\cf18 long} {\cf18 unsigned} in);\par
1140 \par
1141 template <typename T, typename detail::types::enable_if<detail::should_stringify_as_underlying_type<T>::value, {\cf18 bool}>::type = {\cf17 true}>\par
1142 String toString({\cf17 const} DOCTEST_REF_WRAP(T) value) \{\par
1143     {\cf17 using }UT = {\cf17 typename} detail::types::underlying_type<T>::type;\par
1144     {\cf19 return} (DOCTEST_STRINGIFY({\cf17 static_cast<}UT{\cf17 >}(value)));\par
1145 \}\par
1146 \par
1147 {\cf17 namespace }detail \{\par
1148     {\cf17 template} <{\cf17 typename} T>\par
1149     {\cf17 struct }filldata\par
1150     \{\par
1151         {\cf17 static} {\cf18 void} fill(std::ostream* stream, {\cf17 const} T& in) \{\par
1152 {\cf21 #if defined(_MSC_VER) && _MSC_VER <= 1900}\par
1153         insert_hack_t<T>::insert(*stream, in);\par
1154 {\cf21 #else}\par
1155         operator<<(*stream, in);\par
1156 {\cf21 #endif}\par
1157         \}\par
1158     \};\par
1159 \par
1160 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4866)\par
1161 {\cf20 // NOLINTBEGIN(*-avoid-c-arrays)}\par
1162     template <typename T, {\cf18 size_t} N>\par
1163     struct filldata<T[N]> \{\par
1164         {\cf17 static} {\cf18 void} fill(std::ostream* stream, {\cf17 const} T(&in)[N]) \{\par
1165             *stream << {\cf22 "["};\par
1166             {\cf19 for} ({\cf18 size_t} i = 0; i < N; i++) \{\par
1167                 {\cf19 if} (i != 0) \{ *stream << {\cf22 ", "}; \}\par
1168                 *stream << (DOCTEST_STRINGIFY(in[i]));\par
1169             \}\par
1170             *stream << {\cf22 "]"};\par
1171         \}\par
1172     \};\par
1173 {\cf20 // NOLINTEND(*-avoid-c-arrays)}\par
1174 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1175 \par
1176     {\cf20 // Specialized since we don't want the terminating null byte!}\par
1177 {\cf20 // NOLINTBEGIN(*-avoid-c-arrays)}\par
1178     {\cf17 template} <{\cf18 size_t} N>\par
1179     {\cf17 struct }filldata<const char[N]> \{\par
1180         {\cf17 static} {\cf18 void} fill(std::ostream* stream, {\cf17 const} {\cf18 char} (&in)[N]) \{\par
1181             *stream << String(in, in[N - 1] ? N : N - 1);\par
1182         \} {\cf20 // NOLINT(clang-analyzer-cplusplus.NewDeleteLeaks)}\par
1183     \};\par
1184 {\cf20 // NOLINTEND(*-avoid-c-arrays)}\par
1185 \par
1186     {\cf17 template} <>\par
1187     {\cf17 struct }filldata<const void*> \{\par
1188         {\cf17 static} {\cf18 void} fill(std::ostream* stream, {\cf17 const} {\cf18 void}* in);\par
1189     \};\par
1190 \par
1191     {\cf17 template} <{\cf17 typename} T>\par
1192     {\cf17 struct }filldata<T*> \{\par
1193 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4180)\par
1194         static {\cf18 void} fill(std::ostream* stream, const T* in) \{\par
1195 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1196 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wmicrosoft-cast"})\par
1197             filldata<const void*>::fill(stream,\par
1198 #{\cf19 if} DOCTEST_GCC == 0 || DOCTEST_GCC >= DOCTEST_COMPILER(4, 9, 0)\par
1199                 {\cf17 reinterpret_cast<}{\cf17 const }{\cf18 void}*{\cf17 >}(in)\par
1200 #{\cf19 else}\par
1201                 *{\cf17 reinterpret_cast<}{\cf17 const }{\cf18 void}* const*{\cf17 >}(&in)\par
1202 #endif\par
1203             );\par
1204 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
1205         \}\par
1206     \};\par
1207 \}\par
1208 \par
1209 {\cf17 struct }DOCTEST_INTERFACE Approx\par
1210 \{\par
1211     Approx({\cf18 double} value);\par
1212 \par
1213     Approx operator()({\cf18 double} value) {\cf17 const};\par
1214 \par
1215 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1216     {\cf17 template} <{\cf17 typename} T>\par
1217     {\cf17 explicit} Approx({\cf17 const} T& value,\par
1218                     {\cf17 typename} detail::types::enable_if<std::is_constructible<double, T>::value>::type* =\par
1219                             {\cf17 static_cast<}T*{\cf17 >}({\cf17 nullptr})) \{\par
1220         *{\cf17 this} = {\cf17 static_cast<}{\cf18 double}{\cf17 >}(value);\par
1221     \}\par
1222 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1223 \par
1224     Approx& epsilon({\cf18 double} newEpsilon);\par
1225 \par
1226 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1227     {\cf17 template} <{\cf17 typename} T>\par
1228     {\cf17 typename} std::enable_if<std::is_constructible<double, T>::value, Approx&>::type epsilon(\par
1229             {\cf17 const} T& newEpsilon) \{\par
1230         m_epsilon = {\cf17 static_cast<}{\cf18 double}{\cf17 >}(newEpsilon);\par
1231         {\cf19 return} *{\cf17 this};\par
1232     \}\par
1233 {\cf21 #endif }{\cf20 //  DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1234 \par
1235     Approx& scale({\cf18 double} newScale);\par
1236 \par
1237 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1238     {\cf17 template} <{\cf17 typename} T>\par
1239     {\cf17 typename} std::enable_if<std::is_constructible<double, T>::value, Approx&>::type scale(\par
1240             {\cf17 const} T& newScale) \{\par
1241         m_scale = {\cf17 static_cast<}{\cf18 double}{\cf17 >}(newScale);\par
1242         {\cf19 return} *{\cf17 this};\par
1243     \}\par
1244 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1245 \par
1246     {\cf20 // clang-format off}\par
1247     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator==({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
1248     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator==({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
1249     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator!=({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
1250     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator!=({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
1251     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator<=({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
1252     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator<=({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
1253     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator>=({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
1254     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator>=({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
1255     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator< ({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
1256     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator< ({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
1257     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator> ({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
1258     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator> ({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
1259 \par
1260 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1261 {\cf21 #define DOCTEST_APPROX_PREFIX \\}\par
1262 {\cf21     template <typename T> friend typename std::enable_if<std::is_constructible<double, T>::value, bool>::type}\par
1263 \par
1264     DOCTEST_APPROX_PREFIX operator==({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} operator==({\cf17 static_cast<}{\cf18 double}{\cf17 >}(lhs), rhs); \}\par
1265     DOCTEST_APPROX_PREFIX operator==({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} operator==(rhs, lhs); \}\par
1266     DOCTEST_APPROX_PREFIX operator!=({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} !operator==(lhs, rhs); \}\par
1267     DOCTEST_APPROX_PREFIX operator!=({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} !operator==(rhs, lhs); \}\par
1268     DOCTEST_APPROX_PREFIX operator<=({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} {\cf17 static_cast<}{\cf18 double}{\cf17 >}(lhs) < rhs.m_value || lhs == rhs; \}\par
1269     DOCTEST_APPROX_PREFIX operator<=({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} lhs.m_value < {\cf17 static_cast<}{\cf18 double}{\cf17 >}(rhs) || lhs == rhs; \}\par
1270     DOCTEST_APPROX_PREFIX operator>=({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} {\cf17 static_cast<}{\cf18 double}{\cf17 >}(lhs) > rhs.m_value || lhs == rhs; \}\par
1271     DOCTEST_APPROX_PREFIX operator>=({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} lhs.m_value > {\cf17 static_cast<}{\cf18 double}{\cf17 >}(rhs) || lhs == rhs; \}\par
1272     DOCTEST_APPROX_PREFIX operator< ({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} {\cf17 static_cast<}{\cf18 double}{\cf17 >}(lhs) < rhs.m_value && lhs != rhs; \}\par
1273     DOCTEST_APPROX_PREFIX operator< ({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} lhs.m_value < {\cf17 static_cast<}{\cf18 double}{\cf17 >}(rhs) && lhs != rhs; \}\par
1274     DOCTEST_APPROX_PREFIX operator> ({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} {\cf17 static_cast<}{\cf18 double}{\cf17 >}(lhs) > rhs.m_value && lhs != rhs; \}\par
1275     DOCTEST_APPROX_PREFIX operator> ({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} lhs.m_value > {\cf17 static_cast<}{\cf18 double}{\cf17 >}(rhs) && lhs != rhs; \}\par
1276 {\cf21 #undef DOCTEST_APPROX_PREFIX}\par
1277 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1278 \par
1279     {\cf20 // clang-format on}\par
1280 \par
1281     {\cf18 double} m_epsilon;\par
1282     {\cf18 double} m_scale;\par
1283     {\cf18 double} m_value;\par
1284 \};\par
1285 \par
1286 DOCTEST_INTERFACE String toString({\cf17 const} Approx& in);\par
1287 \par
1288 DOCTEST_INTERFACE {\cf17 const} ContextOptions* getContextOptions();\par
1289 \par
1290 {\cf17 template} <{\cf17 typename} F>\par
1291 {\cf17 struct }DOCTEST_INTERFACE_DECL IsNaN\par
1292 \{\par
1293     F value; {\cf18 bool} flipped;\par
1294     IsNaN(F f, {\cf18 bool} flip = {\cf17 false}) : value(f), flipped(flip) \{ \}\par
1295     IsNaN<F> operator!(){\cf17  const }\{ {\cf19 return} \{ value, !flipped \}; \}\par
1296     {\cf17 operator} bool() {\cf17 const};\par
1297 \};\par
1298 {\cf21 #ifndef __MINGW32__}\par
1299 {\cf17 extern} {\cf17 template} {\cf17 struct }DOCTEST_INTERFACE_DECL IsNaN<float>;\par
1300 {\cf17 extern} {\cf17 template} {\cf17 struct }DOCTEST_INTERFACE_DECL IsNaN<double>;\par
1301 {\cf17 extern} {\cf17 template} {\cf17 struct }DOCTEST_INTERFACE_DECL IsNaN<long double>;\par
1302 {\cf21 #endif}\par
1303 DOCTEST_INTERFACE String toString(IsNaN<float> in);\par
1304 DOCTEST_INTERFACE String toString(IsNaN<double> in);\par
1305 DOCTEST_INTERFACE String toString(IsNaN<double long> in);\par
1306 \par
1307 {\cf21 #ifndef DOCTEST_CONFIG_DISABLE}\par
1308 \par
1309 {\cf17 namespace }detail \{\par
1310     {\cf20 // clang-format off}\par
1311 {\cf21 #ifdef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1312     {\cf17 template}<{\cf17 class} T>               {\cf17 struct }decay_array       \{ {\cf17 using }type = T; \};\par
1313     {\cf17 template}<{\cf17 class} T, {\cf18 unsigned} N>   {\cf17 struct }decay_array<T[N]> \{ {\cf17 using }type = T*; \};\par
1314     {\cf17 template}<{\cf17 class} T>               {\cf17 struct }decay_array<T[]>  \{ {\cf17 using }type = T*; \};\par
1315 \par
1316     {\cf17 template}<{\cf17 class} T>   {\cf17 struct }not_char_pointer              \{ {\cf17 static} DOCTEST_CONSTEXPR {\cf18 int} value = 1; \};\par
1317     {\cf17 template}<>          {\cf17 struct }not_char_pointer<char*>       \{ {\cf17 static} DOCTEST_CONSTEXPR {\cf18 int} value = 0; \};\par
1318     {\cf17 template}<>          {\cf17 struct }not_char_pointer<const char*> \{ {\cf17 static} DOCTEST_CONSTEXPR {\cf18 int} value = 0; \};\par
1319 \par
1320     {\cf17 template}<{\cf17 class} T> {\cf17 struct }can_use_op : {\cf17 public} not_char_pointer<typename decay_array<T>::type> \{\};\par
1321 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1322     {\cf20 // clang-format on}\par
1323 \par
1324     {\cf17 struct }DOCTEST_INTERFACE TestFailureException\par
1325     \{\par
1326     \};\par
1327 \par
1328     DOCTEST_INTERFACE {\cf18 bool} checkIfShouldThrow(assertType::Enum at);\par
1329 \par
1330 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
1331     DOCTEST_NORETURN\par
1332 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
1333     DOCTEST_INTERFACE {\cf18 void} throwException();\par
1334 \par
1335     {\cf17 struct }DOCTEST_INTERFACE Subcase\par
1336     \{\par
1337         SubcaseSignature m_signature;\par
1338         {\cf18 bool}             m_entered = {\cf17 false};\par
1339 \par
1340         Subcase({\cf17 const} String& name, {\cf17 const} {\cf18 char}* file, {\cf18 int} line);\par
1341         Subcase({\cf17 const} Subcase&) = {\cf17 delete};\par
1342         Subcase(Subcase&&) = {\cf17 delete};\par
1343         Subcase& operator=({\cf17 const} Subcase&) = {\cf17 delete};\par
1344         Subcase& operator=(Subcase&&) = {\cf17 delete};\par
1345         ~Subcase();\par
1346 \par
1347         {\cf17 operator} bool() {\cf17 const};\par
1348 \par
1349         {\cf17 private}:\par
1350             {\cf18 bool} checkFilters();\par
1351     \};\par
1352 \par
1353     {\cf17 template} <{\cf17 typename} L, {\cf17 typename} R>\par
1354     String stringifyBinaryExpr({\cf17 const} DOCTEST_REF_WRAP(L) lhs, {\cf17 const} {\cf18 char}* op,\par
1355                                {\cf17 const} DOCTEST_REF_WRAP(R) rhs) \{\par
1356         {\cf19 return} (DOCTEST_STRINGIFY(lhs)) + op + (DOCTEST_STRINGIFY(rhs));\par
1357     \}\par
1358 \par
1359 {\cf21 #if DOCTEST_CLANG && DOCTEST_CLANG < DOCTEST_COMPILER(3, 6, 0)}\par
1360 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wunused-comparison"})\par
1361 {\cf21 #endif}\par
1362 \par
1363 {\cf20 // This will check if there is any way it could find a operator like member or friend and uses it.}\par
1364 {\cf20 // If not it doesn't find the operator or if the operator at global scope is defined after}\par
1365 {\cf20 // this template, the template won't be instantiated due to SFINAE. Once the template is not}\par
1366 {\cf20 // instantiated it can look for global operator using normal conversions.}\par
1367 {\cf21 #ifdef __NVCC__}\par
1368 {\cf21 #define SFINAE_OP(ret,op) ret}\par
1369 {\cf21 #else}\par
1370 {\cf21 #define SFINAE_OP(ret,op) decltype((void)(doctest::detail::declval<L>() op doctest::detail::declval<R>()),ret\{\})}\par
1371 {\cf21 #endif}\par
1372 \par
1373 {\cf21 #define DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(op, op_str, op_macro)                              \\}\par
1374 {\cf21     template <typename R>                                                                          \\}\par
1375 {\cf21     DOCTEST_NOINLINE SFINAE_OP(Result,op) operator op(R&& rhs) \{                                   \\}\par
1376 {\cf21     bool res = op_macro(doctest::detail::forward<const L>(lhs), doctest::detail::forward<R>(rhs)); \\}\par
1377 {\cf21         if(m_at & assertType::is_false)                                                            \\}\par
1378 {\cf21             res = !res;                                                                            \\}\par
1379 {\cf21         if(!res || doctest::getContextOptions()->success)                                          \\}\par
1380 {\cf21             return Result(res, stringifyBinaryExpr(lhs, op_str, rhs));                             \\}\par
1381 {\cf21         return Result(res);                                                                        \\}\par
1382 {\cf21     \}}\par
1383 \par
1384     {\cf20 // more checks could be added - like in Catch:}\par
1385     {\cf20 // https://github.com/catchorg/Catch2/pull/1480/files}\par
1386     {\cf20 // https://github.com/catchorg/Catch2/pull/1481/files}\par
1387 {\cf21 #define DOCTEST_FORBIT_EXPRESSION(rt, op)                                                          \\}\par
1388 {\cf21     template <typename R>                                                                          \\}\par
1389 {\cf21     rt& operator op(const R&) \{                                                                    \\}\par
1390 {\cf21         static_assert(deferred_false<R>::value,                                                    \\}\par
1391 {\cf21                       "Expression Too Complex Please Rewrite As Binary Comparison!");              \\}\par
1392 {\cf21         return *this;                                                                              \\}\par
1393 {\cf21     \}}\par
1394 \par
1395     {\cf17 struct }DOCTEST_INTERFACE Result {\cf20 // NOLINT(*-member-init)}\par
1396     \{\par
1397         {\cf18 bool}   m_passed;\par
1398         String m_decomp;\par
1399 \par
1400         Result() = {\cf19 default}; {\cf20 // TODO: Why do we need this? (To remove NOLINT)}\par
1401         Result({\cf18 bool} passed, {\cf17 const} String& decomposition = String());\par
1402 \par
1403         {\cf20 // forbidding some expressions based on this table: https://en.cppreference.com/w/cpp/language/operator_precedence}\par
1404         DOCTEST_FORBIT_EXPRESSION(Result, &)\par
1405         DOCTEST_FORBIT_EXPRESSION(Result, ^)\par
1406         DOCTEST_FORBIT_EXPRESSION(Result, |)\par
1407         DOCTEST_FORBIT_EXPRESSION(Result, &&)\par
1408         DOCTEST_FORBIT_EXPRESSION(Result, ||)\par
1409         DOCTEST_FORBIT_EXPRESSION(Result, ==)\par
1410         DOCTEST_FORBIT_EXPRESSION(Result, !=)\par
1411         DOCTEST_FORBIT_EXPRESSION(Result, <)\par
1412         DOCTEST_FORBIT_EXPRESSION(Result, >)\par
1413         DOCTEST_FORBIT_EXPRESSION(Result, <=)\par
1414         DOCTEST_FORBIT_EXPRESSION(Result, >=)\par
1415         DOCTEST_FORBIT_EXPRESSION(Result, =)\par
1416         DOCTEST_FORBIT_EXPRESSION(Result, +=)\par
1417         DOCTEST_FORBIT_EXPRESSION(Result, -=)\par
1418         DOCTEST_FORBIT_EXPRESSION(Result, *=)\par
1419         DOCTEST_FORBIT_EXPRESSION(Result, /=)\par
1420         DOCTEST_FORBIT_EXPRESSION(Result, %=)\par
1421         DOCTEST_FORBIT_EXPRESSION(Result, <<=)\par
1422         DOCTEST_FORBIT_EXPRESSION(Result, >>=)\par
1423         DOCTEST_FORBIT_EXPRESSION(Result, &=)\par
1424         DOCTEST_FORBIT_EXPRESSION(Result, ^=)\par
1425         DOCTEST_FORBIT_EXPRESSION(Result, |=)\par
1426     \};\par
1427 \par
1428 {\cf21 #ifndef DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION}\par
1429 \par
1430     DOCTEST_CLANG_SUPPRESS_WARNING_PUSH\par
1431     DOCTEST_CLANG_SUPPRESS_WARNING({\cf22 "-Wsign-conversion"})\par
1432     DOCTEST_CLANG_SUPPRESS_WARNING("-Wsign-compare")\par
1433     {\cf20 //DOCTEST_CLANG_SUPPRESS_WARNING("-Wdouble-promotion")}\par
1434     {\cf20 //DOCTEST_CLANG_SUPPRESS_WARNING("-Wconversion")}\par
1435     {\cf20 //DOCTEST_CLANG_SUPPRESS_WARNING("-Wfloat-equal")}\par
1436 \par
1437     DOCTEST_GCC_SUPPRESS_WARNING_PUSH\par
1438     DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-conversion")\par
1439     DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-compare")\par
1440     {\cf20 //DOCTEST_GCC_SUPPRESS_WARNING("-Wdouble-promotion")}\par
1441     {\cf20 //DOCTEST_GCC_SUPPRESS_WARNING("-Wconversion")}\par
1442     {\cf20 //DOCTEST_GCC_SUPPRESS_WARNING("-Wfloat-equal")}\par
1443 \par
1444     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH\par
1445     {\cf20 // https://stackoverflow.com/questions/39479163 what's the difference between 4018 and 4389}\par
1446     DOCTEST_MSVC_SUPPRESS_WARNING(4388) {\cf20 // signed/unsigned mismatch}\par
1447     DOCTEST_MSVC_SUPPRESS_WARNING(4389) {\cf20 // 'operator' : signed/unsigned mismatch}\par
1448     DOCTEST_MSVC_SUPPRESS_WARNING(4018) {\cf20 // 'expression' : signed/unsigned mismatch}\par
1449     {\cf20 //DOCTEST_MSVC_SUPPRESS_WARNING(4805) // 'operation' : unsafe mix of type 'type' and type 'type' in operation}\par
1450 \par
1451 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION}\par
1452 \par
1453     {\cf20 // clang-format off}\par
1454 {\cf21 #ifndef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1455 {\cf21 #define DOCTEST_COMPARISON_RETURN_TYPE bool}\par
1456 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1457 {\cf21 #define DOCTEST_COMPARISON_RETURN_TYPE typename types::enable_if<can_use_op<L>::value || can_use_op<R>::value, bool>::type}\par
1458     {\cf17 inline} {\cf18 bool} eq({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) == String(rhs); \}\par
1459     {\cf17 inline} {\cf18 bool} ne({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) != String(rhs); \}\par
1460     {\cf17 inline} {\cf18 bool} lt({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) <  String(rhs); \}\par
1461     {\cf17 inline} {\cf18 bool} gt({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) >  String(rhs); \}\par
1462     {\cf17 inline} {\cf18 bool} le({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) <= String(rhs); \}\par
1463     {\cf17 inline} {\cf18 bool} ge({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) >= String(rhs); \}\par
1464 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1465     {\cf20 // clang-format on}\par
1466 \par
1467 {\cf21 #define DOCTEST_RELATIONAL_OP(name, op)                                                            \\}\par
1468 {\cf21     template <typename L, typename R>                                                              \\}\par
1469 {\cf21     DOCTEST_COMPARISON_RETURN_TYPE name(const DOCTEST_REF_WRAP(L) lhs,                             \\}\par
1470 {\cf21                                         const DOCTEST_REF_WRAP(R) rhs) \{                           \\}\par
1471 {\cf21         return lhs op rhs;                                                                         \\}\par
1472 {\cf21     \}}\par
1473 \par
1474     DOCTEST_RELATIONAL_OP(eq, ==)\par
1475     DOCTEST_RELATIONAL_OP(ne, !=)\par
1476     DOCTEST_RELATIONAL_OP(lt, <)\par
1477     DOCTEST_RELATIONAL_OP(gt, >)\par
1478     DOCTEST_RELATIONAL_OP(le, <=)\par
1479     DOCTEST_RELATIONAL_OP(ge, >=)\par
1480 \par
1481 {\cf21 #ifndef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1482 {\cf21 #define DOCTEST_CMP_EQ(l, r) l == r}\par
1483 {\cf21 #define DOCTEST_CMP_NE(l, r) l != r}\par
1484 {\cf21 #define DOCTEST_CMP_GT(l, r) l > r}\par
1485 {\cf21 #define DOCTEST_CMP_LT(l, r) l < r}\par
1486 {\cf21 #define DOCTEST_CMP_GE(l, r) l >= r}\par
1487 {\cf21 #define DOCTEST_CMP_LE(l, r) l <= r}\par
1488 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1489 {\cf21 #define DOCTEST_CMP_EQ(l, r) eq(l, r)}\par
1490 {\cf21 #define DOCTEST_CMP_NE(l, r) ne(l, r)}\par
1491 {\cf21 #define DOCTEST_CMP_GT(l, r) gt(l, r)}\par
1492 {\cf21 #define DOCTEST_CMP_LT(l, r) lt(l, r)}\par
1493 {\cf21 #define DOCTEST_CMP_GE(l, r) ge(l, r)}\par
1494 {\cf21 #define DOCTEST_CMP_LE(l, r) le(l, r)}\par
1495 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1496 \par
1497     {\cf17 template} <{\cf17 typename} L>\par
1498     {\cf20 // cppcheck-suppress copyCtorAndEqOperator}\par
1499     {\cf17 struct }Expression_lhs\par
1500     \{\par
1501         L                lhs;\par
1502         assertType::Enum m_at;\par
1503 \par
1504         {\cf17 explicit} Expression_lhs(L&& in, assertType::Enum at)\par
1505                 : lhs(static_cast<L&&>(in))\par
1506                 , m_at(at) \{\}\par
1507 \par
1508         DOCTEST_NOINLINE {\cf17 operator} Result() \{\par
1509 {\cf20 // this is needed only for MSVC 2015}\par
1510 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4800) {\cf20 // 'int': forcing value to bool}\par
1511             {\cf18 bool} res = {\cf17 static_cast<}{\cf18 bool}{\cf17 >}(lhs);\par
1512 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1513             {\cf19 if}(m_at & assertType::is_false) \{ \par
1514                 res = !res;\par
1515             \}\par
1516 \par
1517             {\cf19 if}(!res || getContextOptions()->success) \{\par
1518                 {\cf19 return} \{ res, (DOCTEST_STRINGIFY(lhs)) \};\par
1519             \}\par
1520             {\cf19 return} \{ res \};\par
1521         \}\par
1522 \par
1523         {\cf20 /* This is required for user-defined conversions from Expression_lhs to L */}\par
1524         {\cf17 operator} L(){\cf17  const }\{ {\cf19 return} lhs; \}\par
1525 \par
1526         {\cf20 // clang-format off}\par
1527         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(==, {\cf22 " == "}, DOCTEST_CMP_EQ) \par
1528         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(!=, {\cf22 " != "}, DOCTEST_CMP_NE) \par
1529         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(>,  {\cf22 " >  "}, DOCTEST_CMP_GT) \par
1530         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(<,  {\cf22 " <  "}, DOCTEST_CMP_LT) \par
1531         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(>=, {\cf22 " >= "}, DOCTEST_CMP_GE) \par
1532         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(<=, {\cf22 " <= "}, DOCTEST_CMP_LE) \par
1533         {\cf20 // clang-format on}\par
1534 \par
1535         {\cf20 // forbidding some expressions based on this table: https://en.cppreference.com/w/cpp/language/operator_precedence}\par
1536         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, &)\par
1537         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, ^)\par
1538         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, |)\par
1539         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, &&)\par
1540         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, ||)\par
1541         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, =)\par
1542         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, +=)\par
1543         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, -=)\par
1544         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, *=)\par
1545         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, /=)\par
1546         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, %=)\par
1547         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, <<=)\par
1548         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, >>=)\par
1549         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, &=)\par
1550         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, ^=)\par
1551         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, |=)\par
1552         {\cf20 // these 2 are unfortunate because they should be allowed - they have higher precedence over the comparisons, but the}\par
1553         {\cf20 // ExpressionDecomposer class uses the left shift operator to capture the left operand of the binary expression...}\par
1554         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, <<)\par
1555         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, >>)\par
1556     \};\par
1557 \par
1558 {\cf21 #ifndef DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION}\par
1559 \par
1560     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
1561     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1562     DOCTEST_GCC_SUPPRESS_WARNING_POP\par
1563 \par
1564 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION}\par
1565 \par
1566 {\cf21 #if DOCTEST_CLANG && DOCTEST_CLANG < DOCTEST_COMPILER(3, 6, 0)}\par
1567 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
1568 {\cf21 #endif}\par
1569 \par
1570     {\cf17 struct }DOCTEST_INTERFACE ExpressionDecomposer\par
1571     \{\par
1572         assertType::Enum m_at;\par
1573 \par
1574         ExpressionDecomposer(assertType::Enum at);\par
1575 \par
1576         {\cf20 // The right operator for capturing expressions is "<=" instead of "<<" (based on the operator precedence table)}\par
1577         {\cf20 // but then there will be warnings from GCC about "-Wparentheses" and since "_Pragma()" is problematic this will stay for now...}\par
1578         {\cf20 // https://github.com/catchorg/Catch2/issues/870}\par
1579         {\cf20 // https://github.com/catchorg/Catch2/issues/565}\par
1580         {\cf17 template} <{\cf17 typename} L>\par
1581         Expression_lhs<L> operator<<(L&& operand) \{\par
1582             {\cf19 return} Expression_lhs<L>({\cf17 static_cast<}L&&{\cf17 >}(operand), m_at);\par
1583         \}\par
1584 \par
1585         template <typename L,typename types::enable_if<!doctest::detail::types::is_rvalue_reference<L>::value,{\cf18 void} >::type* = {\cf17 nullptr}>\par
1586         Expression_lhs<const L&> operator<<({\cf17 const} L &operand) \{\par
1587             {\cf19 return} Expression_lhs<const L&>(operand, m_at);\par
1588         \}\par
1589     \};\par
1590 \par
1591     {\cf17 struct }DOCTEST_INTERFACE TestSuite\par
1592     \{\par
1593         {\cf17 const} {\cf18 char}* m_test_suite = {\cf17 nullptr};\par
1594         {\cf17 const} {\cf18 char}* m_description = {\cf17 nullptr};\par
1595         {\cf18 bool}        m_skip = {\cf17 false};\par
1596         {\cf18 bool}        m_no_breaks = {\cf17 false};\par
1597         {\cf18 bool}        m_no_output = {\cf17 false};\par
1598         {\cf18 bool}        m_may_fail = {\cf17 false};\par
1599         {\cf18 bool}        m_should_fail = {\cf17 false};\par
1600         {\cf18 int}         m_expected_failures = 0;\par
1601         {\cf18 double}      m_timeout = 0;\par
1602 \par
1603         TestSuite& operator*({\cf17 const} {\cf18 char}* in);\par
1604 \par
1605         {\cf17 template} <{\cf17 typename} T>\par
1606         TestSuite& operator*({\cf17 const} T& in) \{\par
1607             in.fill(*{\cf17 this});\par
1608             {\cf19 return} *{\cf17 this};\par
1609         \}\par
1610     \};\par
1611 \par
1612     {\cf17 using }funcType = void (*)();\par
1613 \par
1614     {\cf17 struct }DOCTEST_INTERFACE TestCase : {\cf17 public} TestCaseData\par
1615     \{\par
1616         funcType m_test; {\cf20 // a function pointer to the test case}\par
1617 \par
1618         String m_type; {\cf20 // for templated test cases - gets appended to the real name}\par
1619         {\cf18 int} m_template_id; {\cf20 // an ID used to distinguish between the different versions of a templated test case}\par
1620         String m_full_name; {\cf20 // contains the name (only for templated test cases!) + the template type}\par
1621 \par
1622         TestCase(funcType test, {\cf17 const} {\cf18 char}* file, {\cf18 unsigned} line, {\cf17 const} TestSuite& test_suite,\par
1623                  {\cf17 const} String& type = String(), {\cf18 int} template_id = -1);\par
1624 \par
1625         TestCase({\cf17 const} TestCase& other);\par
1626         TestCase(TestCase&&) = {\cf17 delete};\par
1627 \par
1628         DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(26434) {\cf20 // hides a non-virtual function}\par
1629         TestCase& operator=(const TestCase& other);\par
1630         DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1631 \par
1632         TestCase& operator=(TestCase&&) = delete;\par
1633 \par
1634         TestCase& operator*(const {\cf18 char}* in);\par
1635 \par
1636         template <typename T>\par
1637         TestCase& operator*(const T& in) \{\par
1638             in.fill(*{\cf17 this});\par
1639             {\cf19 return} *{\cf17 this};\par
1640         \}\par
1641 \par
1642         {\cf18 bool} operator<({\cf17 const} TestCase& other) {\cf17 const};\par
1643 \par
1644         ~TestCase() = {\cf19 default};\par
1645     \};\par
1646 \par
1647     {\cf20 // forward declarations of functions used by the macros}\par
1648     DOCTEST_INTERFACE {\cf18 int}  regTest({\cf17 const} TestCase& tc);\par
1649     DOCTEST_INTERFACE {\cf18 int}  setTestSuite({\cf17 const} TestSuite& ts);\par
1650     DOCTEST_INTERFACE {\cf18 bool} isDebuggerActive();\par
1651 \par
1652     {\cf17 template}<{\cf17 typename} T>\par
1653     {\cf18 int} instantiationHelper({\cf17 const} T&) \{ {\cf19 return} 0; \}\par
1654 \par
1655     {\cf17 namespace }binaryAssertComparison \{\par
1656         {\cf17 enum} Enum\par
1657         \{\par
1658             eq = 0,\par
1659             ne,\par
1660             gt,\par
1661             lt,\par
1662             ge,\par
1663             le\par
1664         \};\par
1665     \} {\cf20 // namespace binaryAssertComparison}\par
1666 \par
1667     {\cf20 // clang-format off}\par
1668     {\cf17 template} <{\cf18 int}, {\cf17 class} L, {\cf17 class} R> {\cf17 struct }RelationalComparator     \{ {\cf18 bool} operator()({\cf17 const} DOCTEST_REF_WRAP(L),     {\cf17 const} DOCTEST_REF_WRAP(R)    ){\cf17  const }\{ {\cf19 return} {\cf17 false};        \} \};\par
1669 \par
1670 {\cf21 #define DOCTEST_BINARY_RELATIONAL_OP(n, op) \\}\par
1671 {\cf21     template <class L, class R> struct RelationalComparator<n, L, R> \{ bool operator()(const DOCTEST_REF_WRAP(L) lhs, const DOCTEST_REF_WRAP(R) rhs) const \{ return op(lhs, rhs); \} \};}\par
1672     {\cf20 // clang-format on}\par
1673 \par
1674     DOCTEST_BINARY_RELATIONAL_OP(0, doctest::detail::eq)\par
1675     DOCTEST_BINARY_RELATIONAL_OP(1, doctest::detail::ne)\par
1676     DOCTEST_BINARY_RELATIONAL_OP(2, doctest::detail::gt)\par
1677     DOCTEST_BINARY_RELATIONAL_OP(3, doctest::detail::lt)\par
1678     DOCTEST_BINARY_RELATIONAL_OP(4, doctest::detail::ge)\par
1679     DOCTEST_BINARY_RELATIONAL_OP(5, doctest::detail::le)\par
1680 \par
1681     struct DOCTEST_INTERFACE ResultBuilder : public AssertData\par
1682     \{\par
1683         ResultBuilder(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
1684                       {\cf17 const} {\cf18 char}* exception_type = {\cf22 ""}, {\cf17 const} String& exception_string = {\cf22 ""});\par
1685 \par
1686         ResultBuilder(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
1687                       {\cf17 const} {\cf18 char}* exception_type, {\cf17 const} Contains& exception_string);\par
1688 \par
1689         {\cf18 void} setResult({\cf17 const} Result& res);\par
1690 \par
1691         {\cf17 template} <{\cf18 int} comparison, {\cf17 typename} L, {\cf17 typename} R>\par
1692         DOCTEST_NOINLINE {\cf18 bool} binary_assert({\cf17 const} DOCTEST_REF_WRAP(L) lhs,\par
1693                                             {\cf17 const} DOCTEST_REF_WRAP(R) rhs) \{\par
1694             m_failed = !RelationalComparator<comparison, L, R>()(lhs, rhs);\par
1695             {\cf19 if} (m_failed || getContextOptions()->success) \{\par
1696                 m_decomp = stringifyBinaryExpr(lhs, {\cf22 ", "}, rhs);\par
1697             \}\par
1698             {\cf19 return} !m_failed;\par
1699         \}\par
1700 \par
1701         {\cf17 template} <{\cf17 typename} L>\par
1702         DOCTEST_NOINLINE {\cf18 bool} unary_assert({\cf17 const} DOCTEST_REF_WRAP(L) val) \{\par
1703             m_failed = !val;\par
1704 \par
1705             {\cf19 if} (m_at & assertType::is_false) \{ \par
1706                 m_failed = !m_failed;\par
1707             \}\par
1708 \par
1709             {\cf19 if} (m_failed || getContextOptions()->success) \{\par
1710                 m_decomp = (DOCTEST_STRINGIFY(val));\par
1711             \}\par
1712 \par
1713             {\cf19 return} !m_failed;\par
1714         \}\par
1715 \par
1716         {\cf18 void} translateException();\par
1717 \par
1718         {\cf18 bool} log();\par
1719         {\cf18 void} react() {\cf17 const};\par
1720     \};\par
1721 \par
1722     {\cf17 namespace }assertAction \{\par
1723         {\cf17 enum} Enum\par
1724         \{\par
1725             nothing     = 0,\par
1726             dbgbreak    = 1,\par
1727             shouldthrow = 2\par
1728         \};\par
1729     \} {\cf20 // namespace assertAction}\par
1730 \par
1731     DOCTEST_INTERFACE {\cf18 void} failed_out_of_a_testing_context({\cf17 const} AssertData& ad);\par
1732 \par
1733     DOCTEST_INTERFACE {\cf18 bool} decomp_assert(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
1734                                          {\cf17 const} {\cf18 char}* expr, {\cf17 const} Result& result);\par
1735 \par
1736 {\cf21 #define DOCTEST_ASSERT_OUT_OF_TESTS(decomp)                                                        \\}\par
1737 {\cf21     do \{                                                                                           \\}\par
1738 {\cf21         if(!is_running_in_test) \{                                                                  \\}\par
1739 {\cf21             if(failed) \{                                                                           \\}\par
1740 {\cf21                 ResultBuilder rb(at, file, line, expr);                                            \\}\par
1741 {\cf21                 rb.m_failed = failed;                                                              \\}\par
1742 {\cf21                 rb.m_decomp = decomp;                                                              \\}\par
1743 {\cf21                 failed_out_of_a_testing_context(rb);                                               \\}\par
1744 {\cf21                 if(isDebuggerActive() && !getContextOptions()->no_breaks)                          \\}\par
1745 {\cf21                     DOCTEST_BREAK_INTO_DEBUGGER();                                                 \\}\par
1746 {\cf21                 if(checkIfShouldThrow(at))                                                         \\}\par
1747 {\cf21                     throwException();                                                              \\}\par
1748 {\cf21             \}                                                                                      \\}\par
1749 {\cf21             return !failed;                                                                        \\}\par
1750 {\cf21         \}                                                                                          \\}\par
1751 {\cf21     \} while(false)}\par
1752 \par
1753 {\cf21 #define DOCTEST_ASSERT_IN_TESTS(decomp)                                                            \\}\par
1754 {\cf21     ResultBuilder rb(at, file, line, expr);                                                        \\}\par
1755 {\cf21     rb.m_failed = failed;                                                                          \\}\par
1756 {\cf21     if(rb.m_failed || getContextOptions()->success)                                                \\}\par
1757 {\cf21         rb.m_decomp = decomp;                                                                      \\}\par
1758 {\cf21     if(rb.log())                                                                                   \\}\par
1759 {\cf21         DOCTEST_BREAK_INTO_DEBUGGER();                                                             \\}\par
1760 {\cf21     if(rb.m_failed && checkIfShouldThrow(at))                                                      \\}\par
1761 {\cf21     throwException()}\par
1762 \par
1763     {\cf17 template} <{\cf18 int} comparison, {\cf17 typename} L, {\cf17 typename} R>\par
1764     DOCTEST_NOINLINE {\cf18 bool} binary_assert(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
1765                                         {\cf17 const} {\cf18 char}* expr, {\cf17 const} DOCTEST_REF_WRAP(L) lhs,\par
1766                                         {\cf17 const} DOCTEST_REF_WRAP(R) rhs) \{\par
1767         {\cf18 bool} failed = !RelationalComparator<comparison, L, R>()(lhs, rhs);\par
1768 \par
1769         {\cf20 // ###################################################################################}\par
1770         {\cf20 // IF THE DEBUGGER BREAKS HERE - GO 1 LEVEL UP IN THE CALLSTACK FOR THE FAILING ASSERT}\par
1771         {\cf20 // THIS IS THE EFFECT OF HAVING 'DOCTEST_CONFIG_SUPER_FAST_ASSERTS' DEFINED}\par
1772         {\cf20 // ###################################################################################}\par
1773         DOCTEST_ASSERT_OUT_OF_TESTS(stringifyBinaryExpr(lhs, {\cf22 ", "}, rhs));\par
1774         DOCTEST_ASSERT_IN_TESTS(stringifyBinaryExpr(lhs, {\cf22 ", "}, rhs));\par
1775         {\cf19 return} !failed;\par
1776     \}\par
1777 \par
1778     {\cf17 template} <{\cf17 typename} L>\par
1779     DOCTEST_NOINLINE {\cf18 bool} unary_assert(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
1780                                        {\cf17 const} {\cf18 char}* expr, {\cf17 const} DOCTEST_REF_WRAP(L) val) \{\par
1781         {\cf18 bool} failed = !val;\par
1782 \par
1783         {\cf19 if}(at & assertType::is_false) \par
1784             failed = !failed;\par
1785 \par
1786         {\cf20 // ###################################################################################}\par
1787         {\cf20 // IF THE DEBUGGER BREAKS HERE - GO 1 LEVEL UP IN THE CALLSTACK FOR THE FAILING ASSERT}\par
1788         {\cf20 // THIS IS THE EFFECT OF HAVING 'DOCTEST_CONFIG_SUPER_FAST_ASSERTS' DEFINED}\par
1789         {\cf20 // ###################################################################################}\par
1790         DOCTEST_ASSERT_OUT_OF_TESTS((DOCTEST_STRINGIFY(val)));\par
1791         DOCTEST_ASSERT_IN_TESTS((DOCTEST_STRINGIFY(val)));\par
1792         {\cf19 return} !failed;\par
1793     \}\par
1794 \par
1795     {\cf17 struct }DOCTEST_INTERFACE IExceptionTranslator\par
1796     \{\par
1797         DOCTEST_DECLARE_INTERFACE(IExceptionTranslator)\par
1798         virtual {\cf18 bool} translate(String&) const = 0;\par
1799     \};\par
1800 \par
1801     template <typename T>\par
1802     class ExceptionTranslator : public IExceptionTranslator \par
1803     \{\par
1804     {\cf17 public}:\par
1805         {\cf17 explicit} ExceptionTranslator(String (*translateFunction)(T))\par
1806                 : m_translateFunction(translateFunction) \{\}\par
1807 \par
1808         {\cf18 bool} translate(String& res){\cf17  const override }\{\par
1809 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
1810             {\cf19 try} \{\par
1811                 {\cf19 throw}; {\cf20 // lgtm [cpp/rethrow-no-exception]}\par
1812                 {\cf20 // cppcheck-suppress catchExceptionByValue}\par
1813             \} {\cf19 catch}({\cf17 const} T& ex) \{\par
1814                 res = m_translateFunction(ex); \par
1815                 {\cf19 return} {\cf17 true};\par
1816             \} {\cf19 catch}(...) \{\}         \par
1817 {\cf21 #endif                              }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
1818             {\cf17 static_cast<}{\cf18 void}{\cf17 >}(res); {\cf20 // to silence -Wunused-parameter}\par
1819             {\cf19 return} {\cf17 false};\par
1820         \}\par
1821 \par
1822     {\cf17 private}:\par
1823         String (*m_translateFunction)(T);\par
1824     \};\par
1825 \par
1826     DOCTEST_INTERFACE {\cf18 void} registerExceptionTranslatorImpl({\cf17 const} IExceptionTranslator* et);\par
1827 \par
1828     {\cf20 // ContextScope base class used to allow implementing methods of ContextScope}\par
1829     {\cf20 // that don't depend on the template parameter in doctest.cpp.}\par
1830     {\cf17 struct }DOCTEST_INTERFACE ContextScopeBase : {\cf17 public} IContextScope \{\par
1831         ContextScopeBase({\cf17 const} ContextScopeBase&) = {\cf17 delete};\par
1832 \par
1833         ContextScopeBase& operator=({\cf17 const} ContextScopeBase&) = {\cf17 delete};\par
1834         ContextScopeBase& operator=(ContextScopeBase&&) = {\cf17 delete};\par
1835 \par
1836         ~ContextScopeBase() {\cf17 override} = {\cf19 default};\par
1837 \par
1838     {\cf17 protected}:\par
1839         ContextScopeBase();\par
1840         ContextScopeBase(ContextScopeBase&& other) {\cf17 noexcept};\par
1841 \par
1842         {\cf18 void} destroy();\par
1843         {\cf18 bool} need_to_destroy\{{\cf17 true}\};\par
1844     \};\par
1845 \par
1846     {\cf17 template} <{\cf17 typename} L> {\cf17 class }ContextScope : {\cf17 public} ContextScopeBase\par
1847     \{\par
1848         L lambda_;\par
1849 \par
1850     {\cf17 public}:\par
1851         {\cf17 explicit} ContextScope({\cf17 const} L &lambda) : lambda_(lambda) \{\}\par
1852         {\cf17 explicit} ContextScope(L&& lambda) : lambda_(static_cast<L&&>(lambda)) \{ \}\par
1853 \par
1854         ContextScope({\cf17 const} ContextScope&) = {\cf17 delete};\par
1855         ContextScope(ContextScope&&) noexcept = default;\par
1856 \par
1857         ContextScope& operator=(const ContextScope&) = delete;\par
1858         ContextScope& operator=(ContextScope&&) = delete;\par
1859 \par
1860         {\cf18 void} stringify(std::ostream* s){\cf17  const override }\{ lambda_(s); \}\par
1861 \par
1862         ~ContextScope(){\cf17  override }\{\par
1863             {\cf19 if} (need_to_destroy) \{\par
1864                 destroy();\par
1865             \}\par
1866         \}\par
1867     \};\par
1868 \par
1869     {\cf17 struct }DOCTEST_INTERFACE MessageBuilder : {\cf17 public} MessageData\par
1870     \{\par
1871         std::ostream* m_stream;\par
1872         {\cf18 bool}          logged = {\cf17 false};\par
1873 \par
1874         MessageBuilder({\cf17 const} {\cf18 char}* file, {\cf18 int} line, assertType::Enum severity);\par
1875 \par
1876         MessageBuilder({\cf17 const} MessageBuilder&) = {\cf17 delete};\par
1877         MessageBuilder(MessageBuilder&&) = {\cf17 delete};\par
1878 \par
1879         MessageBuilder& operator=({\cf17 const} MessageBuilder&) = {\cf17 delete};\par
1880         MessageBuilder& operator=(MessageBuilder&&) = {\cf17 delete};\par
1881 \par
1882         ~MessageBuilder();\par
1883 \par
1884         {\cf20 // the preferred way of chaining parameters for stringification}\par
1885 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4866)\par
1886         template <typename T>\par
1887         MessageBuilder& operator,(const T& in) \{\par
1888             *m_stream << (DOCTEST_STRINGIFY(in));\par
1889             {\cf19 return} *{\cf17 this};\par
1890         \}\par
1891 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1892 \par
1893         {\cf20 // kept here just for backwards-compatibility - the comma operator should be preferred now}\par
1894         {\cf17 template} <{\cf17 typename} T>\par
1895         MessageBuilder& operator<<({\cf17 const} T& in) \{ {\cf19 return} this->operator,(in); \}\par
1896 \par
1897         {\cf20 // the `,` operator has the lowest operator precedence - if `<<` is used by the user then}\par
1898         {\cf20 // the `,` operator will be called last which is not what we want and thus the `*` operator}\par
1899         {\cf20 // is used first (has higher operator precedence compared to `<<`) so that we guarantee that}\par
1900         {\cf20 // an operator of the MessageBuilder class is called first before the rest of the parameters}\par
1901         {\cf17 template} <{\cf17 typename} T>\par
1902         MessageBuilder& operator*({\cf17 const} T& in) \{ {\cf19 return} this->operator,(in); \}\par
1903 \par
1904         {\cf18 bool} log();\par
1905         {\cf18 void} react();\par
1906     \};\par
1907 \par
1908     {\cf17 template} <{\cf17 typename} L>\par
1909     ContextScope<L> MakeContextScope({\cf17 const} L &lambda) \{\par
1910         {\cf19 return} ContextScope<L>(lambda);\par
1911     \}\par
1912 \} {\cf20 // namespace detail}\par
1913 \par
1914 {\cf21 #define DOCTEST_DEFINE_DECORATOR(name, type, def)                                                  \\}\par
1915 {\cf21     struct name                                                                                    \\}\par
1916 {\cf21     \{                                                                                              \\}\par
1917 {\cf21         type data;                                                                                 \\}\par
1918 {\cf21         name(type in = def)                                                                        \\}\par
1919 {\cf21                 : data(in) \{\}                                                                      \\}\par
1920 {\cf21         void fill(detail::TestCase& state) const \{ state.DOCTEST_CAT(m_, name) = data; \}           \\}\par
1921 {\cf21         void fill(detail::TestSuite& state) const \{ state.DOCTEST_CAT(m_, name) = data; \}          \\}\par
1922 {\cf21     \}}\par
1923 \par
1924 DOCTEST_DEFINE_DECORATOR(test_suite, {\cf17 const} {\cf18 char}*, {\cf22 ""});\par
1925 DOCTEST_DEFINE_DECORATOR(description, {\cf17 const} {\cf18 char}*, {\cf22 ""});\par
1926 DOCTEST_DEFINE_DECORATOR(skip, {\cf18 bool}, {\cf17 true});\par
1927 DOCTEST_DEFINE_DECORATOR(no_breaks, {\cf18 bool}, {\cf17 true});\par
1928 DOCTEST_DEFINE_DECORATOR(no_output, {\cf18 bool}, {\cf17 true});\par
1929 DOCTEST_DEFINE_DECORATOR(timeout, {\cf18 double}, 0);\par
1930 DOCTEST_DEFINE_DECORATOR(may_fail, {\cf18 bool}, {\cf17 true});\par
1931 DOCTEST_DEFINE_DECORATOR(should_fail, {\cf18 bool}, {\cf17 true});\par
1932 DOCTEST_DEFINE_DECORATOR(expected_failures, {\cf18 int}, 0);\par
1933 \par
1934 {\cf17 template} <{\cf17 typename} T>\par
1935 {\cf18 int} registerExceptionTranslator(String (*translateFunction)(T)) \{\par
1936     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wexit-time-destructors"})\par
1937     {\cf17 static} detail::ExceptionTranslator<T> exceptionTranslator(translateFunction);\par
1938     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
1939     detail::registerExceptionTranslatorImpl(&exceptionTranslator);\par
1940     {\cf19 return} 0;\par
1941 \}\par
1942 \par
1943 \} {\cf20 // namespace doctest}\par
1944 \par
1945 {\cf20 // in a separate namespace outside of doctest because the DOCTEST_TEST_SUITE macro}\par
1946 {\cf20 // introduces an anonymous namespace in which getCurrentTestSuite gets overridden}\par
1947 {\cf17 namespace }doctest_detail_test_suite_ns \{\par
1948 DOCTEST_INTERFACE doctest::detail::TestSuite& getCurrentTestSuite();\par
1949 \} {\cf20 // namespace doctest_detail_test_suite_ns}\par
1950 \par
1951 {\cf17 namespace }doctest \{\par
1952 {\cf21 #else  }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
1953 {\cf17 template} <{\cf17 typename} T>\par
1954 {\cf18 int} registerExceptionTranslator(String (*)(T)) \{\par
1955     {\cf19 return} 0;\par
1956 \}\par
1957 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
1958 \par
1959 {\cf17 namespace }detail \{\par
1960     {\cf17 using }assert_handler = void (*)({\cf17 const} AssertData&);\par
1961     {\cf17 struct }ContextState;\par
1962 \} {\cf20 // namespace detail}\par
1963 \par
1964 {\cf17 class }DOCTEST_INTERFACE Context\par
1965 \{\par
1966     detail::ContextState* p;\par
1967 \par
1968     {\cf18 void} parseArgs({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf18 bool} withDefaults = {\cf17 false});\par
1969 \par
1970 {\cf17 public}:\par
1971     {\cf17 explicit} Context({\cf18 int} argc = 0, {\cf17 const} {\cf18 char}* {\cf17 const}* argv = {\cf17 nullptr});\par
1972 \par
1973     Context({\cf17 const} Context&) = {\cf17 delete};\par
1974     Context(Context&&) = {\cf17 delete};\par
1975 \par
1976     Context& operator=({\cf17 const} Context&) = {\cf17 delete};\par
1977     Context& operator=(Context&&) = {\cf17 delete};\par
1978 \par
1979     ~Context(); {\cf20 // NOLINT(performance-trivially-destructible)}\par
1980 \par
1981     {\cf18 void} applyCommandLine({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv);\par
1982 \par
1983     {\cf18 void} addFilter({\cf17 const} {\cf18 char}* filter, {\cf17 const} {\cf18 char}* value);\par
1984     {\cf18 void} clearFilters();\par
1985     {\cf18 void} setOption({\cf17 const} {\cf18 char}* option, {\cf18 bool} value);\par
1986     {\cf18 void} setOption({\cf17 const} {\cf18 char}* option, {\cf18 int} value);\par
1987     {\cf18 void} setOption({\cf17 const} {\cf18 char}* option, {\cf17 const} {\cf18 char}* value);\par
1988 \par
1989     {\cf18 bool} shouldExit();\par
1990 \par
1991     {\cf18 void} setAsDefaultForAssertsOutOfTestCases();\par
1992 \par
1993     {\cf18 void} setAssertHandler(detail::assert_handler ah);\par
1994 \par
1995     {\cf18 void} setCout(std::ostream* out);\par
1996 \par
1997     {\cf18 int} run();\par
1998 \};\par
1999 \par
2000 {\cf17 namespace }TestCaseFailureReason \{\par
2001     {\cf17 enum} Enum\par
2002     \{\par
2003         None                     = 0,\par
2004         AssertFailure            = 1,   {\cf20 // an assertion has failed in the test case}\par
2005         Exception                = 2,   {\cf20 // test case threw an exception}\par
2006         Crash                    = 4,   {\cf20 // a crash...}\par
2007         TooManyFailedAsserts     = 8,   {\cf20 // the abort-after option}\par
2008         Timeout                  = 16,  {\cf20 // see the timeout decorator}\par
2009         ShouldHaveFailedButDidnt = 32,  {\cf20 // see the should_fail decorator}\par
2010         ShouldHaveFailedAndDid   = 64,  {\cf20 // see the should_fail decorator}\par
2011         DidntFailExactlyNumTimes = 128, {\cf20 // see the expected_failures decorator}\par
2012         FailedExactlyNumTimes    = 256, {\cf20 // see the expected_failures decorator}\par
2013         CouldHaveFailedAndDid    = 512  {\cf20 // see the may_fail decorator}\par
2014     \};\par
2015 \} {\cf20 // namespace TestCaseFailureReason}\par
2016 \par
2017 {\cf17 struct }DOCTEST_INTERFACE CurrentTestCaseStats\par
2018 \{\par
2019     {\cf18 int}    numAssertsCurrentTest;\par
2020     {\cf18 int}    numAssertsFailedCurrentTest;\par
2021     {\cf18 double} seconds;\par
2022     {\cf18 int}    failure_flags; {\cf20 // use TestCaseFailureReason::Enum}\par
2023     {\cf18 bool}   testCaseSuccess;\par
2024 \};\par
2025 \par
2026 {\cf17 struct }DOCTEST_INTERFACE TestCaseException\par
2027 \{\par
2028     String error_string;\par
2029     {\cf18 bool}   is_crash;\par
2030 \};\par
2031 \par
2032 {\cf17 struct }DOCTEST_INTERFACE TestRunStats\par
2033 \{\par
2034     {\cf18 unsigned} numTestCases;\par
2035     {\cf18 unsigned} numTestCasesPassingFilters;\par
2036     {\cf18 unsigned} numTestSuitesPassingFilters;\par
2037     {\cf18 unsigned} numTestCasesFailed;\par
2038     {\cf18 int}      numAsserts;\par
2039     {\cf18 int}      numAssertsFailed;\par
2040 \};\par
2041 \par
2042 {\cf17 struct }QueryData\par
2043 \{\par
2044     {\cf17 const} TestRunStats*  run_stats = {\cf17 nullptr};\par
2045     {\cf17 const} TestCaseData** data      = {\cf17 nullptr};\par
2046     {\cf18 unsigned}             num_data  = 0;\par
2047 \};\par
2048 \par
2049 {\cf17 struct }DOCTEST_INTERFACE IReporter\par
2050 \{\par
2051     {\cf20 // The constructor has to accept "const ContextOptions&" as a single argument}\par
2052     {\cf20 // which has most of the options for the run + a pointer to the stdout stream}\par
2053     {\cf20 // Reporter(const ContextOptions& in)}\par
2054 \par
2055     {\cf20 // called when a query should be reported (listing test cases, printing the version, etc.)}\par
2056     {\cf17 virtual} {\cf18 void} report_query({\cf17 const} QueryData&) = 0;\par
2057 \par
2058     {\cf20 // called when the whole test run starts}\par
2059     {\cf17 virtual} {\cf18 void} test_run_start() = 0;\par
2060     {\cf20 // called when the whole test run ends (caching a pointer to the input doesn't make sense here)}\par
2061     {\cf17 virtual} {\cf18 void} test_run_end({\cf17 const} TestRunStats&) = 0;\par
2062 \par
2063     {\cf20 // called when a test case is started (safe to cache a pointer to the input)}\par
2064     {\cf17 virtual} {\cf18 void} test_case_start({\cf17 const} TestCaseData&) = 0;\par
2065     {\cf20 // called when a test case is reentered because of unfinished subcases (safe to cache a pointer to the input)}\par
2066     {\cf17 virtual} {\cf18 void} test_case_reenter({\cf17 const} TestCaseData&) = 0;\par
2067     {\cf20 // called when a test case has ended}\par
2068     {\cf17 virtual} {\cf18 void} test_case_end({\cf17 const} CurrentTestCaseStats&) = 0;\par
2069 \par
2070     {\cf20 // called when an exception is thrown from the test case (or it crashes)}\par
2071     {\cf17 virtual} {\cf18 void} test_case_exception({\cf17 const} TestCaseException&) = 0;\par
2072 \par
2073     {\cf20 // called whenever a subcase is entered (don't cache pointers to the input)}\par
2074     {\cf17 virtual} {\cf18 void} subcase_start({\cf17 const} SubcaseSignature&) = 0;\par
2075     {\cf20 // called whenever a subcase is exited (don't cache pointers to the input)}\par
2076     {\cf17 virtual} {\cf18 void} subcase_end() = 0;\par
2077 \par
2078     {\cf20 // called for each assert (don't cache pointers to the input)}\par
2079     {\cf17 virtual} {\cf18 void} log_assert({\cf17 const} AssertData&) = 0;\par
2080     {\cf20 // called for each message (don't cache pointers to the input)}\par
2081     {\cf17 virtual} {\cf18 void} log_message({\cf17 const} MessageData&) = 0;\par
2082 \par
2083     {\cf20 // called when a test case is skipped either because it doesn't pass the filters, has a skip decorator}\par
2084     {\cf20 // or isn't in the execution range (between first and last) (safe to cache a pointer to the input)}\par
2085     {\cf17 virtual} {\cf18 void} test_case_skipped({\cf17 const} TestCaseData&) = 0;\par
2086 \par
2087     DOCTEST_DECLARE_INTERFACE(IReporter)\par
2088 \par
2089     {\cf20 // can obtain all currently active contexts and stringify them if one wishes to do so}\par
2090     static {\cf18 int}                         get_num_active_contexts();\par
2091     static const IContextScope* const* get_active_contexts();\par
2092 \par
2093     {\cf20 // can iterate through contexts which have been stringified automatically in their destructors when an exception has been thrown}\par
2094     static {\cf18 int}           get_num_stringified_contexts();\par
2095     static const String* get_stringified_contexts();\par
2096 \};\par
2097 \par
2098 namespace detail \{\par
2099     {\cf17 using }reporterCreatorFunc =  IReporter* (*)({\cf17 const} ContextOptions&);\par
2100 \par
2101     DOCTEST_INTERFACE {\cf18 void} registerReporterImpl({\cf17 const} {\cf18 char}* name, {\cf18 int} prio, reporterCreatorFunc c, {\cf18 bool} isReporter);\par
2102 \par
2103     {\cf17 template} <{\cf17 typename} Reporter>\par
2104     IReporter* reporterCreator({\cf17 const} ContextOptions& o) \{\par
2105         {\cf19 return} {\cf17 new} Reporter(o);\par
2106     \}\par
2107 \} {\cf20 // namespace detail}\par
2108 \par
2109 {\cf17 template} <{\cf17 typename} Reporter>\par
2110 {\cf18 int} registerReporter({\cf17 const} {\cf18 char}* name, {\cf18 int} priority, {\cf18 bool} isReporter) \{\par
2111     detail::registerReporterImpl(name, priority, detail::reporterCreator<Reporter>, isReporter);\par
2112     {\cf19 return} 0;\par
2113 \}\par
2114 \} {\cf20 // namespace doctest}\par
2115 \par
2116 {\cf21 #ifdef DOCTEST_CONFIG_ASSERTS_RETURN_VALUES}\par
2117 {\cf21 #define DOCTEST_FUNC_EMPTY [] \{ return false; \}()}\par
2118 {\cf21 #else}\par
2119 {\cf21 #define DOCTEST_FUNC_EMPTY (void)0}\par
2120 {\cf21 #endif}\par
2121 \par
2122 {\cf20 // if registering is not disabled}\par
2123 {\cf21 #ifndef DOCTEST_CONFIG_DISABLE}\par
2124 \par
2125 {\cf21 #ifdef DOCTEST_CONFIG_ASSERTS_RETURN_VALUES}\par
2126 {\cf21 #define DOCTEST_FUNC_SCOPE_BEGIN [&]}\par
2127 {\cf21 #define DOCTEST_FUNC_SCOPE_END ()}\par
2128 {\cf21 #define DOCTEST_FUNC_SCOPE_RET(v) return v}\par
2129 {\cf21 #else}\par
2130 {\cf21 #define DOCTEST_FUNC_SCOPE_BEGIN do}\par
2131 {\cf21 #define DOCTEST_FUNC_SCOPE_END while(false)}\par
2132 {\cf21 #define DOCTEST_FUNC_SCOPE_RET(v) (void)0}\par
2133 {\cf21 #endif}\par
2134 \par
2135 {\cf20 // common code in asserts - for convenience}\par
2136 {\cf21 #define DOCTEST_ASSERT_LOG_REACT_RETURN(b)                                                         \\}\par
2137 {\cf21     if(b.log()) DOCTEST_BREAK_INTO_DEBUGGER();                                                     \\}\par
2138 {\cf21     b.react();                                                                                     \\}\par
2139 {\cf21     DOCTEST_FUNC_SCOPE_RET(!b.m_failed)}\par
2140 \par
2141 {\cf21 #ifdef DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
2142 {\cf21 #define DOCTEST_WRAP_IN_TRY(x) x;}\par
2143 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
2144 {\cf21 #define DOCTEST_WRAP_IN_TRY(x)                                                                     \\}\par
2145 {\cf21     try \{                                                                                          \\}\par
2146 {\cf21         x;                                                                                         \\}\par
2147 {\cf21     \} catch(...) \{ DOCTEST_RB.translateException(); \}}\par
2148 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
2149 \par
2150 {\cf21 #ifdef DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS}\par
2151 {\cf21 #define DOCTEST_CAST_TO_VOID(...)                                                                  \\}\par
2152 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wuseless-cast")                                       \\}\par
2153 {\cf21     static_cast<void>(__VA_ARGS__);                                                                \\}\par
2154 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING_POP}\par
2155 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS}\par
2156 {\cf21 #define DOCTEST_CAST_TO_VOID(...) __VA_ARGS__;}\par
2157 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS}\par
2158 \par
2159 {\cf20 // registers the test by initializing a dummy var with a function}\par
2160 {\cf21 #define DOCTEST_REGISTER_FUNCTION(global_prefix, f, decorators)                                    \\}\par
2161 {\cf21     global_prefix DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), }{\cf20 /* NOLINT */}{\cf21     \\}\par
2162 {\cf21             doctest::detail::regTest(                                                              \\}\par
2163 {\cf21                     doctest::detail::TestCase(                                                     \\}\par
2164 {\cf21                             f, __FILE__, __LINE__,                                                 \\}\par
2165 {\cf21                             doctest_detail_test_suite_ns::getCurrentTestSuite()) *                 \\}\par
2166 {\cf21                     decorators))}\par
2167 \par
2168 {\cf21 #define DOCTEST_IMPLEMENT_FIXTURE(der, base, func, decorators)                                     \\}\par
2169 {\cf21     namespace \{ }{\cf20 /* NOLINT */}{\cf21                                                                        \\}\par
2170 {\cf21         struct der : public base                                                                   \\}\par
2171 {\cf21         \{                                                                                          \\}\par
2172 {\cf21             void f();                                                                              \\}\par
2173 {\cf21         \};                                                                                         \\}\par
2174 {\cf21         static DOCTEST_INLINE_NOINLINE void func() \{                                               \\}\par
2175 {\cf21             der v;                                                                                 \\}\par
2176 {\cf21             v.f();                                                                                 \\}\par
2177 {\cf21         \}                                                                                          \\}\par
2178 {\cf21         DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, func, decorators)                                 \\}\par
2179 {\cf21     \}                                                                                              \\}\par
2180 {\cf21     DOCTEST_INLINE_NOINLINE void der::f() }{\cf20 // NOLINT(misc-definitions-in-headers)}\par
2181 \par
2182 {\cf21 #define DOCTEST_CREATE_AND_REGISTER_FUNCTION(f, decorators)                                        \\}\par
2183 {\cf21     static void f();                                                                               \\}\par
2184 {\cf21     DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, f, decorators)                                        \\}\par
2185 {\cf21     static void f()}\par
2186 \par
2187 {\cf21 #define DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS(f, proxy, decorators)                        \\}\par
2188 {\cf21     static doctest::detail::funcType proxy() \{ return f; \}                                         \\}\par
2189 {\cf21     DOCTEST_REGISTER_FUNCTION(inline, proxy(), decorators)                                         \\}\par
2190 {\cf21     static void f()}\par
2191 \par
2192 {\cf20 // for registering tests}\par
2193 {\cf21 #define DOCTEST_TEST_CASE(decorators)                                                              \\}\par
2194 {\cf21     DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), decorators)}\par
2195 \par
2196 {\cf20 // for registering tests in classes - requires C++17 for inline variables!}\par
2197 {\cf21 #if DOCTEST_CPLUSPLUS >= 201703L}\par
2198 {\cf21 #define DOCTEST_TEST_CASE_CLASS(decorators)                                                        \\}\par
2199 {\cf21     DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_),           \\}\par
2200 {\cf21                                                   DOCTEST_ANONYMOUS(DOCTEST_ANON_PROXY_),          \\}\par
2201 {\cf21                                                   decorators)}\par
2202 {\cf21 #else }{\cf20 // DOCTEST_TEST_CASE_CLASS}\par
2203 {\cf21 #define DOCTEST_TEST_CASE_CLASS(...)                                                               \\}\par
2204 {\cf21     TEST_CASES_CAN_BE_REGISTERED_IN_CLASSES_ONLY_IN_CPP17_MODE_OR_WITH_VS_2017_OR_NEWER}\par
2205 {\cf21 #endif }{\cf20 // DOCTEST_TEST_CASE_CLASS}\par
2206 \par
2207 {\cf20 // for registering tests with a fixture}\par
2208 {\cf21 #define DOCTEST_TEST_CASE_FIXTURE(c, decorators)                                                   \\}\par
2209 {\cf21     DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(DOCTEST_ANON_CLASS_), c,                           \\}\par
2210 {\cf21                               DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), decorators)}\par
2211 \par
2212 {\cf20 // for converting types to strings without the <typeinfo> header and demangling}\par
2213 {\cf21 #define DOCTEST_TYPE_TO_STRING_AS(str, ...)                                                        \\}\par
2214 {\cf21     namespace doctest \{                                                                            \\}\par
2215 {\cf21         template <>                                                                                \\}\par
2216 {\cf21         inline String toString<__VA_ARGS__>() \{                                                    \\}\par
2217 {\cf21             return str;                                                                            \\}\par
2218 {\cf21         \}                                                                                          \\}\par
2219 {\cf21     \}                                                                                              \\}\par
2220 {\cf21     static_assert(true, "")}\par
2221 \par
2222 {\cf21 #define DOCTEST_TYPE_TO_STRING(...) DOCTEST_TYPE_TO_STRING_AS(#__VA_ARGS__, __VA_ARGS__)}\par
2223 \par
2224 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, iter, func)                                 \\}\par
2225 {\cf21     template <typename T>                                                                          \\}\par
2226 {\cf21     static void func();                                                                            \\}\par
2227 {\cf21     namespace \{ }{\cf20 /* NOLINT */}{\cf21                                                                        \\}\par
2228 {\cf21         template <typename Tuple>                                                                  \\}\par
2229 {\cf21         struct iter;                                                                               \\}\par
2230 {\cf21         template <typename Type, typename... Rest>                                                 \\}\par
2231 {\cf21         struct iter<std::tuple<Type, Rest...>>                                                     \\}\par
2232 {\cf21         \{                                                                                          \\}\par
2233 {\cf21             iter(const char* file, unsigned line, int index) \{                                     \\}\par
2234 {\cf21                 doctest::detail::regTest(doctest::detail::TestCase(func<Type>, file, line,         \\}\par
2235 {\cf21                                             doctest_detail_test_suite_ns::getCurrentTestSuite(),   \\}\par
2236 {\cf21                                             doctest::toString<Type>(),                             \\}\par
2237 {\cf21                                             int(line) * 1000 + index)                              \\}\par
2238 {\cf21                                          * dec);                                                   \\}\par
2239 {\cf21                 iter<std::tuple<Rest...>>(file, line, index + 1);                                  \\}\par
2240 {\cf21             \}                                                                                      \\}\par
2241 {\cf21         \};                                                                                         \\}\par
2242 {\cf21         template <>                                                                                \\}\par
2243 {\cf21         struct iter<std::tuple<>>                                                                  \\}\par
2244 {\cf21         \{                                                                                          \\}\par
2245 {\cf21             iter(const char*, unsigned, int) \{\}                                                    \\}\par
2246 {\cf21         \};                                                                                         \\}\par
2247 {\cf21     \}                                                                                              \\}\par
2248 {\cf21     template <typename T>                                                                          \\}\par
2249 {\cf21     static void func()}\par
2250 \par
2251 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_DEFINE(dec, T, id)                                              \\}\par
2252 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT(id, ITERATOR),                      \\}\par
2253 {\cf21                                            DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_))}\par
2254 \par
2255 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id, anon, ...)                                 \\}\par
2256 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_CAT(anon, DUMMY), }{\cf20 /* NOLINT(cert-err58-cpp, fuchsia-statically-constructed-objects) */}{\cf21  \\}\par
2257 {\cf21         doctest::detail::instantiationHelper(                                                      \\}\par
2258 {\cf21             DOCTEST_CAT(id, ITERATOR)<__VA_ARGS__>(__FILE__, __LINE__, 0)))}\par
2259 \par
2260 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id, ...)                                                 \\}\par
2261 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), std::tuple<__VA_ARGS__>) \\}\par
2262 {\cf21     static_assert(true, "")}\par
2263 \par
2264 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_APPLY(id, ...)                                                  \\}\par
2265 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), __VA_ARGS__) \\}\par
2266 {\cf21     static_assert(true, "")}\par
2267 \par
2268 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_IMPL(dec, T, anon, ...)                                         \\}\par
2269 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT(anon, ITERATOR), anon);             \\}\par
2270 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(anon, anon, std::tuple<__VA_ARGS__>)               \\}\par
2271 {\cf21     template <typename T>                                                                          \\}\par
2272 {\cf21     static void anon()}\par
2273 \par
2274 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE(dec, T, ...)                                                    \\}\par
2275 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_IMPL(dec, T, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), __VA_ARGS__)}\par
2276 \par
2277 {\cf20 // for subcases}\par
2278 {\cf21 #define DOCTEST_SUBCASE(name)                                                                      \\}\par
2279 {\cf21     if(const doctest::detail::Subcase & DOCTEST_ANONYMOUS(DOCTEST_ANON_SUBCASE_) DOCTEST_UNUSED =  \\}\par
2280 {\cf21                doctest::detail::Subcase(name, __FILE__, __LINE__))}\par
2281 \par
2282 {\cf20 // for grouping tests in test suites by using code blocks}\par
2283 {\cf21 #define DOCTEST_TEST_SUITE_IMPL(decorators, ns_name)                                               \\}\par
2284 {\cf21     namespace ns_name \{ namespace doctest_detail_test_suite_ns \{                                   \\}\par
2285 {\cf21             static DOCTEST_NOINLINE doctest::detail::TestSuite& getCurrentTestSuite() noexcept \{   \\}\par
2286 {\cf21                 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4640)                                      \\}\par
2287 {\cf21                 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wexit-time-destructors")                \\}\par
2288 {\cf21                 DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wmissing-field-initializers")             \\}\par
2289 {\cf21                 static doctest::detail::TestSuite data\{\};                                          \\}\par
2290 {\cf21                 static bool                       inited = false;                                  \\}\par
2291 {\cf21                 DOCTEST_MSVC_SUPPRESS_WARNING_POP                                                  \\}\par
2292 {\cf21                 DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                 \\}\par
2293 {\cf21                 DOCTEST_GCC_SUPPRESS_WARNING_POP                                                   \\}\par
2294 {\cf21                 if(!inited) \{                                                                      \\}\par
2295 {\cf21                     data* decorators;                                                              \\}\par
2296 {\cf21                     inited = true;                                                                 \\}\par
2297 {\cf21                 \}                                                                                  \\}\par
2298 {\cf21                 return data;                                                                       \\}\par
2299 {\cf21             \}                                                                                      \\}\par
2300 {\cf21         \}                                                                                          \\}\par
2301 {\cf21     \}                                                                                              \\}\par
2302 {\cf21     namespace ns_name}\par
2303 \par
2304 {\cf21 #define DOCTEST_TEST_SUITE(decorators)                                                             \\}\par
2305 {\cf21     DOCTEST_TEST_SUITE_IMPL(decorators, DOCTEST_ANONYMOUS(DOCTEST_ANON_SUITE_))}\par
2306 \par
2307 {\cf20 // for starting a testsuite block}\par
2308 {\cf21 #define DOCTEST_TEST_SUITE_BEGIN(decorators)                                                       \\}\par
2309 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), }{\cf20 /* NOLINT(cert-err58-cpp) */}{\cf21   \\}\par
2310 {\cf21             doctest::detail::setTestSuite(doctest::detail::TestSuite() * decorators))              \\}\par
2311 {\cf21     static_assert(true, "")}\par
2312 \par
2313 {\cf20 // for ending a testsuite block}\par
2314 {\cf21 #define DOCTEST_TEST_SUITE_END                                                                     \\}\par
2315 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), }{\cf20 /* NOLINT(cert-err58-cpp) */}{\cf21   \\}\par
2316 {\cf21             doctest::detail::setTestSuite(doctest::detail::TestSuite() * ""))                      \\}\par
2317 {\cf21     using DOCTEST_ANONYMOUS(DOCTEST_ANON_FOR_SEMICOLON_) = int}\par
2318 \par
2319 {\cf20 // for registering exception translators}\par
2320 {\cf21 #define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(translatorName, signature)                      \\}\par
2321 {\cf21     inline doctest::String translatorName(signature);                                              \\}\par
2322 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_), }{\cf20 /* NOLINT(cert-err58-cpp) */}{\cf21  \\}\par
2323 {\cf21             doctest::registerExceptionTranslator(translatorName))                                  \\}\par
2324 {\cf21     doctest::String translatorName(signature)}\par
2325 \par
2326 {\cf21 #define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)                                           \\}\par
2327 {\cf21     DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_),        \\}\par
2328 {\cf21                                                signature)}\par
2329 \par
2330 {\cf20 // for registering reporters}\par
2331 {\cf21 #define DOCTEST_REGISTER_REPORTER(name, priority, reporter)                                        \\}\par
2332 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_REPORTER_), }{\cf20 /* NOLINT(cert-err58-cpp) */}{\cf21  \\}\par
2333 {\cf21             doctest::registerReporter<reporter>(name, priority, true))                             \\}\par
2334 {\cf21     static_assert(true, "")}\par
2335 \par
2336 {\cf20 // for registering listeners}\par
2337 {\cf21 #define DOCTEST_REGISTER_LISTENER(name, priority, reporter)                                        \\}\par
2338 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_REPORTER_), }{\cf20 /* NOLINT(cert-err58-cpp) */}{\cf21  \\}\par
2339 {\cf21             doctest::registerReporter<reporter>(name, priority, false))                            \\}\par
2340 {\cf21     static_assert(true, "")}\par
2341 \par
2342 {\cf20 // clang-format off}\par
2343 {\cf20 // for logging - disabling formatting because it's important to have these on 2 separate lines - see PR #557}\par
2344 {\cf21 #define DOCTEST_INFO(...)                                                                          \\}\par
2345 {\cf21     DOCTEST_INFO_IMPL(DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_),                                         \\}\par
2346 {\cf21                       DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_OTHER_),                                   \\}\par
2347 {\cf21                       __VA_ARGS__)}\par
2348 {\cf20 // clang-format on}\par
2349 \par
2350 {\cf21 #define DOCTEST_INFO_IMPL(mb_name, s_name, ...)                                       \\}\par
2351 {\cf21     auto DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_) = doctest::detail::MakeContextScope(                  \\}\par
2352 {\cf21         [&](std::ostream* s_name) \{                                                                \\}\par
2353 {\cf21         doctest::detail::MessageBuilder mb_name(__FILE__, __LINE__, doctest::assertType::is_warn); \\}\par
2354 {\cf21         mb_name.m_stream = s_name;                                                                 \\}\par
2355 {\cf21         mb_name * __VA_ARGS__;                                                                     \\}\par
2356 {\cf21     \})}\par
2357 \par
2358 {\cf21 #define DOCTEST_CAPTURE(x) DOCTEST_INFO(#x " := ", x)}\par
2359 \par
2360 {\cf21 #define DOCTEST_ADD_AT_IMPL(type, file, line, mb, ...)                                             \\}\par
2361 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2362 {\cf21         doctest::detail::MessageBuilder mb(file, line, doctest::assertType::type);                 \\}\par
2363 {\cf21         mb * __VA_ARGS__;                                                                          \\}\par
2364 {\cf21         if(mb.log())                                                                               \\}\par
2365 {\cf21             DOCTEST_BREAK_INTO_DEBUGGER();                                                         \\}\par
2366 {\cf21         mb.react();                                                                                \\}\par
2367 {\cf21     \} DOCTEST_FUNC_SCOPE_END}\par
2368 \par
2369 {\cf20 // clang-format off}\par
2370 {\cf21 #define DOCTEST_ADD_MESSAGE_AT(file, line, ...) DOCTEST_ADD_AT_IMPL(is_warn, file, line, DOCTEST_ANONYMOUS(DOCTEST_MESSAGE_), __VA_ARGS__)}\par
2371 {\cf21 #define DOCTEST_ADD_FAIL_CHECK_AT(file, line, ...) DOCTEST_ADD_AT_IMPL(is_check, file, line, DOCTEST_ANONYMOUS(DOCTEST_MESSAGE_), __VA_ARGS__)}\par
2372 {\cf21 #define DOCTEST_ADD_FAIL_AT(file, line, ...) DOCTEST_ADD_AT_IMPL(is_require, file, line, DOCTEST_ANONYMOUS(DOCTEST_MESSAGE_), __VA_ARGS__)}\par
2373 {\cf20 // clang-format on}\par
2374 \par
2375 {\cf21 #define DOCTEST_MESSAGE(...) DOCTEST_ADD_MESSAGE_AT(__FILE__, __LINE__, __VA_ARGS__)}\par
2376 {\cf21 #define DOCTEST_FAIL_CHECK(...) DOCTEST_ADD_FAIL_CHECK_AT(__FILE__, __LINE__, __VA_ARGS__)}\par
2377 {\cf21 #define DOCTEST_FAIL(...) DOCTEST_ADD_FAIL_AT(__FILE__, __LINE__, __VA_ARGS__)}\par
2378 \par
2379 {\cf21 #define DOCTEST_TO_LVALUE(...) __VA_ARGS__ }{\cf20 // Not removed to keep backwards compatibility.}\par
2380 \par
2381 {\cf21 #ifndef DOCTEST_CONFIG_SUPER_FAST_ASSERTS}\par
2382 \par
2383 {\cf21 #define DOCTEST_ASSERT_IMPLEMENT_2(assert_type, ...)                                               \\}\par
2384 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Woverloaded-shift-op-parentheses")                  \\}\par
2385 {\cf21     }{\cf20 /* NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks) */}{\cf21                                   \\}\par
2386 {\cf21     doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,          \\}\par
2387 {\cf21                                                __LINE__, #__VA_ARGS__);                            \\}\par
2388 {\cf21     DOCTEST_WRAP_IN_TRY(DOCTEST_RB.setResult(                                                      \\}\par
2389 {\cf21             doctest::detail::ExpressionDecomposer(doctest::assertType::assert_type)                \\}\par
2390 {\cf21             << __VA_ARGS__)) }{\cf20 /* NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks) */}{\cf21          \\}\par
2391 {\cf21     DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB)                                                    \\}\par
2392 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
2393 \par
2394 {\cf21 #define DOCTEST_ASSERT_IMPLEMENT_1(assert_type, ...)                                               \\}\par
2395 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2396 {\cf21         DOCTEST_ASSERT_IMPLEMENT_2(assert_type, __VA_ARGS__);                                      \\}\par
2397 {\cf21     \} DOCTEST_FUNC_SCOPE_END }{\cf20 // NOLINT(clang-analyzer-cplusplus.NewDeleteLeaks)}\par
2398 \par
2399 {\cf21 #define DOCTEST_BINARY_ASSERT(assert_type, comp, ...)                                              \\}\par
2400 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2401 {\cf21         doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\}\par
2402 {\cf21                                                    __LINE__, #__VA_ARGS__);                        \\}\par
2403 {\cf21         DOCTEST_WRAP_IN_TRY(                                                                       \\}\par
2404 {\cf21                 DOCTEST_RB.binary_assert<doctest::detail::binaryAssertComparison::comp>(           \\}\par
2405 {\cf21                         __VA_ARGS__))                                                              \\}\par
2406 {\cf21         DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\}\par
2407 {\cf21     \} DOCTEST_FUNC_SCOPE_END}\par
2408 \par
2409 {\cf21 #define DOCTEST_UNARY_ASSERT(assert_type, ...)                                                     \\}\par
2410 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2411 {\cf21         doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\}\par
2412 {\cf21                                                    __LINE__, #__VA_ARGS__);                        \\}\par
2413 {\cf21         DOCTEST_WRAP_IN_TRY(DOCTEST_RB.unary_assert(__VA_ARGS__))                                  \\}\par
2414 {\cf21         DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\}\par
2415 {\cf21     \} DOCTEST_FUNC_SCOPE_END}\par
2416 \par
2417 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_SUPER_FAST_ASSERTS}\par
2418 \par
2419 {\cf20 // necessary for <ASSERT>_MESSAGE}\par
2420 {\cf21 #define DOCTEST_ASSERT_IMPLEMENT_2 DOCTEST_ASSERT_IMPLEMENT_1}\par
2421 \par
2422 {\cf21 #define DOCTEST_ASSERT_IMPLEMENT_1(assert_type, ...)                                               \\}\par
2423 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Woverloaded-shift-op-parentheses")                  \\}\par
2424 {\cf21     doctest::detail::decomp_assert(                                                                \\}\par
2425 {\cf21             doctest::assertType::assert_type, __FILE__, __LINE__, #__VA_ARGS__,                    \\}\par
2426 {\cf21             doctest::detail::ExpressionDecomposer(doctest::assertType::assert_type)                \\}\par
2427 {\cf21                     << __VA_ARGS__) DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
2428 \par
2429 {\cf21 #define DOCTEST_BINARY_ASSERT(assert_type, comparison, ...)                                        \\}\par
2430 {\cf21     doctest::detail::binary_assert<doctest::detail::binaryAssertComparison::comparison>(           \\}\par
2431 {\cf21             doctest::assertType::assert_type, __FILE__, __LINE__, #__VA_ARGS__, __VA_ARGS__)}\par
2432 \par
2433 {\cf21 #define DOCTEST_UNARY_ASSERT(assert_type, ...)                                                     \\}\par
2434 {\cf21     doctest::detail::unary_assert(doctest::assertType::assert_type, __FILE__, __LINE__,            \\}\par
2435 {\cf21                                   #__VA_ARGS__, __VA_ARGS__)}\par
2436 \par
2437 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_SUPER_FAST_ASSERTS}\par
2438 \par
2439 {\cf21 #define DOCTEST_WARN(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_WARN, __VA_ARGS__)}\par
2440 {\cf21 #define DOCTEST_CHECK(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_CHECK, __VA_ARGS__)}\par
2441 {\cf21 #define DOCTEST_REQUIRE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_REQUIRE, __VA_ARGS__)}\par
2442 {\cf21 #define DOCTEST_WARN_FALSE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_WARN_FALSE, __VA_ARGS__)}\par
2443 {\cf21 #define DOCTEST_CHECK_FALSE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_CHECK_FALSE, __VA_ARGS__)}\par
2444 {\cf21 #define DOCTEST_REQUIRE_FALSE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_REQUIRE_FALSE, __VA_ARGS__)}\par
2445 \par
2446 {\cf20 // clang-format off}\par
2447 {\cf21 #define DOCTEST_WARN_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_WARN, cond); \} DOCTEST_FUNC_SCOPE_END}\par
2448 {\cf21 #define DOCTEST_CHECK_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_CHECK, cond); \} DOCTEST_FUNC_SCOPE_END}\par
2449 {\cf21 #define DOCTEST_REQUIRE_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_REQUIRE, cond); \} DOCTEST_FUNC_SCOPE_END}\par
2450 {\cf21 #define DOCTEST_WARN_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_WARN_FALSE, cond); \} DOCTEST_FUNC_SCOPE_END}\par
2451 {\cf21 #define DOCTEST_CHECK_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_CHECK_FALSE, cond); \} DOCTEST_FUNC_SCOPE_END}\par
2452 {\cf21 #define DOCTEST_REQUIRE_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_REQUIRE_FALSE, cond); \} DOCTEST_FUNC_SCOPE_END}\par
2453 {\cf20 // clang-format on}\par
2454 \par
2455 {\cf21 #define DOCTEST_WARN_EQ(...) DOCTEST_BINARY_ASSERT(DT_WARN_EQ, eq, __VA_ARGS__)}\par
2456 {\cf21 #define DOCTEST_CHECK_EQ(...) DOCTEST_BINARY_ASSERT(DT_CHECK_EQ, eq, __VA_ARGS__)}\par
2457 {\cf21 #define DOCTEST_REQUIRE_EQ(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_EQ, eq, __VA_ARGS__)}\par
2458 {\cf21 #define DOCTEST_WARN_NE(...) DOCTEST_BINARY_ASSERT(DT_WARN_NE, ne, __VA_ARGS__)}\par
2459 {\cf21 #define DOCTEST_CHECK_NE(...) DOCTEST_BINARY_ASSERT(DT_CHECK_NE, ne, __VA_ARGS__)}\par
2460 {\cf21 #define DOCTEST_REQUIRE_NE(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_NE, ne, __VA_ARGS__)}\par
2461 {\cf21 #define DOCTEST_WARN_GT(...) DOCTEST_BINARY_ASSERT(DT_WARN_GT, gt, __VA_ARGS__)}\par
2462 {\cf21 #define DOCTEST_CHECK_GT(...) DOCTEST_BINARY_ASSERT(DT_CHECK_GT, gt, __VA_ARGS__)}\par
2463 {\cf21 #define DOCTEST_REQUIRE_GT(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_GT, gt, __VA_ARGS__)}\par
2464 {\cf21 #define DOCTEST_WARN_LT(...) DOCTEST_BINARY_ASSERT(DT_WARN_LT, lt, __VA_ARGS__)}\par
2465 {\cf21 #define DOCTEST_CHECK_LT(...) DOCTEST_BINARY_ASSERT(DT_CHECK_LT, lt, __VA_ARGS__)}\par
2466 {\cf21 #define DOCTEST_REQUIRE_LT(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_LT, lt, __VA_ARGS__)}\par
2467 {\cf21 #define DOCTEST_WARN_GE(...) DOCTEST_BINARY_ASSERT(DT_WARN_GE, ge, __VA_ARGS__)}\par
2468 {\cf21 #define DOCTEST_CHECK_GE(...) DOCTEST_BINARY_ASSERT(DT_CHECK_GE, ge, __VA_ARGS__)}\par
2469 {\cf21 #define DOCTEST_REQUIRE_GE(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_GE, ge, __VA_ARGS__)}\par
2470 {\cf21 #define DOCTEST_WARN_LE(...) DOCTEST_BINARY_ASSERT(DT_WARN_LE, le, __VA_ARGS__)}\par
2471 {\cf21 #define DOCTEST_CHECK_LE(...) DOCTEST_BINARY_ASSERT(DT_CHECK_LE, le, __VA_ARGS__)}\par
2472 {\cf21 #define DOCTEST_REQUIRE_LE(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_LE, le, __VA_ARGS__)}\par
2473 \par
2474 {\cf21 #define DOCTEST_WARN_UNARY(...) DOCTEST_UNARY_ASSERT(DT_WARN_UNARY, __VA_ARGS__)}\par
2475 {\cf21 #define DOCTEST_CHECK_UNARY(...) DOCTEST_UNARY_ASSERT(DT_CHECK_UNARY, __VA_ARGS__)}\par
2476 {\cf21 #define DOCTEST_REQUIRE_UNARY(...) DOCTEST_UNARY_ASSERT(DT_REQUIRE_UNARY, __VA_ARGS__)}\par
2477 {\cf21 #define DOCTEST_WARN_UNARY_FALSE(...) DOCTEST_UNARY_ASSERT(DT_WARN_UNARY_FALSE, __VA_ARGS__)}\par
2478 {\cf21 #define DOCTEST_CHECK_UNARY_FALSE(...) DOCTEST_UNARY_ASSERT(DT_CHECK_UNARY_FALSE, __VA_ARGS__)}\par
2479 {\cf21 #define DOCTEST_REQUIRE_UNARY_FALSE(...) DOCTEST_UNARY_ASSERT(DT_REQUIRE_UNARY_FALSE, __VA_ARGS__)}\par
2480 \par
2481 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2482 \par
2483 {\cf21 #define DOCTEST_ASSERT_THROWS_AS(expr, assert_type, message, ...)                                  \\}\par
2484 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2485 {\cf21         if(!doctest::getContextOptions()->no_throw) \{                                              \\}\par
2486 {\cf21             doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,  \\}\par
2487 {\cf21                                                        __LINE__, #expr, #__VA_ARGS__, message);    \\}\par
2488 {\cf21             try \{                                                                                  \\}\par
2489 {\cf21                 DOCTEST_CAST_TO_VOID(expr)                                                         \\}\par
2490 {\cf21             \} catch(const typename doctest::detail::types::remove_const<                           \\}\par
2491 {\cf21                     typename doctest::detail::types::remove_reference<__VA_ARGS__>::type>::type&) \{\\}\par
2492 {\cf21                 DOCTEST_RB.translateException();                                                   \\}\par
2493 {\cf21                 DOCTEST_RB.m_threw_as = true;                                                      \\}\par
2494 {\cf21             \} catch(...) \{ DOCTEST_RB.translateException(); \}                                      \\}\par
2495 {\cf21             DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                           \\}\par
2496 {\cf21         \} else \{ }{\cf20 /* NOLINT(*-else-after-return) */}{\cf21                                                  \\}\par
2497 {\cf21             DOCTEST_FUNC_SCOPE_RET(false);                                                         \\}\par
2498 {\cf21         \}                                                                                          \\}\par
2499 {\cf21     \} DOCTEST_FUNC_SCOPE_END}\par
2500 \par
2501 {\cf21 #define DOCTEST_ASSERT_THROWS_WITH(expr, expr_str, assert_type, ...)                               \\}\par
2502 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2503 {\cf21         if(!doctest::getContextOptions()->no_throw) \{                                              \\}\par
2504 {\cf21             doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,  \\}\par
2505 {\cf21                                                        __LINE__, expr_str, "", __VA_ARGS__);       \\}\par
2506 {\cf21             try \{                                                                                  \\}\par
2507 {\cf21                 DOCTEST_CAST_TO_VOID(expr)                                                         \\}\par
2508 {\cf21             \} catch(...) \{ DOCTEST_RB.translateException(); \}                                      \\}\par
2509 {\cf21             DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                           \\}\par
2510 {\cf21         \} else \{ }{\cf20 /* NOLINT(*-else-after-return) */}{\cf21                                                  \\}\par
2511 {\cf21            DOCTEST_FUNC_SCOPE_RET(false);                                                          \\}\par
2512 {\cf21         \}                                                                                          \\}\par
2513 {\cf21     \} DOCTEST_FUNC_SCOPE_END}\par
2514 \par
2515 {\cf21 #define DOCTEST_ASSERT_NOTHROW(assert_type, ...)                                                   \\}\par
2516 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2517 {\cf21         doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\}\par
2518 {\cf21                                                    __LINE__, #__VA_ARGS__);                        \\}\par
2519 {\cf21         try \{                                                                                      \\}\par
2520 {\cf21             DOCTEST_CAST_TO_VOID(__VA_ARGS__)                                                      \\}\par
2521 {\cf21         \} catch(...) \{ DOCTEST_RB.translateException(); \}                                          \\}\par
2522 {\cf21         DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\}\par
2523 {\cf21     \} DOCTEST_FUNC_SCOPE_END}\par
2524 \par
2525 {\cf20 // clang-format off}\par
2526 {\cf21 #define DOCTEST_WARN_THROWS(...) DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__), #__VA_ARGS__, DT_WARN_THROWS, "")}\par
2527 {\cf21 #define DOCTEST_CHECK_THROWS(...) DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__), #__VA_ARGS__, DT_CHECK_THROWS, "")}\par
2528 {\cf21 #define DOCTEST_REQUIRE_THROWS(...) DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__), #__VA_ARGS__, DT_REQUIRE_THROWS, "")}\par
2529 \par
2530 {\cf21 #define DOCTEST_WARN_THROWS_AS(expr, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_WARN_THROWS_AS, "", __VA_ARGS__)}\par
2531 {\cf21 #define DOCTEST_CHECK_THROWS_AS(expr, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_CHECK_THROWS_AS, "", __VA_ARGS__)}\par
2532 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS(expr, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_REQUIRE_THROWS_AS, "", __VA_ARGS__)}\par
2533 \par
2534 {\cf21 #define DOCTEST_WARN_THROWS_WITH(expr, ...) DOCTEST_ASSERT_THROWS_WITH(expr, #expr, DT_WARN_THROWS_WITH, __VA_ARGS__)}\par
2535 {\cf21 #define DOCTEST_CHECK_THROWS_WITH(expr, ...) DOCTEST_ASSERT_THROWS_WITH(expr, #expr, DT_CHECK_THROWS_WITH, __VA_ARGS__)}\par
2536 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH(expr, ...) DOCTEST_ASSERT_THROWS_WITH(expr, #expr, DT_REQUIRE_THROWS_WITH, __VA_ARGS__)}\par
2537 \par
2538 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS(expr, message, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_WARN_THROWS_WITH_AS, message, __VA_ARGS__)}\par
2539 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS(expr, message, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_CHECK_THROWS_WITH_AS, message, __VA_ARGS__)}\par
2540 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, message, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_REQUIRE_THROWS_WITH_AS, message, __VA_ARGS__)}\par
2541 \par
2542 {\cf21 #define DOCTEST_WARN_NOTHROW(...) DOCTEST_ASSERT_NOTHROW(DT_WARN_NOTHROW, __VA_ARGS__)}\par
2543 {\cf21 #define DOCTEST_CHECK_NOTHROW(...) DOCTEST_ASSERT_NOTHROW(DT_CHECK_NOTHROW, __VA_ARGS__)}\par
2544 {\cf21 #define DOCTEST_REQUIRE_NOTHROW(...) DOCTEST_ASSERT_NOTHROW(DT_REQUIRE_NOTHROW, __VA_ARGS__)}\par
2545 \par
2546 {\cf21 #define DOCTEST_WARN_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_THROWS(expr); \} DOCTEST_FUNC_SCOPE_END}\par
2547 {\cf21 #define DOCTEST_CHECK_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_THROWS(expr); \} DOCTEST_FUNC_SCOPE_END}\par
2548 {\cf21 #define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_THROWS(expr); \} DOCTEST_FUNC_SCOPE_END}\par
2549 {\cf21 #define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_THROWS_AS(expr, ex); \} DOCTEST_FUNC_SCOPE_END}\par
2550 {\cf21 #define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_THROWS_AS(expr, ex); \} DOCTEST_FUNC_SCOPE_END}\par
2551 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_THROWS_AS(expr, ex); \} DOCTEST_FUNC_SCOPE_END}\par
2552 {\cf21 #define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_THROWS_WITH(expr, with); \} DOCTEST_FUNC_SCOPE_END}\par
2553 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_THROWS_WITH(expr, with); \} DOCTEST_FUNC_SCOPE_END}\par
2554 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_THROWS_WITH(expr, with); \} DOCTEST_FUNC_SCOPE_END}\par
2555 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_THROWS_WITH_AS(expr, with, ex); \} DOCTEST_FUNC_SCOPE_END}\par
2556 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ex); \} DOCTEST_FUNC_SCOPE_END}\par
2557 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ex); \} DOCTEST_FUNC_SCOPE_END}\par
2558 {\cf21 #define DOCTEST_WARN_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_NOTHROW(expr); \} DOCTEST_FUNC_SCOPE_END}\par
2559 {\cf21 #define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_NOTHROW(expr); \} DOCTEST_FUNC_SCOPE_END}\par
2560 {\cf21 #define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_NOTHROW(expr); \} DOCTEST_FUNC_SCOPE_END}\par
2561 {\cf20 // clang-format on}\par
2562 \par
2563 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2564 \par
2565 {\cf20 // =================================================================================================}\par
2566 {\cf20 // == WHAT FOLLOWS IS VERSIONS OF THE MACROS THAT DO NOT DO ANY REGISTERING!                      ==}\par
2567 {\cf20 // == THIS CAN BE ENABLED BY DEFINING DOCTEST_CONFIG_DISABLE GLOBALLY!                            ==}\par
2568 {\cf20 // =================================================================================================}\par
2569 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
2570 \par
2571 {\cf21 #define DOCTEST_IMPLEMENT_FIXTURE(der, base, func, name)                                           \\}\par
2572 {\cf21     namespace }{\cf20 /* NOLINT */}{\cf21  \{                                                                       \\}\par
2573 {\cf21         template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                           \\}\par
2574 {\cf21         struct der : public base                                                                   \\}\par
2575 {\cf21         \{ void f(); \};                                                                             \\}\par
2576 {\cf21     \}                                                                                              \\}\par
2577 {\cf21     template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                               \\}\par
2578 {\cf21     inline void der<DOCTEST_UNUSED_TEMPLATE_TYPE>::f()}\par
2579 \par
2580 {\cf21 #define DOCTEST_CREATE_AND_REGISTER_FUNCTION(f, name)                                              \\}\par
2581 {\cf21     template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                               \\}\par
2582 {\cf21     static inline void f()}\par
2583 \par
2584 {\cf20 // for registering tests}\par
2585 {\cf21 #define DOCTEST_TEST_CASE(name)                                                                    \\}\par
2586 {\cf21     DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), name)}\par
2587 \par
2588 {\cf20 // for registering tests in classes}\par
2589 {\cf21 #define DOCTEST_TEST_CASE_CLASS(name)                                                              \\}\par
2590 {\cf21     DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), name)}\par
2591 \par
2592 {\cf20 // for registering tests with a fixture}\par
2593 {\cf21 #define DOCTEST_TEST_CASE_FIXTURE(x, name)                                                         \\}\par
2594 {\cf21     DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(DOCTEST_ANON_CLASS_), x,                           \\}\par
2595 {\cf21                               DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), name)}\par
2596 \par
2597 {\cf20 // for converting types to strings without the <typeinfo> header and demangling}\par
2598 {\cf21 #define DOCTEST_TYPE_TO_STRING_AS(str, ...) static_assert(true, "")}\par
2599 {\cf21 #define DOCTEST_TYPE_TO_STRING(...) static_assert(true, "")}\par
2600 \par
2601 {\cf20 // for typed tests}\par
2602 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE(name, type, ...)                                                \\}\par
2603 {\cf21     template <typename type>                                                                       \\}\par
2604 {\cf21     inline void DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_)()}\par
2605 \par
2606 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_DEFINE(name, type, id)                                          \\}\par
2607 {\cf21     template <typename type>                                                                       \\}\par
2608 {\cf21     inline void DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_)()}\par
2609 \par
2610 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id, ...) static_assert(true, "")}\par
2611 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_APPLY(id, ...) static_assert(true, "")}\par
2612 \par
2613 {\cf20 // for subcases}\par
2614 {\cf21 #define DOCTEST_SUBCASE(name)}\par
2615 \par
2616 {\cf20 // for a testsuite block}\par
2617 {\cf21 #define DOCTEST_TEST_SUITE(name) namespace }{\cf20 // NOLINT}\par
2618 \par
2619 {\cf20 // for starting a testsuite block}\par
2620 {\cf21 #define DOCTEST_TEST_SUITE_BEGIN(name) static_assert(true, "")}\par
2621 \par
2622 {\cf20 // for ending a testsuite block}\par
2623 {\cf21 #define DOCTEST_TEST_SUITE_END using DOCTEST_ANONYMOUS(DOCTEST_ANON_FOR_SEMICOLON_) = int}\par
2624 \par
2625 {\cf21 #define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)                                           \\}\par
2626 {\cf21     template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                               \\}\par
2627 {\cf21     static inline doctest::String DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_)(signature)}\par
2628 \par
2629 {\cf21 #define DOCTEST_REGISTER_REPORTER(name, priority, reporter)}\par
2630 {\cf21 #define DOCTEST_REGISTER_LISTENER(name, priority, reporter)}\par
2631 \par
2632 {\cf21 #define DOCTEST_INFO(...) (static_cast<void>(0))}\par
2633 {\cf21 #define DOCTEST_CAPTURE(x) (static_cast<void>(0))}\par
2634 {\cf21 #define DOCTEST_ADD_MESSAGE_AT(file, line, ...) (static_cast<void>(0))}\par
2635 {\cf21 #define DOCTEST_ADD_FAIL_CHECK_AT(file, line, ...) (static_cast<void>(0))}\par
2636 {\cf21 #define DOCTEST_ADD_FAIL_AT(file, line, ...) (static_cast<void>(0))}\par
2637 {\cf21 #define DOCTEST_MESSAGE(...) (static_cast<void>(0))}\par
2638 {\cf21 #define DOCTEST_FAIL_CHECK(...) (static_cast<void>(0))}\par
2639 {\cf21 #define DOCTEST_FAIL(...) (static_cast<void>(0))}\par
2640 \par
2641 {\cf21 #if defined(DOCTEST_CONFIG_EVALUATE_ASSERTS_EVEN_WHEN_DISABLED)                                    \\}\par
2642 {\cf21  && defined(DOCTEST_CONFIG_ASSERTS_RETURN_VALUES)}\par
2643 \par
2644 {\cf21 #define DOCTEST_WARN(...) [&] \{ return __VA_ARGS__; \}()}\par
2645 {\cf21 #define DOCTEST_CHECK(...) [&] \{ return __VA_ARGS__; \}()}\par
2646 {\cf21 #define DOCTEST_REQUIRE(...) [&] \{ return __VA_ARGS__; \}()}\par
2647 {\cf21 #define DOCTEST_WARN_FALSE(...) [&] \{ return !(__VA_ARGS__); \}()}\par
2648 {\cf21 #define DOCTEST_CHECK_FALSE(...) [&] \{ return !(__VA_ARGS__); \}()}\par
2649 {\cf21 #define DOCTEST_REQUIRE_FALSE(...) [&] \{ return !(__VA_ARGS__); \}()}\par
2650 \par
2651 {\cf21 #define DOCTEST_WARN_MESSAGE(cond, ...) [&] \{ return cond; \}()}\par
2652 {\cf21 #define DOCTEST_CHECK_MESSAGE(cond, ...) [&] \{ return cond; \}()}\par
2653 {\cf21 #define DOCTEST_REQUIRE_MESSAGE(cond, ...) [&] \{ return cond; \}()}\par
2654 {\cf21 #define DOCTEST_WARN_FALSE_MESSAGE(cond, ...) [&] \{ return !(cond); \}()}\par
2655 {\cf21 #define DOCTEST_CHECK_FALSE_MESSAGE(cond, ...) [&] \{ return !(cond); \}()}\par
2656 {\cf21 #define DOCTEST_REQUIRE_FALSE_MESSAGE(cond, ...) [&] \{ return !(cond); \}()}\par
2657 \par
2658 {\cf17 namespace }doctest \{\par
2659 {\cf17 namespace }detail \{\par
2660 {\cf21 #define DOCTEST_RELATIONAL_OP(name, op)                                                            \\}\par
2661 {\cf21     template <typename L, typename R>                                                              \\}\par
2662 {\cf21     bool name(const DOCTEST_REF_WRAP(L) lhs, const DOCTEST_REF_WRAP(R) rhs) \{ return lhs op rhs; \}}\par
2663 \par
2664     DOCTEST_RELATIONAL_OP(eq, ==)\par
2665     DOCTEST_RELATIONAL_OP(ne, !=)\par
2666     DOCTEST_RELATIONAL_OP(lt, <)\par
2667     DOCTEST_RELATIONAL_OP(gt, >)\par
2668     DOCTEST_RELATIONAL_OP(le, <=)\par
2669     DOCTEST_RELATIONAL_OP(ge, >=)\par
2670 \} {\cf20 // namespace detail}\par
2671 \} {\cf20 // namespace doctest}\par
2672 \par
2673 {\cf21 #define DOCTEST_WARN_EQ(...) [&] \{ return doctest::detail::eq(__VA_ARGS__); \}()}\par
2674 {\cf21 #define DOCTEST_CHECK_EQ(...) [&] \{ return doctest::detail::eq(__VA_ARGS__); \}()}\par
2675 {\cf21 #define DOCTEST_REQUIRE_EQ(...) [&] \{ return doctest::detail::eq(__VA_ARGS__); \}()}\par
2676 {\cf21 #define DOCTEST_WARN_NE(...) [&] \{ return doctest::detail::ne(__VA_ARGS__); \}()}\par
2677 {\cf21 #define DOCTEST_CHECK_NE(...) [&] \{ return doctest::detail::ne(__VA_ARGS__); \}()}\par
2678 {\cf21 #define DOCTEST_REQUIRE_NE(...) [&] \{ return doctest::detail::ne(__VA_ARGS__); \}()}\par
2679 {\cf21 #define DOCTEST_WARN_LT(...) [&] \{ return doctest::detail::lt(__VA_ARGS__); \}()}\par
2680 {\cf21 #define DOCTEST_CHECK_LT(...) [&] \{ return doctest::detail::lt(__VA_ARGS__); \}()}\par
2681 {\cf21 #define DOCTEST_REQUIRE_LT(...) [&] \{ return doctest::detail::lt(__VA_ARGS__); \}()}\par
2682 {\cf21 #define DOCTEST_WARN_GT(...) [&] \{ return doctest::detail::gt(__VA_ARGS__); \}()}\par
2683 {\cf21 #define DOCTEST_CHECK_GT(...) [&] \{ return doctest::detail::gt(__VA_ARGS__); \}()}\par
2684 {\cf21 #define DOCTEST_REQUIRE_GT(...) [&] \{ return doctest::detail::gt(__VA_ARGS__); \}()}\par
2685 {\cf21 #define DOCTEST_WARN_LE(...) [&] \{ return doctest::detail::le(__VA_ARGS__); \}()}\par
2686 {\cf21 #define DOCTEST_CHECK_LE(...) [&] \{ return doctest::detail::le(__VA_ARGS__); \}()}\par
2687 {\cf21 #define DOCTEST_REQUIRE_LE(...) [&] \{ return doctest::detail::le(__VA_ARGS__); \}()}\par
2688 {\cf21 #define DOCTEST_WARN_GE(...) [&] \{ return doctest::detail::ge(__VA_ARGS__); \}()}\par
2689 {\cf21 #define DOCTEST_CHECK_GE(...) [&] \{ return doctest::detail::ge(__VA_ARGS__); \}()}\par
2690 {\cf21 #define DOCTEST_REQUIRE_GE(...) [&] \{ return doctest::detail::ge(__VA_ARGS__); \}()}\par
2691 {\cf21 #define DOCTEST_WARN_UNARY(...) [&] \{ return __VA_ARGS__; \}()}\par
2692 {\cf21 #define DOCTEST_CHECK_UNARY(...) [&] \{ return __VA_ARGS__; \}()}\par
2693 {\cf21 #define DOCTEST_REQUIRE_UNARY(...) [&] \{ return __VA_ARGS__; \}()}\par
2694 {\cf21 #define DOCTEST_WARN_UNARY_FALSE(...) [&] \{ return !(__VA_ARGS__); \}()}\par
2695 {\cf21 #define DOCTEST_CHECK_UNARY_FALSE(...) [&] \{ return !(__VA_ARGS__); \}()}\par
2696 {\cf21 #define DOCTEST_REQUIRE_UNARY_FALSE(...) [&] \{ return !(__VA_ARGS__); \}()}\par
2697 \par
2698 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2699 \par
2700 {\cf21 #define DOCTEST_WARN_THROWS_WITH(expr, with, ...) [] \{ static_assert(false, "Exception translation is not available when doctest is disabled."); return false; \}()}\par
2701 {\cf21 #define DOCTEST_CHECK_THROWS_WITH(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2702 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2703 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2704 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2705 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2706 \par
2707 {\cf21 #define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2708 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2709 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2710 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2711 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2712 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2713 \par
2714 {\cf21 #define DOCTEST_WARN_THROWS(...) [&] \{ try \{ __VA_ARGS__; return false; \} catch (...) \{ return true; \} \}()}\par
2715 {\cf21 #define DOCTEST_CHECK_THROWS(...) [&] \{ try \{ __VA_ARGS__; return false; \} catch (...) \{ return true; \} \}()}\par
2716 {\cf21 #define DOCTEST_REQUIRE_THROWS(...) [&] \{ try \{ __VA_ARGS__; return false; \} catch (...) \{ return true; \} \}()}\par
2717 {\cf21 #define DOCTEST_WARN_THROWS_AS(expr, ...) [&] \{ try \{ expr; \} catch (__VA_ARGS__) \{ return true; \} catch (...) \{ \} return false; \}()}\par
2718 {\cf21 #define DOCTEST_CHECK_THROWS_AS(expr, ...) [&] \{ try \{ expr; \} catch (__VA_ARGS__) \{ return true; \} catch (...) \{ \} return false; \}()}\par
2719 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS(expr, ...) [&] \{ try \{ expr; \} catch (__VA_ARGS__) \{ return true; \} catch (...) \{ \} return false; \}()}\par
2720 {\cf21 #define DOCTEST_WARN_NOTHROW(...) [&] \{ try \{ __VA_ARGS__; return true; \} catch (...) \{ return false; \} \}()}\par
2721 {\cf21 #define DOCTEST_CHECK_NOTHROW(...) [&] \{ try \{ __VA_ARGS__; return true; \} catch (...) \{ return false; \} \}()}\par
2722 {\cf21 #define DOCTEST_REQUIRE_NOTHROW(...) [&] \{ try \{ __VA_ARGS__; return true; \} catch (...) \{ return false; \} \}()}\par
2723 \par
2724 {\cf21 #define DOCTEST_WARN_THROWS_MESSAGE(expr, ...) [&] \{ try \{ __VA_ARGS__; return false; \} catch (...) \{ return true; \} \}()}\par
2725 {\cf21 #define DOCTEST_CHECK_THROWS_MESSAGE(expr, ...) [&] \{ try \{ __VA_ARGS__; return false; \} catch (...) \{ return true; \} \}()}\par
2726 {\cf21 #define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, ...) [&] \{ try \{ __VA_ARGS__; return false; \} catch (...) \{ return true; \} \}()}\par
2727 {\cf21 #define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, ...) [&] \{ try \{ expr; \} catch (__VA_ARGS__) \{ return true; \} catch (...) \{ \} return false; \}()}\par
2728 {\cf21 #define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, ...) [&] \{ try \{ expr; \} catch (__VA_ARGS__) \{ return true; \} catch (...) \{ \} return false; \}()}\par
2729 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) [&] \{ try \{ expr; \} catch (__VA_ARGS__) \{ return true; \} catch (...) \{ \} return false; \}()}\par
2730 {\cf21 #define DOCTEST_WARN_NOTHROW_MESSAGE(expr, ...) [&] \{ try \{ __VA_ARGS__; return true; \} catch (...) \{ return false; \} \}()}\par
2731 {\cf21 #define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, ...) [&] \{ try \{ __VA_ARGS__; return true; \} catch (...) \{ return false; \} \}()}\par
2732 {\cf21 #define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, ...) [&] \{ try \{ __VA_ARGS__; return true; \} catch (...) \{ return false; \} \}()}\par
2733 \par
2734 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2735 \par
2736 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_EVALUATE_ASSERTS_EVEN_WHEN_DISABLED}\par
2737 \par
2738 {\cf21 #define DOCTEST_WARN(...) DOCTEST_FUNC_EMPTY}\par
2739 {\cf21 #define DOCTEST_CHECK(...) DOCTEST_FUNC_EMPTY}\par
2740 {\cf21 #define DOCTEST_REQUIRE(...) DOCTEST_FUNC_EMPTY}\par
2741 {\cf21 #define DOCTEST_WARN_FALSE(...) DOCTEST_FUNC_EMPTY}\par
2742 {\cf21 #define DOCTEST_CHECK_FALSE(...) DOCTEST_FUNC_EMPTY}\par
2743 {\cf21 #define DOCTEST_REQUIRE_FALSE(...) DOCTEST_FUNC_EMPTY}\par
2744 \par
2745 {\cf21 #define DOCTEST_WARN_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY}\par
2746 {\cf21 #define DOCTEST_CHECK_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY}\par
2747 {\cf21 #define DOCTEST_REQUIRE_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY}\par
2748 {\cf21 #define DOCTEST_WARN_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY}\par
2749 {\cf21 #define DOCTEST_CHECK_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY}\par
2750 {\cf21 #define DOCTEST_REQUIRE_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY}\par
2751 \par
2752 {\cf21 #define DOCTEST_WARN_EQ(...) DOCTEST_FUNC_EMPTY}\par
2753 {\cf21 #define DOCTEST_CHECK_EQ(...) DOCTEST_FUNC_EMPTY}\par
2754 {\cf21 #define DOCTEST_REQUIRE_EQ(...) DOCTEST_FUNC_EMPTY}\par
2755 {\cf21 #define DOCTEST_WARN_NE(...) DOCTEST_FUNC_EMPTY}\par
2756 {\cf21 #define DOCTEST_CHECK_NE(...) DOCTEST_FUNC_EMPTY}\par
2757 {\cf21 #define DOCTEST_REQUIRE_NE(...) DOCTEST_FUNC_EMPTY}\par
2758 {\cf21 #define DOCTEST_WARN_GT(...) DOCTEST_FUNC_EMPTY}\par
2759 {\cf21 #define DOCTEST_CHECK_GT(...) DOCTEST_FUNC_EMPTY}\par
2760 {\cf21 #define DOCTEST_REQUIRE_GT(...) DOCTEST_FUNC_EMPTY}\par
2761 {\cf21 #define DOCTEST_WARN_LT(...) DOCTEST_FUNC_EMPTY}\par
2762 {\cf21 #define DOCTEST_CHECK_LT(...) DOCTEST_FUNC_EMPTY}\par
2763 {\cf21 #define DOCTEST_REQUIRE_LT(...) DOCTEST_FUNC_EMPTY}\par
2764 {\cf21 #define DOCTEST_WARN_GE(...) DOCTEST_FUNC_EMPTY}\par
2765 {\cf21 #define DOCTEST_CHECK_GE(...) DOCTEST_FUNC_EMPTY}\par
2766 {\cf21 #define DOCTEST_REQUIRE_GE(...) DOCTEST_FUNC_EMPTY}\par
2767 {\cf21 #define DOCTEST_WARN_LE(...) DOCTEST_FUNC_EMPTY}\par
2768 {\cf21 #define DOCTEST_CHECK_LE(...) DOCTEST_FUNC_EMPTY}\par
2769 {\cf21 #define DOCTEST_REQUIRE_LE(...) DOCTEST_FUNC_EMPTY}\par
2770 \par
2771 {\cf21 #define DOCTEST_WARN_UNARY(...) DOCTEST_FUNC_EMPTY}\par
2772 {\cf21 #define DOCTEST_CHECK_UNARY(...) DOCTEST_FUNC_EMPTY}\par
2773 {\cf21 #define DOCTEST_REQUIRE_UNARY(...) DOCTEST_FUNC_EMPTY}\par
2774 {\cf21 #define DOCTEST_WARN_UNARY_FALSE(...) DOCTEST_FUNC_EMPTY}\par
2775 {\cf21 #define DOCTEST_CHECK_UNARY_FALSE(...) DOCTEST_FUNC_EMPTY}\par
2776 {\cf21 #define DOCTEST_REQUIRE_UNARY_FALSE(...) DOCTEST_FUNC_EMPTY}\par
2777 \par
2778 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2779 \par
2780 {\cf21 #define DOCTEST_WARN_THROWS(...) DOCTEST_FUNC_EMPTY}\par
2781 {\cf21 #define DOCTEST_CHECK_THROWS(...) DOCTEST_FUNC_EMPTY}\par
2782 {\cf21 #define DOCTEST_REQUIRE_THROWS(...) DOCTEST_FUNC_EMPTY}\par
2783 {\cf21 #define DOCTEST_WARN_THROWS_AS(expr, ...) DOCTEST_FUNC_EMPTY}\par
2784 {\cf21 #define DOCTEST_CHECK_THROWS_AS(expr, ...) DOCTEST_FUNC_EMPTY}\par
2785 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS(expr, ...) DOCTEST_FUNC_EMPTY}\par
2786 {\cf21 #define DOCTEST_WARN_THROWS_WITH(expr, ...) DOCTEST_FUNC_EMPTY}\par
2787 {\cf21 #define DOCTEST_CHECK_THROWS_WITH(expr, ...) DOCTEST_FUNC_EMPTY}\par
2788 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH(expr, ...) DOCTEST_FUNC_EMPTY}\par
2789 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS(expr, with, ...) DOCTEST_FUNC_EMPTY}\par
2790 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ...) DOCTEST_FUNC_EMPTY}\par
2791 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ...) DOCTEST_FUNC_EMPTY}\par
2792 {\cf21 #define DOCTEST_WARN_NOTHROW(...) DOCTEST_FUNC_EMPTY}\par
2793 {\cf21 #define DOCTEST_CHECK_NOTHROW(...) DOCTEST_FUNC_EMPTY}\par
2794 {\cf21 #define DOCTEST_REQUIRE_NOTHROW(...) DOCTEST_FUNC_EMPTY}\par
2795 \par
2796 {\cf21 #define DOCTEST_WARN_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY}\par
2797 {\cf21 #define DOCTEST_CHECK_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY}\par
2798 {\cf21 #define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY}\par
2799 {\cf21 #define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_EMPTY}\par
2800 {\cf21 #define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_EMPTY}\par
2801 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_EMPTY}\par
2802 {\cf21 #define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_EMPTY}\par
2803 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_EMPTY}\par
2804 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_EMPTY}\par
2805 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_EMPTY}\par
2806 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_EMPTY}\par
2807 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_EMPTY}\par
2808 {\cf21 #define DOCTEST_WARN_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY}\par
2809 {\cf21 #define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY}\par
2810 {\cf21 #define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY}\par
2811 \par
2812 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2813 \par
2814 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_EVALUATE_ASSERTS_EVEN_WHEN_DISABLED}\par
2815 \par
2816 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
2817 \par
2818 {\cf21 #ifdef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2819 \par
2820 {\cf21 #ifdef DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
2821 {\cf21 #define DOCTEST_EXCEPTION_EMPTY_FUNC DOCTEST_FUNC_EMPTY}\par
2822 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
2823 {\cf21 #define DOCTEST_EXCEPTION_EMPTY_FUNC [] \{ static_assert(false, "Exceptions are disabled! " \\}\par
2824 {\cf21     "Use DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS if you want to compile with exceptions disabled."); return false; \}()}\par
2825 \par
2826 {\cf21 #undef DOCTEST_REQUIRE}\par
2827 {\cf21 #undef DOCTEST_REQUIRE_FALSE}\par
2828 {\cf21 #undef DOCTEST_REQUIRE_MESSAGE}\par
2829 {\cf21 #undef DOCTEST_REQUIRE_FALSE_MESSAGE}\par
2830 {\cf21 #undef DOCTEST_REQUIRE_EQ}\par
2831 {\cf21 #undef DOCTEST_REQUIRE_NE}\par
2832 {\cf21 #undef DOCTEST_REQUIRE_GT}\par
2833 {\cf21 #undef DOCTEST_REQUIRE_LT}\par
2834 {\cf21 #undef DOCTEST_REQUIRE_GE}\par
2835 {\cf21 #undef DOCTEST_REQUIRE_LE}\par
2836 {\cf21 #undef DOCTEST_REQUIRE_UNARY}\par
2837 {\cf21 #undef DOCTEST_REQUIRE_UNARY_FALSE}\par
2838 \par
2839 {\cf21 #define DOCTEST_REQUIRE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2840 {\cf21 #define DOCTEST_REQUIRE_FALSE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2841 {\cf21 #define DOCTEST_REQUIRE_MESSAGE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2842 {\cf21 #define DOCTEST_REQUIRE_FALSE_MESSAGE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2843 {\cf21 #define DOCTEST_REQUIRE_EQ DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2844 {\cf21 #define DOCTEST_REQUIRE_NE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2845 {\cf21 #define DOCTEST_REQUIRE_GT DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2846 {\cf21 #define DOCTEST_REQUIRE_LT DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2847 {\cf21 #define DOCTEST_REQUIRE_GE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2848 {\cf21 #define DOCTEST_REQUIRE_LE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2849 {\cf21 #define DOCTEST_REQUIRE_UNARY DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2850 {\cf21 #define DOCTEST_REQUIRE_UNARY_FALSE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2851 \par
2852 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
2853 \par
2854 {\cf21 #define DOCTEST_WARN_THROWS(...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2855 {\cf21 #define DOCTEST_CHECK_THROWS(...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2856 {\cf21 #define DOCTEST_REQUIRE_THROWS(...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2857 {\cf21 #define DOCTEST_WARN_THROWS_AS(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2858 {\cf21 #define DOCTEST_CHECK_THROWS_AS(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2859 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2860 {\cf21 #define DOCTEST_WARN_THROWS_WITH(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2861 {\cf21 #define DOCTEST_CHECK_THROWS_WITH(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2862 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2863 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2864 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2865 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2866 {\cf21 #define DOCTEST_WARN_NOTHROW(...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2867 {\cf21 #define DOCTEST_CHECK_NOTHROW(...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2868 {\cf21 #define DOCTEST_REQUIRE_NOTHROW(...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2869 \par
2870 {\cf21 #define DOCTEST_WARN_THROWS_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2871 {\cf21 #define DOCTEST_CHECK_THROWS_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2872 {\cf21 #define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2873 {\cf21 #define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2874 {\cf21 #define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2875 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2876 {\cf21 #define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2877 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2878 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2879 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2880 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2881 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2882 {\cf21 #define DOCTEST_WARN_NOTHROW_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2883 {\cf21 #define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2884 {\cf21 #define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2885 \par
2886 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2887 \par
2888 {\cf20 // clang-format off}\par
2889 {\cf20 // KEPT FOR BACKWARDS COMPATIBILITY - FORWARDING TO THE RIGHT MACROS}\par
2890 {\cf21 #define DOCTEST_FAST_WARN_EQ             DOCTEST_WARN_EQ}\par
2891 {\cf21 #define DOCTEST_FAST_CHECK_EQ            DOCTEST_CHECK_EQ}\par
2892 {\cf21 #define DOCTEST_FAST_REQUIRE_EQ          DOCTEST_REQUIRE_EQ}\par
2893 {\cf21 #define DOCTEST_FAST_WARN_NE             DOCTEST_WARN_NE}\par
2894 {\cf21 #define DOCTEST_FAST_CHECK_NE            DOCTEST_CHECK_NE}\par
2895 {\cf21 #define DOCTEST_FAST_REQUIRE_NE          DOCTEST_REQUIRE_NE}\par
2896 {\cf21 #define DOCTEST_FAST_WARN_GT             DOCTEST_WARN_GT}\par
2897 {\cf21 #define DOCTEST_FAST_CHECK_GT            DOCTEST_CHECK_GT}\par
2898 {\cf21 #define DOCTEST_FAST_REQUIRE_GT          DOCTEST_REQUIRE_GT}\par
2899 {\cf21 #define DOCTEST_FAST_WARN_LT             DOCTEST_WARN_LT}\par
2900 {\cf21 #define DOCTEST_FAST_CHECK_LT            DOCTEST_CHECK_LT}\par
2901 {\cf21 #define DOCTEST_FAST_REQUIRE_LT          DOCTEST_REQUIRE_LT}\par
2902 {\cf21 #define DOCTEST_FAST_WARN_GE             DOCTEST_WARN_GE}\par
2903 {\cf21 #define DOCTEST_FAST_CHECK_GE            DOCTEST_CHECK_GE}\par
2904 {\cf21 #define DOCTEST_FAST_REQUIRE_GE          DOCTEST_REQUIRE_GE}\par
2905 {\cf21 #define DOCTEST_FAST_WARN_LE             DOCTEST_WARN_LE}\par
2906 {\cf21 #define DOCTEST_FAST_CHECK_LE            DOCTEST_CHECK_LE}\par
2907 {\cf21 #define DOCTEST_FAST_REQUIRE_LE          DOCTEST_REQUIRE_LE}\par
2908 \par
2909 {\cf21 #define DOCTEST_FAST_WARN_UNARY          DOCTEST_WARN_UNARY}\par
2910 {\cf21 #define DOCTEST_FAST_CHECK_UNARY         DOCTEST_CHECK_UNARY}\par
2911 {\cf21 #define DOCTEST_FAST_REQUIRE_UNARY       DOCTEST_REQUIRE_UNARY}\par
2912 {\cf21 #define DOCTEST_FAST_WARN_UNARY_FALSE    DOCTEST_WARN_UNARY_FALSE}\par
2913 {\cf21 #define DOCTEST_FAST_CHECK_UNARY_FALSE   DOCTEST_CHECK_UNARY_FALSE}\par
2914 {\cf21 #define DOCTEST_FAST_REQUIRE_UNARY_FALSE DOCTEST_REQUIRE_UNARY_FALSE}\par
2915 \par
2916 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE(id, ...) DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id,__VA_ARGS__)}\par
2917 {\cf20 // clang-format on}\par
2918 \par
2919 {\cf20 // BDD style macros}\par
2920 {\cf20 // clang-format off}\par
2921 {\cf21 #define DOCTEST_SCENARIO(name) DOCTEST_TEST_CASE("  Scenario: " name)}\par
2922 {\cf21 #define DOCTEST_SCENARIO_CLASS(name) DOCTEST_TEST_CASE_CLASS("  Scenario: " name)}\par
2923 {\cf21 #define DOCTEST_SCENARIO_TEMPLATE(name, T, ...)  DOCTEST_TEST_CASE_TEMPLATE("  Scenario: " name, T, __VA_ARGS__)}\par
2924 {\cf21 #define DOCTEST_SCENARIO_TEMPLATE_DEFINE(name, T, id) DOCTEST_TEST_CASE_TEMPLATE_DEFINE("  Scenario: " name, T, id)}\par
2925 \par
2926 {\cf21 #define DOCTEST_GIVEN(name)     DOCTEST_SUBCASE("   Given: " name)}\par
2927 {\cf21 #define DOCTEST_WHEN(name)      DOCTEST_SUBCASE("    When: " name)}\par
2928 {\cf21 #define DOCTEST_AND_WHEN(name)  DOCTEST_SUBCASE("And when: " name)}\par
2929 {\cf21 #define DOCTEST_THEN(name)      DOCTEST_SUBCASE("    Then: " name)}\par
2930 {\cf21 #define DOCTEST_AND_THEN(name)  DOCTEST_SUBCASE("     And: " name)}\par
2931 {\cf20 // clang-format on}\par
2932 \par
2933 {\cf20 // == SHORT VERSIONS OF THE MACROS}\par
2934 {\cf21 #ifndef DOCTEST_CONFIG_NO_SHORT_MACRO_NAMES}\par
2935 \par
2936 {\cf21 #define TEST_CASE(name) DOCTEST_TEST_CASE(name)}\par
2937 {\cf21 #define TEST_CASE_CLASS(name) DOCTEST_TEST_CASE_CLASS(name)}\par
2938 {\cf21 #define TEST_CASE_FIXTURE(x, name) DOCTEST_TEST_CASE_FIXTURE(x, name)}\par
2939 {\cf21 #define TYPE_TO_STRING_AS(str, ...) DOCTEST_TYPE_TO_STRING_AS(str, __VA_ARGS__)}\par
2940 {\cf21 #define TYPE_TO_STRING(...) DOCTEST_TYPE_TO_STRING(__VA_ARGS__)}\par
2941 {\cf21 #define TEST_CASE_TEMPLATE(name, T, ...) DOCTEST_TEST_CASE_TEMPLATE(name, T, __VA_ARGS__)}\par
2942 {\cf21 #define TEST_CASE_TEMPLATE_DEFINE(name, T, id) DOCTEST_TEST_CASE_TEMPLATE_DEFINE(name, T, id)}\par
2943 {\cf21 #define TEST_CASE_TEMPLATE_INVOKE(id, ...) DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id, __VA_ARGS__)}\par
2944 {\cf21 #define TEST_CASE_TEMPLATE_APPLY(id, ...) DOCTEST_TEST_CASE_TEMPLATE_APPLY(id, __VA_ARGS__)}\par
2945 {\cf21 #define SUBCASE(name) DOCTEST_SUBCASE(name)}\par
2946 {\cf21 #define TEST_SUITE(decorators) DOCTEST_TEST_SUITE(decorators)}\par
2947 {\cf21 #define TEST_SUITE_BEGIN(name) DOCTEST_TEST_SUITE_BEGIN(name)}\par
2948 {\cf21 #define TEST_SUITE_END DOCTEST_TEST_SUITE_END}\par
2949 {\cf21 #define REGISTER_EXCEPTION_TRANSLATOR(signature) DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)}\par
2950 {\cf21 #define REGISTER_REPORTER(name, priority, reporter) DOCTEST_REGISTER_REPORTER(name, priority, reporter)}\par
2951 {\cf21 #define REGISTER_LISTENER(name, priority, reporter) DOCTEST_REGISTER_LISTENER(name, priority, reporter)}\par
2952 {\cf21 #define INFO(...) DOCTEST_INFO(__VA_ARGS__)}\par
2953 {\cf21 #define CAPTURE(x) DOCTEST_CAPTURE(x)}\par
2954 {\cf21 #define ADD_MESSAGE_AT(file, line, ...) DOCTEST_ADD_MESSAGE_AT(file, line, __VA_ARGS__)}\par
2955 {\cf21 #define ADD_FAIL_CHECK_AT(file, line, ...) DOCTEST_ADD_FAIL_CHECK_AT(file, line, __VA_ARGS__)}\par
2956 {\cf21 #define ADD_FAIL_AT(file, line, ...) DOCTEST_ADD_FAIL_AT(file, line, __VA_ARGS__)}\par
2957 {\cf21 #define MESSAGE(...) DOCTEST_MESSAGE(__VA_ARGS__)}\par
2958 {\cf21 #define FAIL_CHECK(...) DOCTEST_FAIL_CHECK(__VA_ARGS__)}\par
2959 {\cf21 #define FAIL(...) DOCTEST_FAIL(__VA_ARGS__)}\par
2960 {\cf21 #define TO_LVALUE(...) DOCTEST_TO_LVALUE(__VA_ARGS__)}\par
2961 \par
2962 {\cf21 #define WARN(...) DOCTEST_WARN(__VA_ARGS__)}\par
2963 {\cf21 #define WARN_FALSE(...) DOCTEST_WARN_FALSE(__VA_ARGS__)}\par
2964 {\cf21 #define WARN_THROWS(...) DOCTEST_WARN_THROWS(__VA_ARGS__)}\par
2965 {\cf21 #define WARN_THROWS_AS(expr, ...) DOCTEST_WARN_THROWS_AS(expr, __VA_ARGS__)}\par
2966 {\cf21 #define WARN_THROWS_WITH(expr, ...) DOCTEST_WARN_THROWS_WITH(expr, __VA_ARGS__)}\par
2967 {\cf21 #define WARN_THROWS_WITH_AS(expr, with, ...) DOCTEST_WARN_THROWS_WITH_AS(expr, with, __VA_ARGS__)}\par
2968 {\cf21 #define WARN_NOTHROW(...) DOCTEST_WARN_NOTHROW(__VA_ARGS__)}\par
2969 {\cf21 #define CHECK(...) DOCTEST_CHECK(__VA_ARGS__)}\par
2970 {\cf21 #define CHECK_FALSE(...) DOCTEST_CHECK_FALSE(__VA_ARGS__)}\par
2971 {\cf21 #define CHECK_THROWS(...) DOCTEST_CHECK_THROWS(__VA_ARGS__)}\par
2972 {\cf21 #define CHECK_THROWS_AS(expr, ...) DOCTEST_CHECK_THROWS_AS(expr, __VA_ARGS__)}\par
2973 {\cf21 #define CHECK_THROWS_WITH(expr, ...) DOCTEST_CHECK_THROWS_WITH(expr, __VA_ARGS__)}\par
2974 {\cf21 #define CHECK_THROWS_WITH_AS(expr, with, ...) DOCTEST_CHECK_THROWS_WITH_AS(expr, with, __VA_ARGS__)}\par
2975 {\cf21 #define CHECK_NOTHROW(...) DOCTEST_CHECK_NOTHROW(__VA_ARGS__)}\par
2976 {\cf21 #define REQUIRE(...) DOCTEST_REQUIRE(__VA_ARGS__)}\par
2977 {\cf21 #define REQUIRE_FALSE(...) DOCTEST_REQUIRE_FALSE(__VA_ARGS__)}\par
2978 {\cf21 #define REQUIRE_THROWS(...) DOCTEST_REQUIRE_THROWS(__VA_ARGS__)}\par
2979 {\cf21 #define REQUIRE_THROWS_AS(expr, ...) DOCTEST_REQUIRE_THROWS_AS(expr, __VA_ARGS__)}\par
2980 {\cf21 #define REQUIRE_THROWS_WITH(expr, ...) DOCTEST_REQUIRE_THROWS_WITH(expr, __VA_ARGS__)}\par
2981 {\cf21 #define REQUIRE_THROWS_WITH_AS(expr, with, ...) DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, __VA_ARGS__)}\par
2982 {\cf21 #define REQUIRE_NOTHROW(...) DOCTEST_REQUIRE_NOTHROW(__VA_ARGS__)}\par
2983 \par
2984 {\cf21 #define WARN_MESSAGE(cond, ...) DOCTEST_WARN_MESSAGE(cond, __VA_ARGS__)}\par
2985 {\cf21 #define WARN_FALSE_MESSAGE(cond, ...) DOCTEST_WARN_FALSE_MESSAGE(cond, __VA_ARGS__)}\par
2986 {\cf21 #define WARN_THROWS_MESSAGE(expr, ...) DOCTEST_WARN_THROWS_MESSAGE(expr, __VA_ARGS__)}\par
2987 {\cf21 #define WARN_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, __VA_ARGS__)}\par
2988 {\cf21 #define WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, __VA_ARGS__)}\par
2989 {\cf21 #define WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, __VA_ARGS__)}\par
2990 {\cf21 #define WARN_NOTHROW_MESSAGE(expr, ...) DOCTEST_WARN_NOTHROW_MESSAGE(expr, __VA_ARGS__)}\par
2991 {\cf21 #define CHECK_MESSAGE(cond, ...) DOCTEST_CHECK_MESSAGE(cond, __VA_ARGS__)}\par
2992 {\cf21 #define CHECK_FALSE_MESSAGE(cond, ...) DOCTEST_CHECK_FALSE_MESSAGE(cond, __VA_ARGS__)}\par
2993 {\cf21 #define CHECK_THROWS_MESSAGE(expr, ...) DOCTEST_CHECK_THROWS_MESSAGE(expr, __VA_ARGS__)}\par
2994 {\cf21 #define CHECK_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, __VA_ARGS__)}\par
2995 {\cf21 #define CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, __VA_ARGS__)}\par
2996 {\cf21 #define CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, __VA_ARGS__)}\par
2997 {\cf21 #define CHECK_NOTHROW_MESSAGE(expr, ...) DOCTEST_CHECK_NOTHROW_MESSAGE(expr, __VA_ARGS__)}\par
2998 {\cf21 #define REQUIRE_MESSAGE(cond, ...) DOCTEST_REQUIRE_MESSAGE(cond, __VA_ARGS__)}\par
2999 {\cf21 #define REQUIRE_FALSE_MESSAGE(cond, ...) DOCTEST_REQUIRE_FALSE_MESSAGE(cond, __VA_ARGS__)}\par
3000 {\cf21 #define REQUIRE_THROWS_MESSAGE(expr, ...) DOCTEST_REQUIRE_THROWS_MESSAGE(expr, __VA_ARGS__)}\par
3001 {\cf21 #define REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, __VA_ARGS__)}\par
3002 {\cf21 #define REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, __VA_ARGS__)}\par
3003 {\cf21 #define REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, __VA_ARGS__)}\par
3004 {\cf21 #define REQUIRE_NOTHROW_MESSAGE(expr, ...) DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, __VA_ARGS__)}\par
3005 \par
3006 {\cf21 #define SCENARIO(name) DOCTEST_SCENARIO(name)}\par
3007 {\cf21 #define SCENARIO_CLASS(name) DOCTEST_SCENARIO_CLASS(name)}\par
3008 {\cf21 #define SCENARIO_TEMPLATE(name, T, ...) DOCTEST_SCENARIO_TEMPLATE(name, T, __VA_ARGS__)}\par
3009 {\cf21 #define SCENARIO_TEMPLATE_DEFINE(name, T, id) DOCTEST_SCENARIO_TEMPLATE_DEFINE(name, T, id)}\par
3010 {\cf21 #define GIVEN(name) DOCTEST_GIVEN(name)}\par
3011 {\cf21 #define WHEN(name) DOCTEST_WHEN(name)}\par
3012 {\cf21 #define AND_WHEN(name) DOCTEST_AND_WHEN(name)}\par
3013 {\cf21 #define THEN(name) DOCTEST_THEN(name)}\par
3014 {\cf21 #define AND_THEN(name) DOCTEST_AND_THEN(name)}\par
3015 \par
3016 {\cf21 #define WARN_EQ(...) DOCTEST_WARN_EQ(__VA_ARGS__)}\par
3017 {\cf21 #define CHECK_EQ(...) DOCTEST_CHECK_EQ(__VA_ARGS__)}\par
3018 {\cf21 #define REQUIRE_EQ(...) DOCTEST_REQUIRE_EQ(__VA_ARGS__)}\par
3019 {\cf21 #define WARN_NE(...) DOCTEST_WARN_NE(__VA_ARGS__)}\par
3020 {\cf21 #define CHECK_NE(...) DOCTEST_CHECK_NE(__VA_ARGS__)}\par
3021 {\cf21 #define REQUIRE_NE(...) DOCTEST_REQUIRE_NE(__VA_ARGS__)}\par
3022 {\cf21 #define WARN_GT(...) DOCTEST_WARN_GT(__VA_ARGS__)}\par
3023 {\cf21 #define CHECK_GT(...) DOCTEST_CHECK_GT(__VA_ARGS__)}\par
3024 {\cf21 #define REQUIRE_GT(...) DOCTEST_REQUIRE_GT(__VA_ARGS__)}\par
3025 {\cf21 #define WARN_LT(...) DOCTEST_WARN_LT(__VA_ARGS__)}\par
3026 {\cf21 #define CHECK_LT(...) DOCTEST_CHECK_LT(__VA_ARGS__)}\par
3027 {\cf21 #define REQUIRE_LT(...) DOCTEST_REQUIRE_LT(__VA_ARGS__)}\par
3028 {\cf21 #define WARN_GE(...) DOCTEST_WARN_GE(__VA_ARGS__)}\par
3029 {\cf21 #define CHECK_GE(...) DOCTEST_CHECK_GE(__VA_ARGS__)}\par
3030 {\cf21 #define REQUIRE_GE(...) DOCTEST_REQUIRE_GE(__VA_ARGS__)}\par
3031 {\cf21 #define WARN_LE(...) DOCTEST_WARN_LE(__VA_ARGS__)}\par
3032 {\cf21 #define CHECK_LE(...) DOCTEST_CHECK_LE(__VA_ARGS__)}\par
3033 {\cf21 #define REQUIRE_LE(...) DOCTEST_REQUIRE_LE(__VA_ARGS__)}\par
3034 {\cf21 #define WARN_UNARY(...) DOCTEST_WARN_UNARY(__VA_ARGS__)}\par
3035 {\cf21 #define CHECK_UNARY(...) DOCTEST_CHECK_UNARY(__VA_ARGS__)}\par
3036 {\cf21 #define REQUIRE_UNARY(...) DOCTEST_REQUIRE_UNARY(__VA_ARGS__)}\par
3037 {\cf21 #define WARN_UNARY_FALSE(...) DOCTEST_WARN_UNARY_FALSE(__VA_ARGS__)}\par
3038 {\cf21 #define CHECK_UNARY_FALSE(...) DOCTEST_CHECK_UNARY_FALSE(__VA_ARGS__)}\par
3039 {\cf21 #define REQUIRE_UNARY_FALSE(...) DOCTEST_REQUIRE_UNARY_FALSE(__VA_ARGS__)}\par
3040 \par
3041 {\cf20 // KEPT FOR BACKWARDS COMPATIBILITY}\par
3042 {\cf21 #define FAST_WARN_EQ(...) DOCTEST_FAST_WARN_EQ(__VA_ARGS__)}\par
3043 {\cf21 #define FAST_CHECK_EQ(...) DOCTEST_FAST_CHECK_EQ(__VA_ARGS__)}\par
3044 {\cf21 #define FAST_REQUIRE_EQ(...) DOCTEST_FAST_REQUIRE_EQ(__VA_ARGS__)}\par
3045 {\cf21 #define FAST_WARN_NE(...) DOCTEST_FAST_WARN_NE(__VA_ARGS__)}\par
3046 {\cf21 #define FAST_CHECK_NE(...) DOCTEST_FAST_CHECK_NE(__VA_ARGS__)}\par
3047 {\cf21 #define FAST_REQUIRE_NE(...) DOCTEST_FAST_REQUIRE_NE(__VA_ARGS__)}\par
3048 {\cf21 #define FAST_WARN_GT(...) DOCTEST_FAST_WARN_GT(__VA_ARGS__)}\par
3049 {\cf21 #define FAST_CHECK_GT(...) DOCTEST_FAST_CHECK_GT(__VA_ARGS__)}\par
3050 {\cf21 #define FAST_REQUIRE_GT(...) DOCTEST_FAST_REQUIRE_GT(__VA_ARGS__)}\par
3051 {\cf21 #define FAST_WARN_LT(...) DOCTEST_FAST_WARN_LT(__VA_ARGS__)}\par
3052 {\cf21 #define FAST_CHECK_LT(...) DOCTEST_FAST_CHECK_LT(__VA_ARGS__)}\par
3053 {\cf21 #define FAST_REQUIRE_LT(...) DOCTEST_FAST_REQUIRE_LT(__VA_ARGS__)}\par
3054 {\cf21 #define FAST_WARN_GE(...) DOCTEST_FAST_WARN_GE(__VA_ARGS__)}\par
3055 {\cf21 #define FAST_CHECK_GE(...) DOCTEST_FAST_CHECK_GE(__VA_ARGS__)}\par
3056 {\cf21 #define FAST_REQUIRE_GE(...) DOCTEST_FAST_REQUIRE_GE(__VA_ARGS__)}\par
3057 {\cf21 #define FAST_WARN_LE(...) DOCTEST_FAST_WARN_LE(__VA_ARGS__)}\par
3058 {\cf21 #define FAST_CHECK_LE(...) DOCTEST_FAST_CHECK_LE(__VA_ARGS__)}\par
3059 {\cf21 #define FAST_REQUIRE_LE(...) DOCTEST_FAST_REQUIRE_LE(__VA_ARGS__)}\par
3060 \par
3061 {\cf21 #define FAST_WARN_UNARY(...) DOCTEST_FAST_WARN_UNARY(__VA_ARGS__)}\par
3062 {\cf21 #define FAST_CHECK_UNARY(...) DOCTEST_FAST_CHECK_UNARY(__VA_ARGS__)}\par
3063 {\cf21 #define FAST_REQUIRE_UNARY(...) DOCTEST_FAST_REQUIRE_UNARY(__VA_ARGS__)}\par
3064 {\cf21 #define FAST_WARN_UNARY_FALSE(...) DOCTEST_FAST_WARN_UNARY_FALSE(__VA_ARGS__)}\par
3065 {\cf21 #define FAST_CHECK_UNARY_FALSE(...) DOCTEST_FAST_CHECK_UNARY_FALSE(__VA_ARGS__)}\par
3066 {\cf21 #define FAST_REQUIRE_UNARY_FALSE(...) DOCTEST_FAST_REQUIRE_UNARY_FALSE(__VA_ARGS__)}\par
3067 \par
3068 {\cf21 #define TEST_CASE_TEMPLATE_INSTANTIATE(id, ...) DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE(id, __VA_ARGS__)}\par
3069 \par
3070 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_SHORT_MACRO_NAMES}\par
3071 \par
3072 {\cf21 #ifndef DOCTEST_CONFIG_DISABLE}\par
3073 \par
3074 {\cf20 // this is here to clear the 'current test suite' for the current translation unit - at the top}\par
3075 DOCTEST_TEST_SUITE_END();\par
3076 \par
3077 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3078 \par
3079 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
3080 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
3081 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
3082 \par
3083 DOCTEST_SUPPRESS_COMMON_WARNINGS_POP\par
3084 \par
3085 {\cf21 #endif }{\cf20 // DOCTEST_LIBRARY_INCLUDED}\par
3086 \par
3087 {\cf21 #ifndef DOCTEST_SINGLE_HEADER}\par
3088 {\cf21 #define DOCTEST_SINGLE_HEADER}\par
3089 {\cf21 #endif }{\cf20 // DOCTEST_SINGLE_HEADER}\par
3090 \par
3091 {\cf21 #if defined(DOCTEST_CONFIG_IMPLEMENT) || !defined(DOCTEST_SINGLE_HEADER)}\par
3092 \par
3093 {\cf21 #ifndef DOCTEST_SINGLE_HEADER}\par
3094 {\cf21 #include "doctest_fwd.h"}\par
3095 {\cf21 #endif }{\cf20 // DOCTEST_SINGLE_HEADER}\par
3096 \par
3097 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wunused-macros"})\par
3098 \par
3099 {\cf21 #ifndef DOCTEST_LIBRARY_IMPLEMENTATION}\par
3100 {\cf21 #define DOCTEST_LIBRARY_IMPLEMENTATION}\par
3101 \par
3102 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
3103 \par
3104 DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH\par
3105 \par
3106 DOCTEST_CLANG_SUPPRESS_WARNING_PUSH\par
3107 DOCTEST_CLANG_SUPPRESS_WARNING({\cf22 "-Wglobal-constructors"})\par
3108 DOCTEST_CLANG_SUPPRESS_WARNING("-Wexit-time-destructors")\par
3109 DOCTEST_CLANG_SUPPRESS_WARNING("-Wsign-conversion")\par
3110 DOCTEST_CLANG_SUPPRESS_WARNING("-Wshorten-64-to-32")\par
3111 DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-variable-declarations")\par
3112 DOCTEST_CLANG_SUPPRESS_WARNING("-Wswitch")\par
3113 DOCTEST_CLANG_SUPPRESS_WARNING("-Wswitch-enum")\par
3114 DOCTEST_CLANG_SUPPRESS_WARNING("-Wcovered-switch-default")\par
3115 DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-noreturn")\par
3116 DOCTEST_CLANG_SUPPRESS_WARNING("-Wdisabled-macro-expansion")\par
3117 DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-braces")\par
3118 DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-field-initializers")\par
3119 DOCTEST_CLANG_SUPPRESS_WARNING("-Wunused-member-function")\par
3120 DOCTEST_CLANG_SUPPRESS_WARNING("-Wnonportable-system-include-path")\par
3121 \par
3122 DOCTEST_GCC_SUPPRESS_WARNING_PUSH\par
3123 DOCTEST_GCC_SUPPRESS_WARNING("-Wconversion")\par
3124 DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-conversion")\par
3125 DOCTEST_GCC_SUPPRESS_WARNING("-Wmissing-field-initializers")\par
3126 DOCTEST_GCC_SUPPRESS_WARNING("-Wmissing-braces")\par
3127 DOCTEST_GCC_SUPPRESS_WARNING("-Wswitch")\par
3128 DOCTEST_GCC_SUPPRESS_WARNING("-Wswitch-enum")\par
3129 DOCTEST_GCC_SUPPRESS_WARNING("-Wswitch-default")\par
3130 DOCTEST_GCC_SUPPRESS_WARNING("-Wunsafe-loop-optimizations")\par
3131 DOCTEST_GCC_SUPPRESS_WARNING("-Wold-style-cast")\par
3132 DOCTEST_GCC_SUPPRESS_WARNING("-Wunused-function")\par
3133 DOCTEST_GCC_SUPPRESS_WARNING("-Wmultiple-inheritance")\par
3134 DOCTEST_GCC_SUPPRESS_WARNING("-Wsuggest-attribute")\par
3135 \par
3136 DOCTEST_MSVC_SUPPRESS_WARNING_PUSH\par
3137 DOCTEST_MSVC_SUPPRESS_WARNING(4267) {\cf20 // 'var' : conversion from 'x' to 'y', possible loss of data}\par
3138 DOCTEST_MSVC_SUPPRESS_WARNING(4530) {\cf20 // C++ exception handler used, but unwind semantics not enabled}\par
3139 DOCTEST_MSVC_SUPPRESS_WARNING(4577) {\cf20 // 'noexcept' used with no exception handling mode specified}\par
3140 DOCTEST_MSVC_SUPPRESS_WARNING(4774) {\cf20 // format string expected in argument is not a string literal}\par
3141 DOCTEST_MSVC_SUPPRESS_WARNING(4365) {\cf20 // conversion from 'int' to 'unsigned', signed/unsigned mismatch}\par
3142 DOCTEST_MSVC_SUPPRESS_WARNING(5039) {\cf20 // pointer to potentially throwing function passed to extern C}\par
3143 DOCTEST_MSVC_SUPPRESS_WARNING(4800) {\cf20 // forcing value to bool 'true' or 'false' (performance warning)}\par
3144 DOCTEST_MSVC_SUPPRESS_WARNING(5245) {\cf20 // unreferenced function with internal linkage has been removed}\par
3145 \par
3146 DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN\par
3147 \par
3148 {\cf20 // required includes - will go only in one translation unit!}\par
3149 {\cf21 #include <ctime>}\par
3150 {\cf21 #include <cmath>}\par
3151 {\cf21 #include <climits>}\par
3152 {\cf20 // borland (Embarcadero) compiler requires math.h and not cmath - https://github.com/doctest/doctest/pull/37}\par
3153 {\cf21 #ifdef __BORLANDC__}\par
3154 {\cf21 #include <math.h>}\par
3155 {\cf21 #endif }{\cf20 // __BORLANDC__}\par
3156 {\cf21 #include <new>}\par
3157 {\cf21 #include <cstdio>}\par
3158 {\cf21 #include <cstdlib>}\par
3159 {\cf21 #include <cstring>}\par
3160 {\cf21 #include <limits>}\par
3161 {\cf21 #include <utility>}\par
3162 {\cf21 #include <fstream>}\par
3163 {\cf21 #include <sstream>}\par
3164 {\cf21 #ifndef DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM}\par
3165 {\cf21 #include <iostream>}\par
3166 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM}\par
3167 {\cf21 #include <algorithm>}\par
3168 {\cf21 #include <iomanip>}\par
3169 {\cf21 #include <vector>}\par
3170 {\cf21 #ifndef DOCTEST_CONFIG_NO_MULTITHREADING}\par
3171 {\cf21 #include <atomic>}\par
3172 {\cf21 #include <mutex>}\par
3173 {\cf21 #define DOCTEST_DECLARE_MUTEX(name) std::mutex name;}\par
3174 {\cf21 #define DOCTEST_DECLARE_STATIC_MUTEX(name) static DOCTEST_DECLARE_MUTEX(name)}\par
3175 {\cf21 #define DOCTEST_LOCK_MUTEX(name) std::lock_guard<std::mutex> DOCTEST_ANONYMOUS(DOCTEST_ANON_LOCK_)(name);}\par
3176 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_MULTITHREADING}\par
3177 {\cf21 #define DOCTEST_DECLARE_MUTEX(name)}\par
3178 {\cf21 #define DOCTEST_DECLARE_STATIC_MUTEX(name)}\par
3179 {\cf21 #define DOCTEST_LOCK_MUTEX(name)}\par
3180 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_MULTITHREADING}\par
3181 {\cf21 #include <set>}\par
3182 {\cf21 #include <map>}\par
3183 {\cf21 #include <unordered_set>}\par
3184 {\cf21 #include <exception>}\par
3185 {\cf21 #include <stdexcept>}\par
3186 {\cf21 #include <csignal>}\par
3187 {\cf21 #include <cfloat>}\par
3188 {\cf21 #include <cctype>}\par
3189 {\cf21 #include <cstdint>}\par
3190 {\cf21 #include <string>}\par
3191 \par
3192 {\cf21 #ifdef DOCTEST_PLATFORM_MAC}\par
3193 {\cf21 #include <sys/types.h>}\par
3194 {\cf21 #include <unistd.h>}\par
3195 {\cf21 #include <sys/sysctl.h>}\par
3196 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_MAC}\par
3197 \par
3198 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
3199 \par
3200 {\cf20 // defines for a leaner windows.h}\par
3201 {\cf21 #ifndef WIN32_LEAN_AND_MEAN}\par
3202 {\cf21 #define WIN32_LEAN_AND_MEAN}\par
3203 {\cf21 #define DOCTEST_UNDEF_WIN32_LEAN_AND_MEAN}\par
3204 {\cf21 #endif }{\cf20 // WIN32_LEAN_AND_MEAN}\par
3205 {\cf21 #ifndef NOMINMAX}\par
3206 {\cf21 #define NOMINMAX}\par
3207 {\cf21 #define DOCTEST_UNDEF_NOMINMAX}\par
3208 {\cf21 #endif }{\cf20 // NOMINMAX}\par
3209 \par
3210 {\cf20 // not sure what AfxWin.h is for - here I do what Catch does}\par
3211 {\cf21 #ifdef __AFXDLL}\par
3212 {\cf21 #include <AfxWin.h>}\par
3213 {\cf21 #else}\par
3214 {\cf21 #include <windows.h>}\par
3215 {\cf21 #endif}\par
3216 {\cf21 #include <io.h>}\par
3217 \par
3218 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
3219 \par
3220 {\cf21 #include <sys/time.h>}\par
3221 {\cf21 #include <unistd.h>}\par
3222 \par
3223 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
3224 \par
3225 {\cf20 // this is a fix for https://github.com/doctest/doctest/issues/348}\par
3226 {\cf20 // https://mail.gnome.org/archives/xml/2012-January/msg00000.html}\par
3227 {\cf21 #if !defined(HAVE_UNISTD_H) && !defined(STDOUT_FILENO)}\par
3228 {\cf21 #define STDOUT_FILENO fileno(stdout)}\par
3229 {\cf21 #endif }{\cf20 // HAVE_UNISTD_H}\par
3230 \par
3231 DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END\par
3232 \par
3233 {\cf20 // counts the number of elements in a C array}\par
3234 {\cf21 #define DOCTEST_COUNTOF(x) (sizeof(x) / sizeof(x[0]))}\par
3235 \par
3236 {\cf21 #ifdef DOCTEST_CONFIG_DISABLE}\par
3237 {\cf21 #define DOCTEST_BRANCH_ON_DISABLED(if_disabled, if_not_disabled) if_disabled}\par
3238 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3239 {\cf21 #define DOCTEST_BRANCH_ON_DISABLED(if_disabled, if_not_disabled) if_not_disabled}\par
3240 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3241 \par
3242 {\cf21 #ifndef DOCTEST_CONFIG_OPTIONS_PREFIX}\par
3243 {\cf21 #define DOCTEST_CONFIG_OPTIONS_PREFIX "dt-"}\par
3244 {\cf21 #endif}\par
3245 \par
3246 {\cf21 #ifndef DOCTEST_THREAD_LOCAL}\par
3247 {\cf21 #if defined(DOCTEST_CONFIG_NO_MULTITHREADING) || DOCTEST_MSVC && (DOCTEST_MSVC < DOCTEST_COMPILER(19, 0, 0))}\par
3248 {\cf21 #define DOCTEST_THREAD_LOCAL}\par
3249 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
3250 {\cf21 #define DOCTEST_THREAD_LOCAL thread_local}\par
3251 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
3252 {\cf21 #endif }{\cf20 // DOCTEST_THREAD_LOCAL}\par
3253 \par
3254 {\cf21 #ifndef DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES}\par
3255 {\cf21 #define DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES 32}\par
3256 {\cf21 #endif}\par
3257 \par
3258 {\cf21 #ifndef DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE}\par
3259 {\cf21 #define DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE 64}\par
3260 {\cf21 #endif}\par
3261 \par
3262 {\cf21 #ifdef DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS}\par
3263 {\cf21 #define DOCTEST_OPTIONS_PREFIX_DISPLAY DOCTEST_CONFIG_OPTIONS_PREFIX}\par
3264 {\cf21 #else}\par
3265 {\cf21 #define DOCTEST_OPTIONS_PREFIX_DISPLAY ""}\par
3266 {\cf21 #endif}\par
3267 \par
3268 {\cf21 #if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)}\par
3269 {\cf21 #define DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS}\par
3270 {\cf21 #endif}\par
3271 \par
3272 {\cf21 #ifndef DOCTEST_CDECL}\par
3273 {\cf21 #define DOCTEST_CDECL __cdecl}\par
3274 {\cf21 #endif}\par
3275 \par
3276 {\cf17 namespace }doctest \{\par
3277 \par
3278 {\cf18 bool} is_running_in_test = {\cf17 false};\par
3279 \par
3280 {\cf17 namespace }\{\par
3281     {\cf17 using namespace }detail;\par
3282 \par
3283     {\cf17 template} <{\cf17 typename} Ex>\par
3284     DOCTEST_NORETURN {\cf18 void} throw_exception(Ex {\cf17 const}& e) \{\par
3285 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
3286         {\cf19 throw} e;\par
3287 {\cf21 #else  }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
3288 {\cf21 #ifdef DOCTEST_CONFIG_HANDLE_EXCEPTION}\par
3289         DOCTEST_CONFIG_HANDLE_EXCEPTION(e);\par
3290 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_HANDLE_EXCEPTION}\par
3291 {\cf21 #ifndef DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM}\par
3292         std::cerr << {\cf22 "doctest will terminate because it needed to throw an exception.\\n"}\par
3293                   << {\cf22 "The message was: "} << e.what() << {\cf23 '\\n'};\par
3294 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM}\par
3295 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_HANDLE_EXCEPTION}\par
3296         std::terminate();\par
3297 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
3298     \}\par
3299 \par
3300 {\cf21 #ifndef DOCTEST_INTERNAL_ERROR}\par
3301 {\cf21 #define DOCTEST_INTERNAL_ERROR(msg)                                                                \\}\par
3302 {\cf21     throw_exception(std::logic_error(                                                              \\}\par
3303 {\cf21             __FILE__ ":" DOCTEST_TOSTR(__LINE__) ": Internal doctest error: " msg))}\par
3304 {\cf21 #endif }{\cf20 // DOCTEST_INTERNAL_ERROR}\par
3305 \par
3306     {\cf20 // case insensitive strcmp}\par
3307     {\cf18 int} stricmp({\cf17 const} {\cf18 char}* a, {\cf17 const} {\cf18 char}* b) \{\par
3308         {\cf19 for}(;; a++, b++) \{\par
3309             {\cf17 const} {\cf18 int} d = tolower(*a) - tolower(*b);\par
3310             {\cf19 if}(d != 0 || !*a)\par
3311                 {\cf19 return} d;\par
3312         \}\par
3313     \}\par
3314 \par
3315     {\cf17 struct }Endianness\par
3316     \{\par
3317         {\cf17 enum} Arch\par
3318         \{\par
3319             Big,\par
3320             Little\par
3321         \};\par
3322 \par
3323         {\cf17 static} Arch which() \{\par
3324             {\cf18 int} x = 1;\par
3325             {\cf20 // casting any data pointer to char* is allowed}\par
3326             {\cf17 auto} ptr = {\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(&x);\par
3327             {\cf19 if}(*ptr)\par
3328                 {\cf19 return} Little;\par
3329             {\cf19 return} Big;\par
3330         \}\par
3331     \};\par
3332 \} {\cf20 // namespace}\par
3333 \par
3334 {\cf17 namespace }detail \{\par
3335     DOCTEST_THREAD_LOCAL {\cf17 class}\par
3336     \{\par
3337         std::vector<std::streampos> stack;\par
3338         std::stringstream           ss;\par
3339 \par
3340     {\cf17 public}:\par
3341         std::ostream* push() \{\par
3342             stack.push_back(ss.tellp());\par
3343             {\cf19 return} &ss;\par
3344         \}\par
3345 \par
3346         String pop() \{\par
3347             {\cf19 if} (stack.empty())\par
3348                 DOCTEST_INTERNAL_ERROR({\cf22 "TLSS was empty when trying to pop!"});\par
3349 \par
3350             std::streampos pos = stack.back();\par
3351             stack.pop_back();\par
3352             {\cf18 unsigned} sz = {\cf17 static_cast<}{\cf18 unsigned}{\cf17 >}(ss.tellp() - pos);\par
3353             ss.rdbuf()->pubseekpos(pos, std::ios::in | std::ios::out);\par
3354             {\cf19 return} String(ss, sz);\par
3355         \}\par
3356     \} g_oss;\par
3357 \par
3358     std::ostream* tlssPush() \{\par
3359         {\cf19 return} g_oss.push();\par
3360     \}\par
3361 \par
3362     String tlssPop() \{\par
3363         {\cf19 return} g_oss.pop();\par
3364     \}\par
3365 \par
3366 {\cf21 #ifndef DOCTEST_CONFIG_DISABLE}\par
3367 \par
3368 {\cf17 namespace }timer_large_integer\par
3369 \{\par
3370 \par
3371 {\cf21 #if defined(DOCTEST_PLATFORM_WINDOWS)}\par
3372     {\cf17 using }type = ULONGLONG;\par
3373 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
3374     {\cf17 using }type = std::uint64_t;\par
3375 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
3376 \}\par
3377 \par
3378 {\cf17 using }ticks_t = timer_large_integer::type;\par
3379 \par
3380 {\cf21 #ifdef DOCTEST_CONFIG_GETCURRENTTICKS}\par
3381     ticks_t getCurrentTicks() \{ {\cf19 return} DOCTEST_CONFIG_GETCURRENTTICKS(); \}\par
3382 {\cf21 #elif defined(DOCTEST_PLATFORM_WINDOWS)}\par
3383     ticks_t getCurrentTicks() \{\par
3384         {\cf17 static} LARGE_INTEGER hz = \{ \{0\} \}, hzo = \{ \{0\} \};\par
3385         {\cf19 if}(!hz.QuadPart) \{\par
3386             QueryPerformanceFrequency(&hz);\par
3387             QueryPerformanceCounter(&hzo);\par
3388         \}\par
3389         LARGE_INTEGER t;\par
3390         QueryPerformanceCounter(&t);\par
3391         {\cf19 return} ((t.QuadPart - hzo.QuadPart) * LONGLONG(1000000)) / hz.QuadPart;\par
3392     \}\par
3393 {\cf21 #else  }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
3394     ticks_t getCurrentTicks() \{\par
3395         timeval t;\par
3396         gettimeofday(&t, {\cf17 nullptr});\par
3397         {\cf19 return} {\cf17 static_cast<}ticks_t{\cf17 >}(t.tv_sec) * 1000000 + {\cf17 static_cast<}ticks_t{\cf17 >}(t.tv_usec);\par
3398     \}\par
3399 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
3400 \par
3401     {\cf17 struct }Timer\par
3402     \{\par
3403         {\cf18 void}         start() \{ m_ticks = getCurrentTicks(); \}\par
3404         {\cf18 unsigned} {\cf18 int} getElapsedMicroseconds(){\cf17  const }\{\par
3405             {\cf19 return} {\cf17 static_cast<}{\cf18 unsigned} {\cf18 int}{\cf17 >}(getCurrentTicks() - m_ticks);\par
3406         \}\par
3407         {\cf20 //unsigned int getElapsedMilliseconds() const \{}\par
3408         {\cf20 //    return static_cast<unsigned int>(getElapsedMicroseconds() / 1000);}\par
3409         {\cf20 //\}}\par
3410         {\cf18 double} getElapsedSeconds(){\cf17  const }\{ {\cf19 return} {\cf17 static_cast<}{\cf18 double}{\cf17 >}(getCurrentTicks() - m_ticks) / 1000000.0; \}\par
3411 \par
3412     {\cf17 private}:\par
3413         ticks_t m_ticks = 0;\par
3414     \};\par
3415 \par
3416 {\cf21 #ifdef DOCTEST_CONFIG_NO_MULTITHREADING}\par
3417     {\cf17 template} <{\cf17 typename} T>\par
3418     {\cf17 using }Atomic = T;\par
3419 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_MULTITHREADING}\par
3420     {\cf17 template} <{\cf17 typename} T>\par
3421     {\cf17 using }Atomic = std::atomic<T>;\par
3422 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_MULTITHREADING}\par
3423 \par
3424 {\cf21 #if defined(DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS) || defined(DOCTEST_CONFIG_NO_MULTITHREADING)}\par
3425     {\cf17 template} <{\cf17 typename} T>\par
3426     {\cf17 using }MultiLaneAtomic = Atomic<T>;\par
3427 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS}\par
3428     {\cf20 // Provides a multilane implementation of an atomic variable that supports add, sub, load,}\par
3429     {\cf20 // store. Instead of using a single atomic variable, this splits up into multiple ones,}\par
3430     {\cf20 // each sitting on a separate cache line. The goal is to provide a speedup when most}\par
3431     {\cf20 // operations are modifying. It achieves this with two properties:}\par
3432     {\cf20 //}\par
3433     {\cf20 // * Multiple atomics are used, so chance of congestion from the same atomic is reduced.}\par
3434     {\cf20 // * Each atomic sits on a separate cache line, so false sharing is reduced.}\par
3435     {\cf20 //}\par
3436     {\cf20 // The disadvantage is that there is a small overhead due to the use of TLS, and load/store}\par
3437     {\cf20 // is slower because all atomics have to be accessed.}\par
3438     {\cf17 template} <{\cf17 typename} T>\par
3439     {\cf17 class }MultiLaneAtomic\par
3440     \{\par
3441         {\cf17 struct }CacheLineAlignedAtomic\par
3442         \{\par
3443             Atomic<T> atomic\{\};\par
3444             {\cf18 char} padding[DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE - {\cf17 sizeof}(Atomic<T>)];\par
3445         \};\par
3446         CacheLineAlignedAtomic m_atomics[DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES];\par
3447 \par
3448         {\cf17 static_assert}({\cf17 sizeof}(CacheLineAlignedAtomic) == DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE,\par
3449                       {\cf22 "guarantee one atomic takes exactly one cache line"});\par
3450 \par
3451     {\cf17 public}:\par
3452         T operator++() DOCTEST_NOEXCEPT \{ {\cf19 return} fetch_add(1) + 1; \}\par
3453 \par
3454         T operator++({\cf18 int}) DOCTEST_NOEXCEPT \{ {\cf19 return} fetch_add(1); \}\par
3455 \par
3456         T fetch_add(T arg, std::memory_order order = std::memory_order_seq_cst) DOCTEST_NOEXCEPT \{\par
3457             {\cf19 return} myAtomic().fetch_add(arg, order);\par
3458         \}\par
3459 \par
3460         T fetch_sub(T arg, std::memory_order order = std::memory_order_seq_cst) DOCTEST_NOEXCEPT \{\par
3461             {\cf19 return} myAtomic().fetch_sub(arg, order);\par
3462         \}\par
3463 \par
3464         {\cf17 operator} T() {\cf17 const} DOCTEST_NOEXCEPT \{ {\cf19 return} load(); \}\par
3465 \par
3466         T load(std::memory_order order = std::memory_order_seq_cst) {\cf17 const} DOCTEST_NOEXCEPT \{\par
3467             {\cf17 auto} result = T();\par
3468             {\cf19 for}({\cf17 auto} {\cf17 const}& c : m_atomics) \{\par
3469                 result += c.atomic.load(order);\par
3470             \}\par
3471             {\cf19 return} result;\par
3472         \}\par
3473 \par
3474         T operator=(T desired) DOCTEST_NOEXCEPT \{ {\cf20 // lgtm [cpp/assignment-does-not-return-this]}\par
3475             store(desired);\par
3476             {\cf19 return} desired;\par
3477         \}\par
3478 \par
3479         {\cf18 void} store(T desired, std::memory_order order = std::memory_order_seq_cst) DOCTEST_NOEXCEPT \{\par
3480             {\cf20 // first value becomes desired", all others become 0.}\par
3481             {\cf19 for}({\cf17 auto}& c : m_atomics) \{\par
3482                 c.atomic.store(desired, order);\par
3483                 desired = \{\};\par
3484             \}\par
3485         \}\par
3486 \par
3487     {\cf17 private}:\par
3488         {\cf20 // Each thread has a different atomic that it operates on. If more than NumLanes threads}\par
3489         {\cf20 // use this, some will use the same atomic. So performance will degrade a bit, but still}\par
3490         {\cf20 // everything will work.}\par
3491         {\cf20 //}\par
3492         {\cf20 // The logic here is a bit tricky. The call should be as fast as possible, so that there}\par
3493         {\cf20 // is minimal to no overhead in determining the correct atomic for the current thread.}\par
3494         {\cf20 //}\par
3495         {\cf20 // 1. A global static counter laneCounter counts continuously up.}\par
3496         {\cf20 // 2. Each successive thread will use modulo operation of that counter so it gets an atomic}\par
3497         {\cf20 //    assigned in a round-robin fashion.}\par
3498         {\cf20 // 3. This tlsLaneIdx is stored in the thread local data, so it is directly available with}\par
3499         {\cf20 //    little overhead.}\par
3500         Atomic<T>& myAtomic() DOCTEST_NOEXCEPT \{\par
3501             {\cf17 static} Atomic<size_t> laneCounter;\par
3502             DOCTEST_THREAD_LOCAL {\cf18 size_t} tlsLaneIdx =\par
3503                     laneCounter++ % DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES;\par
3504 \par
3505             {\cf19 return} m_atomics[tlsLaneIdx].atomic;\par
3506         \}\par
3507     \};\par
3508 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS}\par
3509 \par
3510     {\cf20 // this holds both parameters from the command line and runtime data for tests}\par
3511     {\cf17 struct }ContextState : ContextOptions, TestRunStats, CurrentTestCaseStats\par
3512     \{\par
3513         MultiLaneAtomic<int> numAssertsCurrentTest_atomic;\par
3514         MultiLaneAtomic<int> numAssertsFailedCurrentTest_atomic;\par
3515 \par
3516         std::vector<std::vector<String>> filters = {\cf17 decltype}(filters)(9); {\cf20 // 9 different filters}\par
3517 \par
3518         std::vector<IReporter*> reporters_currently_used;\par
3519 \par
3520         assert_handler ah = {\cf17 nullptr};\par
3521 \par
3522         Timer timer;\par
3523 \par
3524         std::vector<String> stringifiedContexts; {\cf20 // logging from INFO() due to an exception}\par
3525 \par
3526         {\cf20 // stuff for subcases}\par
3527         {\cf18 bool} reachedLeaf;\par
3528         std::vector<SubcaseSignature> subcaseStack;\par
3529         std::vector<SubcaseSignature> nextSubcaseStack;\par
3530         std::unordered_set<unsigned long long> fullyTraversedSubcases;\par
3531         {\cf18 size_t} currentSubcaseDepth;\par
3532         Atomic<bool> shouldLogCurrentException;\par
3533 \par
3534         {\cf18 void} resetRunData() \{\par
3535             numTestCases                = 0;\par
3536             numTestCasesPassingFilters  = 0;\par
3537             numTestSuitesPassingFilters = 0;\par
3538             numTestCasesFailed          = 0;\par
3539             numAsserts                  = 0;\par
3540             numAssertsFailed            = 0;\par
3541             numAssertsCurrentTest       = 0;\par
3542             numAssertsFailedCurrentTest = 0;\par
3543         \}\par
3544 \par
3545         {\cf18 void} finalizeTestCaseData() \{\par
3546             seconds = timer.getElapsedSeconds();\par
3547 \par
3548             {\cf20 // update the non-atomic counters}\par
3549             numAsserts += numAssertsCurrentTest_atomic;\par
3550             numAssertsFailed += numAssertsFailedCurrentTest_atomic;\par
3551             numAssertsCurrentTest       = numAssertsCurrentTest_atomic;\par
3552             numAssertsFailedCurrentTest = numAssertsFailedCurrentTest_atomic;\par
3553 \par
3554             {\cf19 if}(numAssertsFailedCurrentTest)\par
3555                 failure_flags |= TestCaseFailureReason::AssertFailure;\par
3556 \par
3557             {\cf19 if}(Approx(currentTest->m_timeout).epsilon(DBL_EPSILON) != 0 &&\par
3558                Approx(seconds).epsilon(DBL_EPSILON) > currentTest->m_timeout)\par
3559                 failure_flags |= TestCaseFailureReason::Timeout;\par
3560 \par
3561             {\cf19 if}(currentTest->m_should_fail) \{\par
3562                 {\cf19 if}(failure_flags) \{\par
3563                     failure_flags |= TestCaseFailureReason::ShouldHaveFailedAndDid;\par
3564                 \} {\cf19 else} \{\par
3565                     failure_flags |= TestCaseFailureReason::ShouldHaveFailedButDidnt;\par
3566                 \}\par
3567             \} {\cf19 else} {\cf19 if}(failure_flags && currentTest->m_may_fail) \{\par
3568                 failure_flags |= TestCaseFailureReason::CouldHaveFailedAndDid;\par
3569             \} {\cf19 else} {\cf19 if}(currentTest->m_expected_failures > 0) \{\par
3570                 {\cf19 if}(numAssertsFailedCurrentTest == currentTest->m_expected_failures) \{\par
3571                     failure_flags |= TestCaseFailureReason::FailedExactlyNumTimes;\par
3572                 \} {\cf19 else} \{\par
3573                     failure_flags |= TestCaseFailureReason::DidntFailExactlyNumTimes;\par
3574                 \}\par
3575             \}\par
3576 \par
3577             {\cf18 bool} ok_to_fail = (TestCaseFailureReason::ShouldHaveFailedAndDid & failure_flags) ||\par
3578                               (TestCaseFailureReason::CouldHaveFailedAndDid & failure_flags) ||\par
3579                               (TestCaseFailureReason::FailedExactlyNumTimes & failure_flags);\par
3580 \par
3581             {\cf20 // if any subcase has failed - the whole test case has failed}\par
3582             testCaseSuccess = !(failure_flags && !ok_to_fail);\par
3583             {\cf19 if}(!testCaseSuccess)\par
3584                 numTestCasesFailed++;\par
3585         \}\par
3586     \};\par
3587 \par
3588     ContextState* g_cs = {\cf17 nullptr};\par
3589 \par
3590     {\cf20 // used to avoid locks for the debug output}\par
3591     {\cf20 // TODO: figure out if this is indeed necessary/correct - seems like either there still}\par
3592     {\cf20 // could be a race or that there wouldn't be a race even if using the context directly}\par
3593     DOCTEST_THREAD_LOCAL {\cf18 bool} g_no_colors;\par
3594 \par
3595 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3596 \} {\cf20 // namespace detail}\par
3597 \par
3598 {\cf18 char}* String::allocate(size_type sz) \{\par
3599     {\cf19 if} (sz <= last) \{\par
3600         buf[sz] = {\cf23 '\\0'};\par
3601         setLast(last - sz);\par
3602         {\cf19 return} buf;\par
3603     \} {\cf19 else} \{\par
3604         setOnHeap();\par
3605         data.size = sz;\par
3606         data.capacity = data.size + 1;\par
3607         data.ptr = {\cf17 new} {\cf18 char}[data.capacity];\par
3608         data.ptr[sz] = {\cf23 '\\0'};\par
3609         {\cf19 return} data.ptr;\par
3610     \}\par
3611 \}\par
3612 \par
3613 {\cf18 void} String::setOnHeap() {\cf17 noexcept} \{ *{\cf17 reinterpret_cast<}{\cf18 unsigned} {\cf18 char}*{\cf17 >}(&buf[last]) = 128; \}\par
3614 {\cf18 void} String::setLast(size_type in) {\cf17 noexcept} \{ buf[last] = char(in); \}\par
3615 {\cf18 void} String::setSize(size_type sz) {\cf17 noexcept} \{\par
3616     {\cf19 if} (isOnStack()) \{ buf[sz] = {\cf23 '\\0'}; setLast(last - sz); \}\par
3617     {\cf19 else} \{ data.ptr[sz] = {\cf23 '\\0'}; data.size = sz; \}\par
3618 \}\par
3619 \par
3620 {\cf18 void} String::copy({\cf17 const} String& other) \{\par
3621     {\cf19 if}(other.isOnStack()) \{\par
3622         memcpy(buf, other.buf, len);\par
3623     \} {\cf19 else} \{\par
3624         memcpy(allocate(other.data.size), other.data.ptr, other.data.size);\par
3625     \}\par
3626 \}\par
3627 \par
3628 String::String() {\cf17 noexcept} \{\par
3629     buf[0] = {\cf23 '\\0'};\par
3630     setLast();\par
3631 \}\par
3632 \par
3633 String::~String() \{\par
3634     {\cf19 if}(!isOnStack())\par
3635         {\cf17 delete}[] data.ptr;\par
3636 \} {\cf20 // NOLINT(clang-analyzer-cplusplus.NewDeleteLeaks)}\par
3637 \par
3638 String::String({\cf17 const} {\cf18 char}* in)\par
3639         : String(in, strlen(in)) \{\}\par
3640 \par
3641 String::String({\cf17 const} {\cf18 char}* in, size_type in_size) \{\par
3642     memcpy(allocate(in_size), in, in_size);\par
3643 \}\par
3644 \par
3645 String::String(std::istream& in, size_type in_size) \{\par
3646     in.read(allocate(in_size), in_size);\par
3647 \}\par
3648 \par
3649 String::String({\cf17 const} String& other) \{ copy(other); \}\par
3650 \par
3651 String& String::operator=({\cf17 const} String& other) \{\par
3652     {\cf19 if}({\cf17 this} != &other) \{\par
3653         {\cf19 if}(!isOnStack())\par
3654             {\cf17 delete}[] data.ptr;\par
3655 \par
3656         copy(other);\par
3657     \}\par
3658 \par
3659     {\cf19 return} *{\cf17 this};\par
3660 \}\par
3661 \par
3662 String& String::operator+=({\cf17 const} String& other) \{\par
3663     {\cf17 const} size_type my_old_size = size();\par
3664     {\cf17 const} size_type other_size  = other.size();\par
3665     {\cf17 const} size_type total_size  = my_old_size + other_size;\par
3666     {\cf19 if}(isOnStack()) \{\par
3667         {\cf19 if}(total_size < len) \{\par
3668             {\cf20 // append to the current stack space}\par
3669             memcpy(buf + my_old_size, other.c_str(), other_size + 1);\par
3670             {\cf20 // NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)}\par
3671             setLast(last - total_size);\par
3672         \} {\cf19 else} \{\par
3673             {\cf20 // alloc new chunk}\par
3674             {\cf18 char}* temp = {\cf17 new} {\cf18 char}[total_size + 1];\par
3675             {\cf20 // copy current data to new location before writing in the union}\par
3676             memcpy(temp, buf, my_old_size); {\cf20 // skip the +1 ('\\0') for speed}\par
3677             {\cf20 // update data in union}\par
3678             setOnHeap();\par
3679             data.size     = total_size;\par
3680             data.capacity = data.size + 1;\par
3681             data.ptr      = temp;\par
3682             {\cf20 // transfer the rest of the data}\par
3683             memcpy(data.ptr + my_old_size, other.c_str(), other_size + 1);\par
3684         \}\par
3685     \} {\cf19 else} \{\par
3686         {\cf19 if}(data.capacity > total_size) \{\par
3687             {\cf20 // append to the current heap block}\par
3688             data.size = total_size;\par
3689             memcpy(data.ptr + my_old_size, other.c_str(), other_size + 1);\par
3690         \} {\cf19 else} \{\par
3691             {\cf20 // resize}\par
3692             data.capacity *= 2;\par
3693             {\cf19 if}(data.capacity <= total_size)\par
3694                 data.capacity = total_size + 1;\par
3695             {\cf20 // alloc new chunk}\par
3696             {\cf18 char}* temp = {\cf17 new} {\cf18 char}[data.capacity];\par
3697             {\cf20 // copy current data to new location before releasing it}\par
3698             memcpy(temp, data.ptr, my_old_size); {\cf20 // skip the +1 ('\\0') for speed}\par
3699             {\cf20 // release old chunk}\par
3700             {\cf17 delete}[] data.ptr;\par
3701             {\cf20 // update the rest of the union members}\par
3702             data.size = total_size;\par
3703             data.ptr  = temp;\par
3704             {\cf20 // transfer the rest of the data}\par
3705             memcpy(data.ptr + my_old_size, other.c_str(), other_size + 1);\par
3706         \}\par
3707     \}\par
3708 \par
3709     {\cf19 return} *{\cf17 this};\par
3710 \}\par
3711 \par
3712 String::String(String&& other) {\cf17 noexcept} \{\par
3713     memcpy(buf, other.buf, len);\par
3714     other.buf[0] = {\cf23 '\\0'};\par
3715     other.setLast();\par
3716 \}\par
3717 \par
3718 String& String::operator=(String&& other) {\cf17 noexcept} \{\par
3719     {\cf19 if}({\cf17 this} != &other) \{\par
3720         {\cf19 if}(!isOnStack())\par
3721             {\cf17 delete}[] data.ptr;\par
3722         memcpy(buf, other.buf, len);\par
3723         other.buf[0] = {\cf23 '\\0'};\par
3724         other.setLast();\par
3725     \}\par
3726     {\cf19 return} *{\cf17 this};\par
3727 \}\par
3728 \par
3729 {\cf18 char} String::operator[](size_type i){\cf17  const }\{\par
3730     {\cf19 return} {\cf17 const_cast<}String*{\cf17 >}({\cf17 this})->{\cf17 operator}[](i);\par
3731 \}\par
3732 \par
3733 {\cf18 char}& String::operator[](size_type i) \{\par
3734     {\cf19 if}(isOnStack())\par
3735         {\cf19 return} {\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(buf)[i];\par
3736     {\cf19 return} data.ptr[i];\par
3737 \}\par
3738 \par
3739 DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wmaybe-uninitialized"})\par
3740 String::size_type String::size(){\cf17  const }\{\par
3741     {\cf19 if}(isOnStack())\par
3742         {\cf19 return} last - (size_type(buf[last]) & 31); {\cf20 // using "last" would work only if "len" is 32}\par
3743     {\cf19 return} data.size;\par
3744 \}\par
3745 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
3746 \par
3747 String::size_type String::capacity(){\cf17  const }\{\par
3748     {\cf19 if}(isOnStack())\par
3749         {\cf19 return} len;\par
3750     {\cf19 return} data.capacity;\par
3751 \}\par
3752 \par
3753 String String::substr(size_type pos, size_type cnt) && \{\par
3754     cnt = std::min(cnt, size() - 1 - pos);\par
3755     {\cf18 char}* cptr = c_str();\par
3756     memmove(cptr, cptr + pos, cnt);\par
3757     setSize(cnt);\par
3758     {\cf19 return} std::move(*{\cf17 this});\par
3759 \}\par
3760 \par
3761 String String::substr(size_type pos, size_type cnt) {\cf17 const} & \{\par
3762     cnt = std::min(cnt, size() - 1 - pos);\par
3763     {\cf19 return} String\{ c_str() + pos, cnt \};\par
3764 \}\par
3765 \par
3766 String::size_type String::find({\cf18 char} ch, size_type pos){\cf17  const }\{\par
3767     {\cf17 const} {\cf18 char}* begin = c_str();\par
3768     {\cf17 const} {\cf18 char}* end = begin + size();\par
3769     {\cf17 const} {\cf18 char}* it = begin + pos;\par
3770     {\cf19 for} (; it < end && *it != ch; it++);\par
3771     {\cf19 if} (it < end) \{ {\cf19 return} {\cf17 static_cast<}size_type{\cf17 >}(it - begin); \}\par
3772     {\cf19 else} \{ {\cf19 return} npos; \}\par
3773 \}\par
3774 \par
3775 String::size_type String::rfind({\cf18 char} ch, size_type pos){\cf17  const }\{\par
3776     {\cf17 const} {\cf18 char}* begin = c_str();\par
3777     {\cf17 const} {\cf18 char}* it = begin + std::min(pos, size() - 1);\par
3778     {\cf19 for} (; it >= begin && *it != ch; it--);\par
3779     {\cf19 if} (it >= begin) \{ {\cf19 return} {\cf17 static_cast<}size_type{\cf17 >}(it - begin); \}\par
3780     {\cf19 else} \{ {\cf19 return} npos; \}\par
3781 \}\par
3782 \par
3783 {\cf18 int} String::compare({\cf17 const} {\cf18 char}* other, {\cf18 bool} no_case){\cf17  const }\{\par
3784     {\cf19 if}(no_case)\par
3785         {\cf19 return} doctest::stricmp(c_str(), other);\par
3786     {\cf19 return} std::strcmp(c_str(), other);\par
3787 \}\par
3788 \par
3789 {\cf18 int} String::compare({\cf17 const} String& other, {\cf18 bool} no_case){\cf17  const }\{\par
3790     {\cf19 return} compare(other.c_str(), no_case);\par
3791 \}\par
3792 \par
3793 String operator+({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return}  String(lhs) += rhs; \}\par
3794 \par
3795 {\cf18 bool} operator==({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.compare(rhs) == 0; \}\par
3796 {\cf18 bool} operator!=({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.compare(rhs) != 0; \}\par
3797 {\cf18 bool} operator< ({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.compare(rhs) < 0; \}\par
3798 {\cf18 bool} operator> ({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.compare(rhs) > 0; \}\par
3799 {\cf18 bool} operator<=({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} (lhs != rhs) ? lhs.compare(rhs) < 0 : {\cf17 true}; \}\par
3800 {\cf18 bool} operator>=({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} (lhs != rhs) ? lhs.compare(rhs) > 0 : {\cf17 true}; \}\par
3801 \par
3802 std::ostream& operator<<(std::ostream& s, {\cf17 const} String& in) \{ {\cf19 return} s << in.c_str(); \}\par
3803 \par
3804 Contains::Contains({\cf17 const} String& str) : string(str) \{ \}\par
3805 \par
3806 {\cf18 bool} Contains::checkWith({\cf17 const} String& other){\cf17  const }\{\par
3807     {\cf19 return} strstr(other.c_str(), {\cf18 string}.c_str()) != {\cf17 nullptr};\par
3808 \}\par
3809 \par
3810 String toString({\cf17 const} Contains& in) \{\par
3811     {\cf19 return} {\cf22 "Contains( "} + in.string + {\cf22 " )"};\par
3812 \}\par
3813 \par
3814 {\cf18 bool} operator==({\cf17 const} String& lhs, {\cf17 const} Contains& rhs) \{ {\cf19 return} rhs.checkWith(lhs); \}\par
3815 {\cf18 bool} operator==({\cf17 const} Contains& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.checkWith(rhs); \}\par
3816 {\cf18 bool} operator!=({\cf17 const} String& lhs, {\cf17 const} Contains& rhs) \{ {\cf19 return} !rhs.checkWith(lhs); \}\par
3817 {\cf18 bool} operator!=({\cf17 const} Contains& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} !lhs.checkWith(rhs); \}\par
3818 \par
3819 {\cf17 namespace }\{\par
3820     {\cf18 void} color_to_stream(std::ostream&, Color::Enum) DOCTEST_BRANCH_ON_DISABLED(\{\}, ;)\par
3821 \} {\cf20 // namespace}\par
3822 \par
3823 {\cf17 namespace }Color \{\par
3824     std::ostream& operator<<(std::ostream& s, Color::Enum code) \{\par
3825         color_to_stream(s, code);\par
3826         {\cf19 return} s;\par
3827     \}\par
3828 \} {\cf20 // namespace Color}\par
3829 \par
3830 {\cf20 // clang-format off}\par
3831 {\cf17 const} {\cf18 char}* assertString(assertType::Enum at) \{\par
3832     DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4061) {\cf20 // enum 'x' in switch of enum 'y' is not explicitly handled}\par
3833     {\cf21 #define DOCTEST_GENERATE_ASSERT_TYPE_CASE(assert_type) case assertType::DT_ ## assert_type: return #assert_type}\par
3834 {\cf21     #define DOCTEST_GENERATE_ASSERT_TYPE_CASES(assert_type) \\}\par
3835 {\cf21         DOCTEST_GENERATE_ASSERT_TYPE_CASE(WARN_ ## assert_type); \\}\par
3836 {\cf21         DOCTEST_GENERATE_ASSERT_TYPE_CASE(CHECK_ ## assert_type); \\}\par
3837 {\cf21         DOCTEST_GENERATE_ASSERT_TYPE_CASE(REQUIRE_ ## assert_type)}\par
3838     {\cf19 switch}(at) \{\par
3839         DOCTEST_GENERATE_ASSERT_TYPE_CASE(WARN);\par
3840         DOCTEST_GENERATE_ASSERT_TYPE_CASE(CHECK);\par
3841         DOCTEST_GENERATE_ASSERT_TYPE_CASE(REQUIRE);\par
3842 \par
3843         DOCTEST_GENERATE_ASSERT_TYPE_CASES(FALSE);\par
3844 \par
3845         DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS);\par
3846 \par
3847         DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS_AS);\par
3848 \par
3849         DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS_WITH);\par
3850 \par
3851         DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS_WITH_AS);\par
3852 \par
3853         DOCTEST_GENERATE_ASSERT_TYPE_CASES(NOTHROW);\par
3854 \par
3855         DOCTEST_GENERATE_ASSERT_TYPE_CASES(EQ);\par
3856         DOCTEST_GENERATE_ASSERT_TYPE_CASES(NE);\par
3857         DOCTEST_GENERATE_ASSERT_TYPE_CASES(GT);\par
3858         DOCTEST_GENERATE_ASSERT_TYPE_CASES(LT);\par
3859         DOCTEST_GENERATE_ASSERT_TYPE_CASES(GE);\par
3860         DOCTEST_GENERATE_ASSERT_TYPE_CASES(LE);\par
3861 \par
3862         DOCTEST_GENERATE_ASSERT_TYPE_CASES(UNARY);\par
3863         DOCTEST_GENERATE_ASSERT_TYPE_CASES(UNARY_FALSE);\par
3864 \par
3865         {\cf19 default}: DOCTEST_INTERNAL_ERROR({\cf22 "Tried stringifying invalid assert type!"});\par
3866     \}\par
3867     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
3868 \}\par
3869 {\cf20 // clang-format on}\par
3870 \par
3871 {\cf17 const} {\cf18 char}* failureString(assertType::Enum at) \{\par
3872     {\cf19 if}(at & assertType::is_warn) \par
3873         {\cf19 return} {\cf22 "WARNING"};\par
3874     {\cf19 if}(at & assertType::is_check) \par
3875         {\cf19 return} {\cf22 "ERROR"};\par
3876     {\cf19 if}(at & assertType::is_require) \par
3877         {\cf19 return} {\cf22 "FATAL ERROR"};\par
3878     {\cf19 return} {\cf22 ""};\par
3879 \}\par
3880 \par
3881 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wnull-dereference"})\par
3882 DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wnull-dereference"})\par
3883 {\cf20 // depending on the current options this will remove the path of filenames}\par
3884 {\cf17 const} {\cf18 char}* skipPathFromFilename({\cf17 const} {\cf18 char}* file) \{\par
3885 {\cf21 #ifndef DOCTEST_CONFIG_DISABLE}\par
3886     {\cf19 if}(getContextOptions()->no_path_in_filenames) \{\par
3887         {\cf17 auto} back    = std::strrchr(file, {\cf23 '\\\\'});\par
3888         {\cf17 auto} forward = std::strrchr(file, {\cf23 '/'});\par
3889         {\cf19 if}(back || forward) \{\par
3890             {\cf19 if}(back > forward)\par
3891                 forward = back;\par
3892             {\cf19 return} forward + 1;\par
3893         \}\par
3894     \}\par
3895 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3896     {\cf19 return} file;\par
3897 \}\par
3898 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
3899 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
3900 \par
3901 {\cf18 bool} SubcaseSignature::operator==({\cf17 const} SubcaseSignature& other){\cf17  const }\{\par
3902     {\cf19 return} m_line == other.m_line\par
3903         && std::strcmp(m_file, other.m_file) == 0\par
3904         && m_name == other.m_name;\par
3905 \}\par
3906 \par
3907 {\cf18 bool} SubcaseSignature::operator<({\cf17 const} SubcaseSignature& other){\cf17  const }\{\par
3908     {\cf19 if}(m_line != other.m_line)\par
3909         {\cf19 return} m_line < other.m_line;\par
3910     {\cf19 if}(std::strcmp(m_file, other.m_file) != 0)\par
3911         {\cf19 return} std::strcmp(m_file, other.m_file) < 0;\par
3912     {\cf19 return} m_name.compare(other.m_name) < 0;\par
3913 \}\par
3914 \par
3915 DOCTEST_DEFINE_INTERFACE(IContextScope)\par
3916 \par
3917 {\cf17 namespace }detail \{\par
3918     {\cf18 void} filldata<const void*>::fill(std::ostream* stream, {\cf17 const} {\cf18 void}* in) \{\par
3919         {\cf19 if} (in) \{ *stream << in; \}\par
3920         {\cf19 else} \{ *stream << {\cf22 "nullptr"}; \}\par
3921     \}\par
3922 \par
3923     {\cf17 template} <{\cf17 typename} T>\par
3924     String toStreamLit(T t) \{\par
3925         std::ostream* os = tlssPush();\par
3926         os->operator<<(t);\par
3927         {\cf19 return} tlssPop();\par
3928     \}\par
3929 \}\par
3930 \par
3931 {\cf21 #ifdef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
3932 String toString({\cf17 const} {\cf18 char}* in) \{ {\cf19 return} String({\cf22 "\\""}) + (in ? in : {\cf22 "\{null string\}"}) + {\cf22 "\\""}; \}\par
3933 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
3934 \par
3935 {\cf21 #if DOCTEST_MSVC >= DOCTEST_COMPILER(19, 20, 0)}\par
3936 {\cf20 // see this issue on why this is needed: https://github.com/doctest/doctest/issues/183}\par
3937 String toString({\cf17 const} std::string& in) \{ {\cf19 return} in.c_str(); \}\par
3938 {\cf21 #endif }{\cf20 // VS 2019}\par
3939 \par
3940 String toString(String in) \{ {\cf19 return} in; \}\par
3941 \par
3942 String toString(std::nullptr_t) \{ {\cf19 return} {\cf22 "nullptr"}; \}\par
3943 \par
3944 String toString({\cf18 bool} in) \{ {\cf19 return} in ? {\cf22 "true"} : {\cf22 "false"}; \}\par
3945 \par
3946 String toString({\cf18 float} in) \{ {\cf19 return} toStreamLit(in); \}\par
3947 String toString({\cf18 double} in) \{ {\cf19 return} toStreamLit(in); \}\par
3948 String toString({\cf18 double} {\cf18 long} in) \{ {\cf19 return} toStreamLit(in); \}\par
3949 \par
3950 String toString({\cf18 char} in) \{ {\cf19 return} toStreamLit({\cf17 static_cast<}{\cf18 signed}{\cf17 >}(in)); \}\par
3951 String toString({\cf18 char} {\cf18 signed} in) \{ {\cf19 return} toStreamLit({\cf17 static_cast<}{\cf18 signed}{\cf17 >}(in)); \}\par
3952 String toString({\cf18 char} {\cf18 unsigned} in) \{ {\cf19 return} toStreamLit({\cf17 static_cast<}{\cf18 unsigned}{\cf17 >}(in)); \}\par
3953 String toString({\cf18 short} in) \{ {\cf19 return} toStreamLit(in); \}\par
3954 String toString({\cf18 short} {\cf18 unsigned} in) \{ {\cf19 return} toStreamLit(in); \}\par
3955 String toString({\cf18 signed} in) \{ {\cf19 return} toStreamLit(in); \}\par
3956 String toString({\cf18 unsigned} in) \{ {\cf19 return} toStreamLit(in); \}\par
3957 String toString({\cf18 long} in) \{ {\cf19 return} toStreamLit(in); \}\par
3958 String toString({\cf18 long} {\cf18 unsigned} in) \{ {\cf19 return} toStreamLit(in); \}\par
3959 String toString({\cf18 long} {\cf18 long} in) \{ {\cf19 return} toStreamLit(in); \}\par
3960 String toString({\cf18 long} {\cf18 long} {\cf18 unsigned} in) \{ {\cf19 return} toStreamLit(in); \}\par
3961 \par
3962 Approx::Approx({\cf18 double} value)\par
3963         : m_epsilon({\cf17 static_cast<}{\cf18 double}{\cf17 >}(std::numeric_limits<float>::epsilon()) * 100)\par
3964         , m_scale(1.0)\par
3965         , m_value(value) \{\}\par
3966 \par
3967 Approx Approx::operator()({\cf18 double} value){\cf17  const }\{\par
3968     Approx approx(value);\par
3969     approx.epsilon(m_epsilon);\par
3970     approx.scale(m_scale);\par
3971     {\cf19 return} approx;\par
3972 \}\par
3973 \par
3974 Approx& Approx::epsilon({\cf18 double} newEpsilon) \{\par
3975     m_epsilon = newEpsilon;\par
3976     {\cf19 return} *{\cf17 this};\par
3977 \}\par
3978 Approx& Approx::scale({\cf18 double} newScale) \{\par
3979     m_scale = newScale;\par
3980     {\cf19 return} *{\cf17 this};\par
3981 \}\par
3982 \par
3983 {\cf18 bool} operator==({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{\par
3984     {\cf20 // Thanks to Richard Harris for his help refining this formula}\par
3985     {\cf19 return} std::fabs(lhs - rhs.m_value) <\par
3986            rhs.m_epsilon * (rhs.m_scale + std::max<double>(std::fabs(lhs), std::fabs(rhs.m_value)));\par
3987 \}\par
3988 {\cf18 bool} operator==({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} operator==(rhs, lhs); \}\par
3989 {\cf18 bool} operator!=({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} !operator==(lhs, rhs); \}\par
3990 {\cf18 bool} operator!=({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} !operator==(rhs, lhs); \}\par
3991 {\cf18 bool} operator<=({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} lhs < rhs.m_value || lhs == rhs; \}\par
3992 {\cf18 bool} operator<=({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} lhs.m_value < rhs || lhs == rhs; \}\par
3993 {\cf18 bool} operator>=({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} lhs > rhs.m_value || lhs == rhs; \}\par
3994 {\cf18 bool} operator>=({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} lhs.m_value > rhs || lhs == rhs; \}\par
3995 {\cf18 bool} operator<({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} lhs < rhs.m_value && lhs != rhs; \}\par
3996 {\cf18 bool} operator<({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} lhs.m_value < rhs && lhs != rhs; \}\par
3997 {\cf18 bool} operator>({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} lhs > rhs.m_value && lhs != rhs; \}\par
3998 {\cf18 bool} operator>({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} lhs.m_value > rhs && lhs != rhs; \}\par
3999 \par
4000 String toString({\cf17 const} Approx& in) \{\par
4001     {\cf19 return} {\cf22 "Approx( "} + doctest::toString(in.m_value) + {\cf22 " )"};\par
4002 \}\par
4003 {\cf17 const} ContextOptions* getContextOptions() \{ {\cf19 return} DOCTEST_BRANCH_ON_DISABLED({\cf17 nullptr}, g_cs); \}\par
4004 \par
4005 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4738)\par
4006 {\cf17 template} <{\cf17 typename} F>\par
4007 IsNaN<F>::operator bool(){\cf17  const }\{\par
4008     {\cf19 return} std::isnan(value) ^ flipped;\par
4009 \}\par
4010 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
4011 {\cf17 template} {\cf17 struct }DOCTEST_INTERFACE_DEF IsNaN<float>;\par
4012 {\cf17 template} {\cf17 struct }DOCTEST_INTERFACE_DEF IsNaN<double>;\par
4013 {\cf17 template} {\cf17 struct }DOCTEST_INTERFACE_DEF IsNaN<long double>;\par
4014 {\cf17 template} <{\cf17 typename} F>\par
4015 String toString(IsNaN<F> in) \{ {\cf19 return} String(in.flipped ? {\cf22 "! "} : {\cf22 ""}) + {\cf22 "IsNaN( "} + doctest::toString(in.value) + {\cf22 " )"}; \}\par
4016 String toString(IsNaN<float> in) \{ {\cf19 return} toString<float>(in); \}\par
4017 String toString(IsNaN<double> in) \{ {\cf19 return} toString<double>(in); \}\par
4018 String toString(IsNaN<double long> in) \{ {\cf19 return} toString<double long>(in); \}\par
4019 \par
4020 \} {\cf20 // namespace doctest}\par
4021 \par
4022 {\cf21 #ifdef DOCTEST_CONFIG_DISABLE}\par
4023 {\cf17 namespace }doctest \{\par
4024 Context::Context({\cf18 int}, {\cf17 const} {\cf18 char}* {\cf17 const}*) \{\}\par
4025 Context::~Context() = {\cf19 default};\par
4026 {\cf18 void} Context::applyCommandLine({\cf18 int}, {\cf17 const} {\cf18 char}* {\cf17 const}*) \{\}\par
4027 {\cf18 void} Context::addFilter({\cf17 const} {\cf18 char}*, {\cf17 const} {\cf18 char}*) \{\}\par
4028 {\cf18 void} Context::clearFilters() \{\}\par
4029 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}*, {\cf18 bool}) \{\}\par
4030 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}*, {\cf18 int}) \{\}\par
4031 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}*, {\cf17 const} {\cf18 char}*) \{\}\par
4032 {\cf18 bool} Context::shouldExit() \{ {\cf19 return} {\cf17 false}; \}\par
4033 {\cf18 void} Context::setAsDefaultForAssertsOutOfTestCases() \{\}\par
4034 {\cf18 void} Context::setAssertHandler(detail::assert_handler) \{\}\par
4035 {\cf18 void} Context::setCout(std::ostream*) \{\}\par
4036 {\cf18 int}  Context::run() \{ {\cf19 return} 0; \}\par
4037 \par
4038 {\cf18 int}                         IReporter::get_num_active_contexts() \{ {\cf19 return} 0; \}\par
4039 {\cf17 const} IContextScope* {\cf17 const}* IReporter::get_active_contexts() \{ {\cf19 return} {\cf17 nullptr}; \}\par
4040 {\cf18 int}                         IReporter::get_num_stringified_contexts() \{ {\cf19 return} 0; \}\par
4041 {\cf17 const} String*               IReporter::get_stringified_contexts() \{ {\cf19 return} {\cf17 nullptr}; \}\par
4042 \par
4043 {\cf18 int} registerReporter({\cf17 const} {\cf18 char}*, {\cf18 int}, IReporter*) \{ {\cf19 return} 0; \}\par
4044 \par
4045 \} {\cf20 // namespace doctest}\par
4046 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
4047 \par
4048 {\cf21 #if !defined(DOCTEST_CONFIG_COLORS_NONE)}\par
4049 {\cf21 #if !defined(DOCTEST_CONFIG_COLORS_WINDOWS) && !defined(DOCTEST_CONFIG_COLORS_ANSI)}\par
4050 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
4051 {\cf21 #define DOCTEST_CONFIG_COLORS_WINDOWS}\par
4052 {\cf21 #else }{\cf20 // linux}\par
4053 {\cf21 #define DOCTEST_CONFIG_COLORS_ANSI}\par
4054 {\cf21 #endif }{\cf20 // platform}\par
4055 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_COLORS_WINDOWS && DOCTEST_CONFIG_COLORS_ANSI}\par
4056 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_COLORS_NONE}\par
4057 \par
4058 {\cf17 namespace }doctest_detail_test_suite_ns \{\par
4059 {\cf20 // holds the current test suite}\par
4060 doctest::detail::TestSuite& getCurrentTestSuite() \{\par
4061     {\cf17 static} doctest::detail::TestSuite data\{\};\par
4062     {\cf19 return} data;\par
4063 \}\par
4064 \} {\cf20 // namespace doctest_detail_test_suite_ns}\par
4065 \par
4066 {\cf17 namespace }doctest \{\par
4067 {\cf17 namespace }\{\par
4068     {\cf20 // the int (priority) is part of the key for automatic sorting - sadly one can register a}\par
4069     {\cf20 // reporter with a duplicate name and a different priority but hopefully that won't happen often :|}\par
4070     {\cf17 using }reporterMap = std::map<std::pair<int, String>, reporterCreatorFunc>;\par
4071 \par
4072     reporterMap& getReporters() \{\par
4073         {\cf17 static} reporterMap data;\par
4074         {\cf19 return} data;\par
4075     \}\par
4076     reporterMap& getListeners() \{\par
4077         {\cf17 static} reporterMap data;\par
4078         {\cf19 return} data;\par
4079     \}\par
4080 \} {\cf20 // namespace}\par
4081 {\cf17 namespace }detail \{\par
4082 {\cf21 #define DOCTEST_ITERATE_THROUGH_REPORTERS(function, ...)                                           \\}\par
4083 {\cf21     for(auto& curr_rep : g_cs->reporters_currently_used)                                           \\}\par
4084 {\cf21     curr_rep->function(__VA_ARGS__)}\par
4085 \par
4086     {\cf18 bool} checkIfShouldThrow(assertType::Enum at) \{\par
4087         {\cf19 if}(at & assertType::is_require) \par
4088             {\cf19 return} {\cf17 true};\par
4089 \par
4090         {\cf19 if}((at & assertType::is_check) \par
4091            && getContextOptions()->abort_after > 0 &&\par
4092            (g_cs->numAssertsFailed + g_cs->numAssertsFailedCurrentTest_atomic) >=\par
4093                    getContextOptions()->abort_after)\par
4094             {\cf19 return} {\cf17 true};\par
4095 \par
4096         {\cf19 return} {\cf17 false};\par
4097     \}\par
4098 \par
4099 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4100     DOCTEST_NORETURN {\cf18 void} throwException() \{\par
4101         g_cs->shouldLogCurrentException = {\cf17 false};\par
4102         {\cf19 throw} TestFailureException(); {\cf20 // NOLINT(hicpp-exception-baseclass)}\par
4103     \}\par
4104 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4105     {\cf18 void} throwException() \{\}\par
4106 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4107 \} {\cf20 // namespace detail}\par
4108 \par
4109 {\cf17 namespace }\{\par
4110     {\cf17 using namespace }detail;\par
4111     {\cf20 // matching of a string against a wildcard mask (case sensitivity configurable) taken from}\par
4112     {\cf20 // https://www.codeproject.com/Articles/1088/Wildcard-string-compare-globbing}\par
4113     {\cf18 int} wildcmp({\cf17 const} {\cf18 char}* str, {\cf17 const} {\cf18 char}* wild, {\cf18 bool} caseSensitive) \{\par
4114         {\cf17 const} {\cf18 char}* cp = str;\par
4115         {\cf17 const} {\cf18 char}* mp = wild;\par
4116 \par
4117         {\cf19 while}((*str) && (*wild != {\cf23 '*'})) \{\par
4118             {\cf19 if}((caseSensitive ? (*wild != *str) : (tolower(*wild) != tolower(*str))) &&\par
4119                (*wild != {\cf22 '?'})) \{\par
4120                 {\cf19 return} 0;\par
4121             \}\par
4122             wild++;\par
4123             str++;\par
4124         \}\par
4125 \par
4126         {\cf19 while}(*str) \{\par
4127             {\cf19 if}(*wild == {\cf23 '*'}) \{\par
4128                 {\cf19 if}(!*++wild) \{\par
4129                     {\cf19 return} 1;\par
4130                 \}\par
4131                 mp = wild;\par
4132                 cp = str + 1;\par
4133             \} {\cf19 else} {\cf19 if}((caseSensitive ? (*wild == *str) : (tolower(*wild) == tolower(*str))) ||\par
4134                       (*wild == {\cf22 '?'})) \{\par
4135                 wild++;\par
4136                 str++;\par
4137             \} {\cf19 else} \{\par
4138                 wild = mp;   \par
4139                 str  = cp++; \par
4140             \}\par
4141         \}\par
4142 \par
4143         {\cf19 while}(*wild == {\cf23 '*'}) \{\par
4144             wild++;\par
4145         \}\par
4146         {\cf19 return} !*wild;\par
4147     \}\par
4148 \par
4149     {\cf20 // checks if the name matches any of the filters (and can be configured what to do when empty)}\par
4150     {\cf18 bool} matchesAny({\cf17 const} {\cf18 char}* name, {\cf17 const} std::vector<String>& filters, {\cf18 bool} matchEmpty,\par
4151         {\cf18 bool} caseSensitive) \{\par
4152         {\cf19 if} (filters.empty() && matchEmpty)\par
4153             {\cf19 return} {\cf17 true};\par
4154         {\cf19 for} ({\cf17 auto}& curr : filters)\par
4155             if (wildcmp(name, curr.c_str(), caseSensitive))\par
4156                 return true;\par
4157         {\cf19 return} {\cf17 false};\par
4158     \}\par
4159 \par
4160     DOCTEST_NO_SANITIZE_INTEGER\par
4161     {\cf18 unsigned} {\cf18 long} {\cf18 long} hash({\cf18 unsigned} {\cf18 long} {\cf18 long} a, {\cf18 unsigned} {\cf18 long} {\cf18 long} b) \{\par
4162         {\cf19 return} (a << 5) + b;\par
4163     \}\par
4164 \par
4165     {\cf20 // C string hash function (djb2) - taken from http://www.cse.yorku.ca/~oz/hash.html}\par
4166     DOCTEST_NO_SANITIZE_INTEGER\par
4167     {\cf18 unsigned} {\cf18 long} {\cf18 long} hash({\cf17 const} {\cf18 char}* str) \{\par
4168         {\cf18 unsigned} {\cf18 long} {\cf18 long} hash = 5381;\par
4169         {\cf18 char} c;\par
4170         {\cf19 while} ((c = *str++))\par
4171             hash = ((hash << 5) + hash) + c; {\cf20 // hash * 33 + c}\par
4172         {\cf19 return} hash;\par
4173     \}\par
4174 \par
4175     {\cf18 unsigned} {\cf18 long} {\cf18 long} hash({\cf17 const} SubcaseSignature& sig) \{\par
4176         {\cf19 return} hash(hash(hash(sig.m_file), hash(sig.m_name.c_str())), sig.m_line);\par
4177     \}\par
4178 \par
4179     {\cf18 unsigned} {\cf18 long} {\cf18 long} hash({\cf17 const} std::vector<SubcaseSignature>& sigs, {\cf18 size_t} count) \{\par
4180         {\cf18 unsigned} {\cf18 long} {\cf18 long} running = 0;\par
4181         {\cf17 auto} end = sigs.begin() + count;\par
4182         {\cf19 for} ({\cf17 auto} it = sigs.begin(); it != end; it++) \{\par
4183             running = hash(running, hash(*it));\par
4184         \}\par
4185         {\cf19 return} running;\par
4186     \}\par
4187 \par
4188     {\cf18 unsigned} {\cf18 long} {\cf18 long} hash({\cf17 const} std::vector<SubcaseSignature>& sigs) \{\par
4189         {\cf18 unsigned} {\cf18 long} {\cf18 long} running = 0;\par
4190         {\cf19 for} ({\cf17 const} SubcaseSignature& sig : sigs) \{\par
4191             running = hash(running, hash(sig));\par
4192         \}\par
4193         {\cf19 return} running;\par
4194     \}\par
4195 \} {\cf20 // namespace}\par
4196 {\cf17 namespace }detail \{\par
4197     {\cf18 bool} Subcase::checkFilters() \{\par
4198         {\cf19 if} (g_cs->subcaseStack.size() < {\cf18 size_t}(g_cs->subcase_filter_levels)) \{\par
4199             {\cf19 if} (!matchesAny(m_signature.m_name.c_str(), g_cs->filters[6], {\cf17 true}, g_cs->case_sensitive))\par
4200                 {\cf19 return} {\cf17 true};\par
4201             {\cf19 if} (matchesAny(m_signature.m_name.c_str(), g_cs->filters[7], {\cf17 false}, g_cs->case_sensitive))\par
4202                 {\cf19 return} {\cf17 true};\par
4203         \}\par
4204         {\cf19 return} {\cf17 false};\par
4205     \}\par
4206 \par
4207     Subcase::Subcase({\cf17 const} String& name, {\cf17 const} {\cf18 char}* file, {\cf18 int} line)\par
4208             : m_signature(\{name, file, line\}) \{\par
4209         {\cf19 if} (!g_cs->reachedLeaf) \{\par
4210             {\cf19 if} (g_cs->nextSubcaseStack.size() <= g_cs->subcaseStack.size()\par
4211                 || g_cs->nextSubcaseStack[g_cs->subcaseStack.size()] == m_signature) \{\par
4212                 {\cf20 // Going down.}\par
4213                 {\cf19 if} (checkFilters()) \{ {\cf19 return}; \}\par
4214 \par
4215                 g_cs->subcaseStack.push_back(m_signature);\par
4216                 g_cs->currentSubcaseDepth++;\par
4217                 m_entered = {\cf17 true};\par
4218                 DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_start, m_signature);\par
4219             \}\par
4220         \} {\cf19 else} \{\par
4221             {\cf19 if} (g_cs->subcaseStack[g_cs->currentSubcaseDepth] == m_signature) \{\par
4222                 {\cf20 // This subcase is reentered via control flow.}\par
4223                 g_cs->currentSubcaseDepth++;\par
4224                 m_entered = {\cf17 true};\par
4225                 DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_start, m_signature);\par
4226             \} {\cf19 else} {\cf19 if} (g_cs->nextSubcaseStack.size() <= g_cs->currentSubcaseDepth\par
4227                     && g_cs->fullyTraversedSubcases.find(hash(hash(g_cs->subcaseStack, g_cs->currentSubcaseDepth), hash(m_signature)))\par
4228                     == g_cs->fullyTraversedSubcases.end()) \{\par
4229                 {\cf19 if} (checkFilters()) \{ {\cf19 return}; \}\par
4230                 {\cf20 // This subcase is part of the one to be executed next.}\par
4231                 g_cs->nextSubcaseStack.clear();\par
4232                 g_cs->nextSubcaseStack.insert(g_cs->nextSubcaseStack.end(),\par
4233                     g_cs->subcaseStack.begin(), g_cs->subcaseStack.begin() + g_cs->currentSubcaseDepth);\par
4234                 g_cs->nextSubcaseStack.push_back(m_signature);\par
4235             \}\par
4236         \}\par
4237     \}\par
4238 \par
4239     DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4996) {\cf20 // std::uncaught_exception is deprecated in C++17}\par
4240     DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")\par
4241     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")\par
4242 \par
4243     Subcase::~Subcase() \{\par
4244         {\cf19 if} (m_entered) \{\par
4245             g_cs->currentSubcaseDepth--;\par
4246 \par
4247             {\cf19 if} (!g_cs->reachedLeaf) \{\par
4248                 {\cf20 // Leaf.}\par
4249                 g_cs->fullyTraversedSubcases.insert(hash(g_cs->subcaseStack));\par
4250                 g_cs->nextSubcaseStack.clear();\par
4251                 g_cs->reachedLeaf = {\cf17 true};\par
4252             \} {\cf19 else} {\cf19 if} (g_cs->nextSubcaseStack.empty()) \{\par
4253                 {\cf20 // All children are finished.}\par
4254                 g_cs->fullyTraversedSubcases.insert(hash(g_cs->subcaseStack));\par
4255             \}\par
4256 \par
4257 {\cf21 #if defined(__cpp_lib_uncaught_exceptions) && __cpp_lib_uncaught_exceptions >= 201411L && (!defined(__MAC_OS_X_VERSION_MIN_REQUIRED) || __MAC_OS_X_VERSION_MIN_REQUIRED >= 101200)}\par
4258             {\cf19 if}(std::uncaught_exceptions() > 0\par
4259 #{\cf19 else}\par
4260             {\cf19 if}(std::uncaught_exception()\par
4261 #endif\par
4262                 && g_cs->shouldLogCurrentException) \{\par
4263                 DOCTEST_ITERATE_THROUGH_REPORTERS(\par
4264                         test_case_exception, \{{\cf22 "exception thrown in subcase - will translate later "}\par
4265                                                 {\cf22 "when the whole test case has been exited (cannot "}\par
4266                                                 {\cf22 "translate while there is an active exception)"},\par
4267                                                 false\});\par
4268                 g_cs->shouldLogCurrentException = {\cf17 false};\par
4269             \}\par
4270 \par
4271             DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_end, DOCTEST_EMPTY);\par
4272         \}\par
4273     \}\par
4274 \par
4275     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
4276     DOCTEST_GCC_SUPPRESS_WARNING_POP\par
4277     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
4278 \par
4279     Subcase::operator bool(){\cf17  const }\{ {\cf19 return} m_entered; \}\par
4280 \par
4281     Result::Result({\cf18 bool} passed, {\cf17 const} String& decomposition)\par
4282             : m_passed(passed)\par
4283             , m_decomp(decomposition) \{\}\par
4284 \par
4285     ExpressionDecomposer::ExpressionDecomposer(assertType::Enum at)\par
4286             : m_at(at) \{\}\par
4287 \par
4288     TestSuite& TestSuite::operator*({\cf17 const} {\cf18 char}* in) \{\par
4289         m_test_suite = in;\par
4290         {\cf19 return} *{\cf17 this};\par
4291     \}\par
4292 \par
4293     TestCase::TestCase(funcType test, {\cf17 const} {\cf18 char}* file, {\cf18 unsigned} line, {\cf17 const} TestSuite& test_suite,\par
4294                        {\cf17 const} String& type, {\cf18 int} template_id) \{\par
4295         m_file              = file;\par
4296         m_line              = line;\par
4297         m_name              = {\cf17 nullptr}; {\cf20 // will be later overridden in operator*}\par
4298         m_test_suite        = test_suite.m_test_suite;\par
4299         m_description       = test_suite.m_description;\par
4300         m_skip              = test_suite.m_skip;\par
4301         m_no_breaks         = test_suite.m_no_breaks;\par
4302         m_no_output         = test_suite.m_no_output;\par
4303         m_may_fail          = test_suite.m_may_fail;\par
4304         m_should_fail       = test_suite.m_should_fail;\par
4305         m_expected_failures = test_suite.m_expected_failures;\par
4306         m_timeout           = test_suite.m_timeout;\par
4307 \par
4308         m_test        = test;\par
4309         m_type        = type;\par
4310         m_template_id = template_id;\par
4311     \}\par
4312 \par
4313     TestCase::TestCase({\cf17 const} TestCase& other)\par
4314             : TestCaseData() \{\par
4315         *{\cf17 this} = other;\par
4316     \}\par
4317 \par
4318     DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(26434) {\cf20 // hides a non-virtual function}\par
4319     TestCase& TestCase::operator=(const TestCase& other) \{\par
4320         TestCaseData::operator=(other);\par
4321         m_test        = other.m_test;\par
4322         m_type        = other.m_type;\par
4323         m_template_id = other.m_template_id;\par
4324         m_full_name   = other.m_full_name;\par
4325 \par
4326         {\cf19 if}(m_template_id != -1)\par
4327             m_name = m_full_name.c_str();\par
4328         {\cf19 return} *{\cf17 this};\par
4329     \}\par
4330     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
4331 \par
4332     TestCase& TestCase::operator*({\cf17 const} {\cf18 char}* in) \{\par
4333         m_name = in;\par
4334         {\cf20 // make a new name with an appended type for templated test case}\par
4335         {\cf19 if}(m_template_id != -1) \{\par
4336             m_full_name = String(m_name) + {\cf22 "<"} + m_type + {\cf22 ">"};\par
4337             {\cf20 // redirect the name to point to the newly constructed full name}\par
4338             m_name = m_full_name.c_str();\par
4339         \}\par
4340         {\cf19 return} *{\cf17 this};\par
4341     \}\par
4342 \par
4343     {\cf18 bool} TestCase::operator<({\cf17 const} TestCase& other){\cf17  const }\{\par
4344         {\cf20 // this will be used only to differentiate between test cases - not relevant for sorting}\par
4345         {\cf19 if}(m_line != other.m_line)\par
4346             {\cf19 return} m_line < other.m_line;\par
4347         {\cf17 const} {\cf18 int} name_cmp = strcmp(m_name, other.m_name);\par
4348         {\cf19 if}(name_cmp != 0)\par
4349             {\cf19 return} name_cmp < 0;\par
4350         {\cf17 const} {\cf18 int} file_cmp = m_file.compare(other.m_file);\par
4351         {\cf19 if}(file_cmp != 0)\par
4352             {\cf19 return} file_cmp < 0;\par
4353         {\cf19 return} m_template_id < other.m_template_id;\par
4354     \}\par
4355 \par
4356     {\cf20 // all the registered tests}\par
4357     std::set<TestCase>& getRegisteredTests() \{\par
4358         {\cf17 static} std::set<TestCase> data;\par
4359         {\cf19 return} data;\par
4360     \}\par
4361 \} {\cf20 // namespace detail}\par
4362 {\cf17 namespace }\{\par
4363     {\cf17 using namespace }detail;\par
4364     {\cf20 // for sorting tests by file/line}\par
4365     {\cf18 bool} fileOrderComparator({\cf17 const} TestCase* lhs, {\cf17 const} TestCase* rhs) \{\par
4366         {\cf20 // this is needed because MSVC gives different case for drive letters}\par
4367         {\cf20 // for __FILE__ when evaluated in a header and a source file}\par
4368         {\cf17 const} {\cf18 int} res = lhs->m_file.compare(rhs->m_file, {\cf18 bool}(DOCTEST_MSVC));\par
4369         {\cf19 if}(res != 0)\par
4370             {\cf19 return} res < 0;\par
4371         {\cf19 if}(lhs->m_line != rhs->m_line)\par
4372             {\cf19 return} lhs->m_line < rhs->m_line;\par
4373         {\cf19 return} lhs->m_template_id < rhs->m_template_id;\par
4374     \}\par
4375 \par
4376     {\cf20 // for sorting tests by suite/file/line}\par
4377     {\cf18 bool} suiteOrderComparator({\cf17 const} TestCase* lhs, {\cf17 const} TestCase* rhs) \{\par
4378         {\cf17 const} {\cf18 int} res = std::strcmp(lhs->m_test_suite, rhs->m_test_suite);\par
4379         {\cf19 if}(res != 0)\par
4380             {\cf19 return} res < 0;\par
4381         {\cf19 return} fileOrderComparator(lhs, rhs);\par
4382     \}\par
4383 \par
4384     {\cf20 // for sorting tests by name/suite/file/line}\par
4385     {\cf18 bool} nameOrderComparator({\cf17 const} TestCase* lhs, {\cf17 const} TestCase* rhs) \{\par
4386         {\cf17 const} {\cf18 int} res = std::strcmp(lhs->m_name, rhs->m_name);\par
4387         {\cf19 if}(res != 0)\par
4388             {\cf19 return} res < 0;\par
4389         {\cf19 return} suiteOrderComparator(lhs, rhs);\par
4390     \}\par
4391 \par
4392     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wdeprecated-declarations"})\par
4393     void color_to_stream(std::ostream& s, Color::Enum code) \{\par
4394         {\cf17 static_cast<}{\cf18 void}{\cf17 >}(s);    {\cf20 // for DOCTEST_CONFIG_COLORS_NONE or DOCTEST_CONFIG_COLORS_WINDOWS}\par
4395         {\cf17 static_cast<}{\cf18 void}{\cf17 >}(code); {\cf20 // for DOCTEST_CONFIG_COLORS_NONE}\par
4396 {\cf21 #ifdef DOCTEST_CONFIG_COLORS_ANSI}\par
4397         {\cf19 if}(g_no_colors ||\par
4398            (isatty(STDOUT_FILENO) == {\cf17 false} && getContextOptions()->force_colors == {\cf17 false}))\par
4399             {\cf19 return};\par
4400 \par
4401         {\cf17 auto} col = {\cf22 ""};\par
4402         {\cf20 // clang-format off}\par
4403             {\cf19 switch}(code) \{ \par
4404                 {\cf19 case} Color::Red:         col = {\cf22 "[0;31m"}; {\cf19 break};\par
4405                 {\cf19 case} Color::Green:       col = {\cf22 "[0;32m"}; {\cf19 break};\par
4406                 {\cf19 case} Color::Blue:        col = {\cf22 "[0;34m"}; {\cf19 break};\par
4407                 {\cf19 case} Color::Cyan:        col = {\cf22 "[0;36m"}; {\cf19 break};\par
4408                 {\cf19 case} Color::Yellow:      col = {\cf22 "[0;33m"}; {\cf19 break};\par
4409                 {\cf19 case} Color::Grey:        col = {\cf22 "[1;30m"}; {\cf19 break};\par
4410                 {\cf19 case} Color::LightGrey:   col = {\cf22 "[0;37m"}; {\cf19 break};\par
4411                 {\cf19 case} Color::BrightRed:   col = {\cf22 "[1;31m"}; {\cf19 break};\par
4412                 {\cf19 case} Color::BrightGreen: col = {\cf22 "[1;32m"}; {\cf19 break};\par
4413                 {\cf19 case} Color::BrightWhite: col = {\cf22 "[1;37m"}; {\cf19 break};\par
4414                 {\cf19 case} Color::Bright: {\cf20 // invalid}\par
4415                 {\cf19 case} Color::None:\par
4416                 {\cf19 case} Color::White:\par
4417                 {\cf19 default}:                 col = {\cf22 "[0m"};\par
4418             \}\par
4419         {\cf20 // clang-format on}\par
4420         s << {\cf22 "\\033"} << col;\par
4421 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_COLORS_ANSI}\par
4422 \par
4423 {\cf21 #ifdef DOCTEST_CONFIG_COLORS_WINDOWS}\par
4424         {\cf19 if}(g_no_colors ||\par
4425            (_isatty(_fileno(stdout)) == {\cf17 false} && getContextOptions()->force_colors == {\cf17 false}))\par
4426             {\cf19 return};\par
4427 \par
4428         {\cf17 static} {\cf17 struct }ConsoleHelper \{\par
4429             HANDLE stdoutHandle;\par
4430             WORD   origFgAttrs;\par
4431             WORD   origBgAttrs;\par
4432 \par
4433             ConsoleHelper() \{\par
4434                 stdoutHandle = GetStdHandle(STD_OUTPUT_HANDLE);\par
4435                 CONSOLE_SCREEN_BUFFER_INFO csbiInfo;\par
4436                 GetConsoleScreenBufferInfo(stdoutHandle, &csbiInfo);\par
4437                 origFgAttrs = csbiInfo.wAttributes & ~(BACKGROUND_GREEN | BACKGROUND_RED |\par
4438                     BACKGROUND_BLUE | BACKGROUND_INTENSITY);\par
4439                 origBgAttrs = csbiInfo.wAttributes & ~(FOREGROUND_GREEN | FOREGROUND_RED |\par
4440                     FOREGROUND_BLUE | FOREGROUND_INTENSITY);\par
4441             \}\par
4442         \} ch;\par
4443 \par
4444 {\cf21 #define DOCTEST_SET_ATTR(x) SetConsoleTextAttribute(ch.stdoutHandle, x | ch.origBgAttrs)}\par
4445 \par
4446         {\cf20 // clang-format off}\par
4447         {\cf19 switch} (code) \{\par
4448             {\cf19 case} Color::White:       DOCTEST_SET_ATTR(FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE); {\cf19 break};\par
4449             {\cf19 case} Color::Red:         DOCTEST_SET_ATTR(FOREGROUND_RED);                                      {\cf19 break};\par
4450             {\cf19 case} Color::Green:       DOCTEST_SET_ATTR(FOREGROUND_GREEN);                                    {\cf19 break};\par
4451             {\cf19 case} Color::Blue:        DOCTEST_SET_ATTR(FOREGROUND_BLUE);                                     {\cf19 break};\par
4452             {\cf19 case} Color::Cyan:        DOCTEST_SET_ATTR(FOREGROUND_BLUE | FOREGROUND_GREEN);                  {\cf19 break};\par
4453             {\cf19 case} Color::Yellow:      DOCTEST_SET_ATTR(FOREGROUND_RED | FOREGROUND_GREEN);                   {\cf19 break};\par
4454             {\cf19 case} Color::Grey:        DOCTEST_SET_ATTR(0);                                                   {\cf19 break};\par
4455             {\cf19 case} Color::LightGrey:   DOCTEST_SET_ATTR(FOREGROUND_INTENSITY);                                {\cf19 break};\par
4456             {\cf19 case} Color::BrightRed:   DOCTEST_SET_ATTR(FOREGROUND_INTENSITY | FOREGROUND_RED);               {\cf19 break};\par
4457             {\cf19 case} Color::BrightGreen: DOCTEST_SET_ATTR(FOREGROUND_INTENSITY | FOREGROUND_GREEN);             {\cf19 break};\par
4458             {\cf19 case} Color::BrightWhite: DOCTEST_SET_ATTR(FOREGROUND_INTENSITY | FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE); {\cf19 break};\par
4459             {\cf19 case} Color::None:\par
4460             {\cf19 case} Color::Bright: {\cf20 // invalid}\par
4461             {\cf19 default}:                 DOCTEST_SET_ATTR(ch.origFgAttrs);\par
4462         \}\par
4463             {\cf20 // clang-format on}\par
4464 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_COLORS_WINDOWS}\par
4465     \}\par
4466     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
4467 \par
4468     std::vector<const IExceptionTranslator*>& getExceptionTranslators() \{\par
4469         {\cf17 static} std::vector<const IExceptionTranslator*> data;\par
4470         {\cf19 return} data;\par
4471     \}\par
4472 \par
4473     String translateActiveException() \{\par
4474 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4475         String res;\par
4476         {\cf17 auto}&  translators = getExceptionTranslators();\par
4477         {\cf19 for}({\cf17 auto}& curr : translators)\par
4478             if(curr->translate(res))\par
4479                 return res;\par
4480         {\cf20 // clang-format off}\par
4481         DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wcatch-value"})\par
4482         {\cf17 try} \{\par
4483             {\cf19 throw};\par
4484         \} {\cf19 catch}(std::exception& ex) \{\par
4485             {\cf19 return} ex.what();\par
4486         \} {\cf19 catch}(std::string& msg) \{\par
4487             {\cf19 return} msg.c_str();\par
4488         \} {\cf19 catch}({\cf17 const} {\cf18 char}* msg) \{\par
4489             {\cf19 return} msg;\par
4490         \} {\cf19 catch}(...) \{\par
4491             {\cf19 return} {\cf22 "unknown exception"};\par
4492         \}\par
4493         DOCTEST_GCC_SUPPRESS_WARNING_POP\par
4494 {\cf20 // clang-format on}\par
4495 {\cf21 #else  }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4496         {\cf19 return} {\cf22 ""};\par
4497 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4498     \}\par
4499 \} {\cf20 // namespace}\par
4500 \par
4501 {\cf17 namespace }detail \{\par
4502     {\cf20 // used by the macros for registering tests}\par
4503     {\cf18 int} regTest({\cf17 const} TestCase& tc) \{\par
4504         getRegisteredTests().insert(tc);\par
4505         {\cf19 return} 0;\par
4506     \}\par
4507 \par
4508     {\cf20 // sets the current test suite}\par
4509     {\cf18 int} setTestSuite({\cf17 const} TestSuite& ts) \{\par
4510         doctest_detail_test_suite_ns::getCurrentTestSuite() = ts;\par
4511         {\cf19 return} 0;\par
4512     \}\par
4513 \par
4514 {\cf21 #ifdef DOCTEST_IS_DEBUGGER_ACTIVE}\par
4515     {\cf18 bool} isDebuggerActive() \{ {\cf19 return} DOCTEST_IS_DEBUGGER_ACTIVE(); \}\par
4516 {\cf21 #else }{\cf20 // DOCTEST_IS_DEBUGGER_ACTIVE}\par
4517 {\cf21 #ifdef DOCTEST_PLATFORM_LINUX}\par
4518     {\cf17 class }ErrnoGuard \{\par
4519     {\cf17 public}:\par
4520         ErrnoGuard() : m_oldErrno(errno) \{\}\par
4521         ~ErrnoGuard() \{ errno = m_oldErrno; \}\par
4522     {\cf17 private}:\par
4523         {\cf18 int} m_oldErrno;\par
4524     \};\par
4525     {\cf20 // See the comments in Catch2 for the reasoning behind this implementation:}\par
4526     {\cf20 // https://github.com/catchorg/Catch2/blob/v2.13.1/include/internal/catch_debugger.cpp#L79-L102}\par
4527     {\cf18 bool} isDebuggerActive() \{\par
4528         ErrnoGuard guard;\par
4529         std::ifstream in({\cf22 "/proc/self/status"});\par
4530         {\cf19 for}(std::string line; std::getline(in, line);) \{\par
4531             {\cf17 static} {\cf17 const} {\cf18 int} PREFIX_LEN = 11;\par
4532             {\cf19 if}(line.compare(0, PREFIX_LEN, {\cf22 "TracerPid:\\t"}) == 0) \{\par
4533                 {\cf19 return} line.length() > PREFIX_LEN && line[PREFIX_LEN] != {\cf23 '0'};\par
4534             \}\par
4535         \}\par
4536         {\cf19 return} {\cf17 false};\par
4537     \}\par
4538 {\cf21 #elif defined(DOCTEST_PLATFORM_MAC)}\par
4539     {\cf20 // The following function is taken directly from the following technical note:}\par
4540     {\cf20 // https://developer.apple.com/library/archive/qa/qa1361/_index.html}\par
4541     {\cf20 // Returns true if the current process is being debugged (either}\par
4542     {\cf20 // running under the debugger or has a debugger attached post facto).}\par
4543     {\cf18 bool} isDebuggerActive() \{\par
4544         {\cf18 int}        mib[4];\par
4545         kinfo_proc info;\par
4546         {\cf18 size_t}     size;\par
4547         {\cf20 // Initialize the flags so that, if sysctl fails for some bizarre}\par
4548         {\cf20 // reason, we get a predictable result.}\par
4549         info.kp_proc.p_flag = 0;\par
4550         {\cf20 // Initialize mib, which tells sysctl the info we want, in this case}\par
4551         {\cf20 // we're looking for information about a specific process ID.}\par
4552         mib[0] = CTL_KERN;\par
4553         mib[1] = KERN_PROC;\par
4554         mib[2] = KERN_PROC_PID;\par
4555         mib[3] = getpid();\par
4556         {\cf20 // Call sysctl.}\par
4557         size = {\cf17 sizeof}(info);\par
4558         {\cf19 if}(sysctl(mib, DOCTEST_COUNTOF(mib), &info, &size, 0, 0) != 0) \{\par
4559             std::cerr << {\cf22 "\\nCall to sysctl failed - unable to determine if debugger is active **\\n"};\par
4560             {\cf19 return} {\cf17 false};\par
4561         \}\par
4562         {\cf20 // We're being debugged if the P_TRACED flag is set.}\par
4563         {\cf19 return} ((info.kp_proc.p_flag & P_TRACED) != 0);\par
4564     \}\par
4565 {\cf21 #elif DOCTEST_MSVC || defined(__MINGW32__) || defined(__MINGW64__)}\par
4566     {\cf18 bool} isDebuggerActive() \{ return ::IsDebuggerPresent() != 0; \}\par
4567 {\cf21 #else}\par
4568     {\cf18 bool} isDebuggerActive() \{ {\cf19 return} {\cf17 false}; \}\par
4569 {\cf21 #endif }{\cf20 // Platform}\par
4570 {\cf21 #endif }{\cf20 // DOCTEST_IS_DEBUGGER_ACTIVE}\par
4571 \par
4572     {\cf18 void} registerExceptionTranslatorImpl({\cf17 const} IExceptionTranslator* et) \{\par
4573         {\cf19 if}(std::find(getExceptionTranslators().begin(), getExceptionTranslators().end(), et) ==\par
4574            getExceptionTranslators().end())\par
4575             getExceptionTranslators().push_back(et);\par
4576     \}\par
4577 \par
4578     DOCTEST_THREAD_LOCAL std::vector<IContextScope*> g_infoContexts; {\cf20 // for logging with INFO()}\par
4579 \par
4580     ContextScopeBase::ContextScopeBase() \{\par
4581         g_infoContexts.push_back({\cf17 this});\par
4582     \}\par
4583 \par
4584     ContextScopeBase::ContextScopeBase(ContextScopeBase&& other) {\cf17 noexcept} \{\par
4585         {\cf19 if} (other.need_to_destroy) \{\par
4586             other.destroy();\par
4587         \}\par
4588         other.need_to_destroy = {\cf17 false};\par
4589         g_infoContexts.push_back({\cf17 this});\par
4590     \}\par
4591 \par
4592     DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4996) {\cf20 // std::uncaught_exception is deprecated in C++17}\par
4593     DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")\par
4594     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")\par
4595 \par
4596     {\cf20 // destroy cannot be inlined into the destructor because that would mean calling stringify after}\par
4597     {\cf20 // ContextScope has been destroyed (base class destructors run after derived class destructors).}\par
4598     {\cf20 // Instead, ContextScope calls this method directly from its destructor.}\par
4599     {\cf18 void} ContextScopeBase::destroy() \{\par
4600 {\cf21 #if defined(__cpp_lib_uncaught_exceptions) && __cpp_lib_uncaught_exceptions >= 201411L && (!defined(__MAC_OS_X_VERSION_MIN_REQUIRED) || __MAC_OS_X_VERSION_MIN_REQUIRED >= 101200)}\par
4601         {\cf19 if}(std::uncaught_exceptions() > 0) \{\par
4602 {\cf21 #else}\par
4603         {\cf19 if}(std::uncaught_exception()) \{\par
4604 {\cf21 #endif}\par
4605             std::ostringstream s;\par
4606             this->stringify(&s);\par
4607             g_cs->stringifiedContexts.push_back(s.str().c_str());\par
4608         \}\par
4609         g_infoContexts.pop_back();\par
4610     \}\par
4611 \par
4612     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
4613     DOCTEST_GCC_SUPPRESS_WARNING_POP\par
4614     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
4615 \} {\cf20 // namespace detail}\par
4616 {\cf17 namespace }\{\par
4617     {\cf17 using namespace }detail;\par
4618 \par
4619 {\cf21 #if !defined(DOCTEST_CONFIG_POSIX_SIGNALS) && !defined(DOCTEST_CONFIG_WINDOWS_SEH)}\par
4620     {\cf17 struct }FatalConditionHandler\par
4621     \{\par
4622         {\cf17 static} {\cf18 void} reset() \{\}\par
4623         {\cf17 static} {\cf18 void} allocateAltStackMem() \{\}\par
4624         {\cf17 static} {\cf18 void} freeAltStackMem() \{\}\par
4625     \};\par
4626 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_POSIX_SIGNALS || DOCTEST_CONFIG_WINDOWS_SEH}\par
4627 \par
4628     {\cf18 void} reportFatal({\cf17 const} std::string&);\par
4629 \par
4630 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
4631 \par
4632     {\cf17 struct }SignalDefs\par
4633     \{\par
4634         DWORD id;\par
4635         {\cf17 const} {\cf18 char}* name;\par
4636     \};\par
4637     {\cf20 // There is no 1-1 mapping between signals and windows exceptions.}\par
4638     {\cf20 // Windows can easily distinguish between SO and SigSegV,}\par
4639     {\cf20 // but SigInt, SigTerm, etc are handled differently.}\par
4640     SignalDefs signalDefs[] = \{\par
4641             \{{\cf17 static_cast<}DWORD{\cf17 >}(EXCEPTION_ILLEGAL_INSTRUCTION),\par
4642              {\cf22 "SIGILL - Illegal instruction signal"}\},\par
4643             \{{\cf17 static_cast<}DWORD{\cf17 >}(EXCEPTION_STACK_OVERFLOW), {\cf22 "SIGSEGV - Stack overflow"}\},\par
4644             \{{\cf17 static_cast<}DWORD{\cf17 >}(EXCEPTION_ACCESS_VIOLATION),\par
4645              {\cf22 "SIGSEGV - Segmentation violation signal"}\},\par
4646             \{{\cf17 static_cast<}DWORD{\cf17 >}(EXCEPTION_INT_DIVIDE_BY_ZERO), {\cf22 "Divide by zero error"}\},\par
4647     \};\par
4648 \par
4649     {\cf17 struct }FatalConditionHandler\par
4650     \{\par
4651         {\cf17 static} LONG CALLBACK handleException(PEXCEPTION_POINTERS ExceptionInfo) \{\par
4652             {\cf20 // Multiple threads may enter this filter/handler at once. We want the error message to be printed on the}\par
4653             {\cf20 // console just once no matter how many threads have crashed.}\par
4654             DOCTEST_DECLARE_STATIC_MUTEX(mutex)\par
4655             {\cf17 static} {\cf18 bool} execute = {\cf17 true};\par
4656             \{\par
4657                 DOCTEST_LOCK_MUTEX(mutex)\par
4658                 {\cf19 if}(execute) \{\par
4659                     {\cf18 bool} reported = {\cf17 false};\par
4660                     {\cf19 for}({\cf18 size_t} i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) \{\par
4661                         {\cf19 if}(ExceptionInfo->ExceptionRecord->ExceptionCode == signalDefs[i].id) \{\par
4662                             reportFatal(signalDefs[i].name);\par
4663                             reported = {\cf17 true};\par
4664                             {\cf19 break};\par
4665                         \}\par
4666                     \}\par
4667                     {\cf19 if}(reported == {\cf17 false})\par
4668                         reportFatal({\cf22 "Unhandled SEH exception caught"});\par
4669                     {\cf19 if}(isDebuggerActive() && !g_cs->no_breaks)\par
4670                         DOCTEST_BREAK_INTO_DEBUGGER();\par
4671                 \}\par
4672                 execute = {\cf17 false};\par
4673             \}\par
4674             std::exit(EXIT_FAILURE);\par
4675         \}\par
4676 \par
4677         {\cf17 static} {\cf18 void} allocateAltStackMem() \{\}\par
4678         {\cf17 static} {\cf18 void} freeAltStackMem() \{\}\par
4679 \par
4680         FatalConditionHandler() \{\par
4681             isSet = {\cf17 true};\par
4682             {\cf20 // 32k seems enough for doctest to handle stack overflow,}\par
4683             {\cf20 // but the value was found experimentally, so there is no strong guarantee}\par
4684             guaranteeSize = 32 * 1024;\par
4685             {\cf20 // Register an unhandled exception filter}\par
4686             previousTop = SetUnhandledExceptionFilter(handleException);\par
4687             {\cf20 // Pass in guarantee size to be filled}\par
4688             SetThreadStackGuarantee(&guaranteeSize);\par
4689 \par
4690             {\cf20 // On Windows uncaught exceptions from another thread, exceptions from}\par
4691             {\cf20 // destructors, or calls to std::terminate are not a SEH exception}\par
4692 \par
4693             {\cf20 // The terminal handler gets called when:}\par
4694             {\cf20 // - std::terminate is called FROM THE TEST RUNNER THREAD}\par
4695             {\cf20 // - an exception is thrown from a destructor FROM THE TEST RUNNER THREAD}\par
4696             original_terminate_handler = std::get_terminate();\par
4697             std::set_terminate([]() DOCTEST_NOEXCEPT \{\par
4698                 reportFatal({\cf22 "Terminate handler called"});\par
4699                 {\cf19 if}(isDebuggerActive() && !g_cs->no_breaks)\par
4700                     DOCTEST_BREAK_INTO_DEBUGGER();\par
4701                 std::exit(EXIT_FAILURE); {\cf20 // explicitly exit - otherwise the SIGABRT handler may be called as well}\par
4702             \});\par
4703 \par
4704             {\cf20 // SIGABRT is raised when:}\par
4705             {\cf20 // - std::terminate is called FROM A DIFFERENT THREAD}\par
4706             {\cf20 // - an exception is thrown from a destructor FROM A DIFFERENT THREAD}\par
4707             {\cf20 // - an uncaught exception is thrown FROM A DIFFERENT THREAD}\par
4708             prev_sigabrt_handler = std::signal(SIGABRT, []({\cf18 int} signal) DOCTEST_NOEXCEPT \{\par
4709                 {\cf19 if}(signal == SIGABRT) \{\par
4710                     reportFatal({\cf22 "SIGABRT - Abort (abnormal termination) signal"});\par
4711                     {\cf19 if}(isDebuggerActive() && !g_cs->no_breaks)\par
4712                         DOCTEST_BREAK_INTO_DEBUGGER();\par
4713                     std::exit(EXIT_FAILURE);\par
4714                 \}\par
4715             \});\par
4716 \par
4717             {\cf20 // The following settings are taken from google test, and more}\par
4718             {\cf20 // specifically from UnitTest::Run() inside of gtest.cc}\par
4719 \par
4720             {\cf20 // the user does not want to see pop-up dialogs about crashes}\par
4721             prev_error_mode_1 = SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |\par
4722                                              SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);\par
4723             {\cf20 // This forces the abort message to go to stderr in all circumstances.}\par
4724             prev_error_mode_2 = _set_error_mode(_OUT_TO_STDERR);\par
4725             {\cf20 // In the debug version, Visual Studio pops up a separate dialog}\par
4726             {\cf20 // offering a choice to debug the aborted program - we want to disable that.}\par
4727             prev_abort_behavior = _set_abort_behavior(0x0, _WRITE_ABORT_MSG | _CALL_REPORTFAULT);\par
4728             {\cf20 // In debug mode, the Windows CRT can crash with an assertion over invalid}\par
4729             {\cf20 // input (e.g. passing an invalid file descriptor). The default handling}\par
4730             {\cf20 // for these assertions is to pop up a dialog and wait for user input.}\par
4731             {\cf20 // Instead ask the CRT to dump such assertions to stderr non-interactively.}\par
4732             prev_report_mode = _CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);\par
4733             prev_report_file = _CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);\par
4734         \}\par
4735 \par
4736         {\cf17 static} {\cf18 void} reset() \{\par
4737             {\cf19 if}(isSet) \{\par
4738                 {\cf20 // Unregister handler and restore the old guarantee}\par
4739                 SetUnhandledExceptionFilter(previousTop);\par
4740                 SetThreadStackGuarantee(&guaranteeSize);\par
4741                 std::set_terminate(original_terminate_handler);\par
4742                 std::signal(SIGABRT, prev_sigabrt_handler);\par
4743                 SetErrorMode(prev_error_mode_1);\par
4744                 _set_error_mode(prev_error_mode_2);\par
4745                 _set_abort_behavior(prev_abort_behavior, _WRITE_ABORT_MSG | _CALL_REPORTFAULT);\par
4746                 {\cf17 static_cast<}{\cf18 void}{\cf17 >}(_CrtSetReportMode(_CRT_ASSERT, prev_report_mode));\par
4747                 {\cf17 static_cast<}{\cf18 void}{\cf17 >}(_CrtSetReportFile(_CRT_ASSERT, prev_report_file));\par
4748                 isSet = {\cf17 false};\par
4749             \}\par
4750         \}\par
4751 \par
4752         ~FatalConditionHandler() \{ reset(); \}\par
4753 \par
4754     {\cf17 private}:\par
4755         {\cf17 static} UINT         prev_error_mode_1;\par
4756         {\cf17 static} {\cf18 int}          prev_error_mode_2;\par
4757         {\cf17 static} {\cf18 unsigned} {\cf18 int} prev_abort_behavior;\par
4758         {\cf17 static} {\cf18 int}          prev_report_mode;\par
4759         {\cf17 static} _HFILE       prev_report_file;\par
4760         {\cf17 static} void (DOCTEST_CDECL *prev_sigabrt_handler)(int);\par
4761         {\cf17 static} std::terminate_handler original_terminate_handler;\par
4762         {\cf17 static} {\cf18 bool} isSet;\par
4763         {\cf17 static} ULONG guaranteeSize;\par
4764         {\cf17 static} LPTOP_LEVEL_EXCEPTION_FILTER previousTop;\par
4765     \};\par
4766 \par
4767     UINT         FatalConditionHandler::prev_error_mode_1;\par
4768     {\cf18 int}          FatalConditionHandler::prev_error_mode_2;\par
4769     {\cf18 unsigned} {\cf18 int} FatalConditionHandler::prev_abort_behavior;\par
4770     {\cf18 int}          FatalConditionHandler::prev_report_mode;\par
4771     _HFILE       FatalConditionHandler::prev_report_file;\par
4772     void (DOCTEST_CDECL *FatalConditionHandler::prev_sigabrt_handler)(int);\par
4773     std::terminate_handler FatalConditionHandler::original_terminate_handler;\par
4774     {\cf18 bool} FatalConditionHandler::isSet = {\cf17 false};\par
4775     ULONG FatalConditionHandler::guaranteeSize = 0;\par
4776     LPTOP_LEVEL_EXCEPTION_FILTER FatalConditionHandler::previousTop = {\cf17 nullptr};\par
4777 \par
4778 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
4779 \par
4780     {\cf17 struct }SignalDefs\par
4781     \{\par
4782         {\cf18 int}         id;\par
4783         {\cf17 const} {\cf18 char}* name;\par
4784     \};\par
4785     SignalDefs signalDefs[] = \{\{SIGINT, {\cf22 "SIGINT - Terminal interrupt signal"}\},\par
4786                                \{SIGILL, {\cf22 "SIGILL - Illegal instruction signal"}\},\par
4787                                \{SIGFPE, {\cf22 "SIGFPE - Floating point error signal"}\},\par
4788                                \{SIGSEGV, {\cf22 "SIGSEGV - Segmentation violation signal"}\},\par
4789                                \{SIGTERM, {\cf22 "SIGTERM - Termination request signal"}\},\par
4790                                \{SIGABRT, {\cf22 "SIGABRT - Abort (abnormal termination) signal"}\}\};\par
4791 \par
4792     {\cf17 struct }FatalConditionHandler\par
4793     \{\par
4794         {\cf17 static} {\cf18 bool}             isSet;\par
4795         {\cf17 static} {\cf17 struct }sigaction oldSigActions[DOCTEST_COUNTOF(signalDefs)];\par
4796         {\cf17 static} stack_t          oldSigStack;\par
4797         {\cf17 static} {\cf18 size_t}           altStackSize;\par
4798         {\cf17 static} {\cf18 char}*            altStackMem;\par
4799 \par
4800         {\cf17 static} {\cf18 void} handleSignal({\cf18 int} sig) \{\par
4801             {\cf17 const} {\cf18 char}* name = {\cf22 "<unknown signal>"};\par
4802             {\cf19 for}(std::size_t i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) \{\par
4803                 SignalDefs& def = signalDefs[i];\par
4804                 {\cf19 if}(sig == def.id) \{\par
4805                     name = def.name;\par
4806                     {\cf19 break};\par
4807                 \}\par
4808             \}\par
4809             reset();\par
4810             reportFatal(name);\par
4811             raise(sig);\par
4812         \}\par
4813 \par
4814         {\cf17 static} {\cf18 void} allocateAltStackMem() \{\par
4815             altStackMem = {\cf17 new} {\cf18 char}[altStackSize];\par
4816         \}\par
4817 \par
4818         {\cf17 static} {\cf18 void} freeAltStackMem() \{\par
4819             {\cf17 delete}[] altStackMem;\par
4820         \}\par
4821 \par
4822         FatalConditionHandler() \{\par
4823             isSet = {\cf17 true};\par
4824             stack_t sigStack;\par
4825             sigStack.ss_sp    = altStackMem;\par
4826             sigStack.ss_size  = altStackSize;\par
4827             sigStack.ss_flags = 0;\par
4828             sigaltstack(&sigStack, &oldSigStack);\par
4829             {\cf17 struct }sigaction sa = \{\};\par
4830             sa.sa_handler       = handleSignal;\par
4831             sa.sa_flags         = SA_ONSTACK;\par
4832             {\cf19 for}(std::size_t i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) \{\par
4833                 sigaction(signalDefs[i].{\cf18 id}, &sa, &oldSigActions[i]);\par
4834             \}\par
4835         \}\par
4836 \par
4837         ~FatalConditionHandler() \{ reset(); \}\par
4838         {\cf17 static} {\cf18 void} reset() \{\par
4839             {\cf19 if}(isSet) \{\par
4840                 {\cf20 // Set signals back to previous values -- hopefully nobody overwrote them in the meantime}\par
4841                 {\cf19 for}(std::size_t i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) \{\par
4842                     sigaction(signalDefs[i].{\cf18 id}, &oldSigActions[i], {\cf17 nullptr});\par
4843                 \}\par
4844                 {\cf20 // Return the old stack}\par
4845                 sigaltstack(&oldSigStack, {\cf17 nullptr});\par
4846                 isSet = {\cf17 false};\par
4847             \}\par
4848         \}\par
4849     \};\par
4850 \par
4851     {\cf18 bool}             FatalConditionHandler::isSet = {\cf17 false};\par
4852     {\cf17 struct }sigaction FatalConditionHandler::oldSigActions[DOCTEST_COUNTOF(signalDefs)] = \{\};\par
4853     stack_t          FatalConditionHandler::oldSigStack = \{\};\par
4854     {\cf18 size_t}           FatalConditionHandler::altStackSize = 4 * SIGSTKSZ;\par
4855     {\cf18 char}*            FatalConditionHandler::altStackMem = {\cf17 nullptr};\par
4856 \par
4857 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
4858 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_POSIX_SIGNALS || DOCTEST_CONFIG_WINDOWS_SEH}\par
4859 \par
4860 \} {\cf20 // namespace}\par
4861 \par
4862 {\cf17 namespace }\{\par
4863     {\cf17 using namespace }detail;\par
4864 \par
4865 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
4866 {\cf21 #define DOCTEST_OUTPUT_DEBUG_STRING(text) ::OutputDebugStringA(text)}\par
4867 {\cf21 #else}\par
4868     {\cf20 // TODO: integration with XCode and other IDEs}\par
4869 {\cf21 #define DOCTEST_OUTPUT_DEBUG_STRING(text)}\par
4870 {\cf21 #endif }{\cf20 // Platform}\par
4871 \par
4872     {\cf18 void} addAssert(assertType::Enum at) \{\par
4873         {\cf19 if}((at & assertType::is_warn) == 0) \par
4874             g_cs->numAssertsCurrentTest_atomic++;\par
4875     \}\par
4876 \par
4877     {\cf18 void} addFailedAssert(assertType::Enum at) \{\par
4878         {\cf19 if}((at & assertType::is_warn) == 0) \par
4879             g_cs->numAssertsFailedCurrentTest_atomic++;\par
4880     \}\par
4881 \par
4882 {\cf21 #if defined(DOCTEST_CONFIG_POSIX_SIGNALS) || defined(DOCTEST_CONFIG_WINDOWS_SEH)}\par
4883     {\cf18 void} reportFatal({\cf17 const} std::string& message) \{\par
4884         g_cs->failure_flags |= TestCaseFailureReason::Crash;\par
4885 \par
4886         DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_exception, \{message.c_str(), {\cf17 true}\});\par
4887 \par
4888         {\cf19 while} (g_cs->subcaseStack.size()) \{\par
4889             g_cs->subcaseStack.pop_back();\par
4890             DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_end, DOCTEST_EMPTY);\par
4891         \}\par
4892 \par
4893         g_cs->finalizeTestCaseData();\par
4894 \par
4895         DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_end, *g_cs);\par
4896 \par
4897         DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_end, *g_cs);\par
4898     \}\par
4899 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_POSIX_SIGNALS || DOCTEST_CONFIG_WINDOWS_SEH}\par
4900 \} {\cf20 // namespace}\par
4901 \par
4902 AssertData::AssertData(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
4903     {\cf17 const} {\cf18 char}* exception_type, {\cf17 const} StringContains& exception_string)\par
4904     : m_test_case(g_cs->currentTest), m_at(at), m_file(file), m_line(line), m_expr(expr),\par
4905     m_failed(true), m_threw(false), m_threw_as(false), m_exception_type(exception_type),\par
4906     m_exception_string(exception_string) \{\par
4907 {\cf21 #if DOCTEST_MSVC}\par
4908     {\cf19 if} (m_expr[0] == {\cf23 ' '}) {\cf20 // this happens when variadic macros are disabled under MSVC}\par
4909         ++m_expr;\par
4910 {\cf21 #endif }{\cf20 // MSVC}\par
4911 \}\par
4912 \par
4913 {\cf17 namespace }detail \{\par
4914     ResultBuilder::ResultBuilder(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
4915                                  {\cf17 const} {\cf18 char}* exception_type, {\cf17 const} String& exception_string)\par
4916         : AssertData(at, file, line, expr, exception_type, exception_string) \{ \}\par
4917 \par
4918     ResultBuilder::ResultBuilder(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
4919         {\cf17 const} {\cf18 char}* exception_type, {\cf17 const} Contains& exception_string)\par
4920         : AssertData(at, file, line, expr, exception_type, exception_string) \{ \}\par
4921 \par
4922     {\cf18 void} ResultBuilder::setResult({\cf17 const} Result& res) \{\par
4923         m_decomp = res.m_decomp;\par
4924         m_failed = !res.m_passed;\par
4925     \}\par
4926 \par
4927     {\cf18 void} ResultBuilder::translateException() \{\par
4928         m_threw     = {\cf17 true};\par
4929         m_exception = translateActiveException();\par
4930     \}\par
4931 \par
4932     {\cf18 bool} ResultBuilder::log() \{\par
4933         {\cf19 if}(m_at & assertType::is_throws) \{ \par
4934             m_failed = !m_threw;\par
4935         \} {\cf19 else} {\cf19 if}((m_at & assertType::is_throws_as) && (m_at & assertType::is_throws_with)) \{ \par
4936             m_failed = !m_threw_as || !m_exception_string.check(m_exception);\par
4937         \} {\cf19 else} {\cf19 if}(m_at & assertType::is_throws_as) \{ \par
4938             m_failed = !m_threw_as;\par
4939         \} {\cf19 else} {\cf19 if}(m_at & assertType::is_throws_with) \{ \par
4940             m_failed = !m_exception_string.check(m_exception);\par
4941         \} {\cf19 else} {\cf19 if}(m_at & assertType::is_nothrow) \{ \par
4942             m_failed = m_threw;\par
4943         \}\par
4944 \par
4945         {\cf19 if}(m_exception.size())\par
4946             m_exception = {\cf22 "\\""} + m_exception + {\cf22 "\\""};\par
4947 \par
4948         {\cf19 if}(is_running_in_test) \{\par
4949             addAssert(m_at);\par
4950             DOCTEST_ITERATE_THROUGH_REPORTERS(log_assert, *{\cf17 this});\par
4951 \par
4952             {\cf19 if}(m_failed)\par
4953                 addFailedAssert(m_at);\par
4954         \} {\cf19 else} {\cf19 if}(m_failed) \{\par
4955             failed_out_of_a_testing_context(*{\cf17 this});\par
4956         \}\par
4957 \par
4958         {\cf19 return} m_failed && isDebuggerActive() && !getContextOptions()->no_breaks &&\par
4959             (g_cs->currentTest == {\cf17 nullptr} || !g_cs->currentTest->m_no_breaks); {\cf20 // break into debugger}\par
4960     \}\par
4961 \par
4962     {\cf18 void} ResultBuilder::react(){\cf17  const }\{\par
4963         {\cf19 if}(m_failed && checkIfShouldThrow(m_at))\par
4964             throwException();\par
4965     \}\par
4966 \par
4967     {\cf18 void} failed_out_of_a_testing_context({\cf17 const} AssertData& ad) \{\par
4968         {\cf19 if}(g_cs->ah)\par
4969             g_cs->ah(ad);\par
4970         {\cf19 else}\par
4971             std::abort();\par
4972     \}\par
4973 \par
4974     {\cf18 bool} decomp_assert(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
4975                        {\cf17 const} Result& result) \{\par
4976         {\cf18 bool} failed = !result.m_passed;\par
4977 \par
4978         {\cf20 // ###################################################################################}\par
4979         {\cf20 // IF THE DEBUGGER BREAKS HERE - GO 1 LEVEL UP IN THE CALLSTACK FOR THE FAILING ASSERT}\par
4980         {\cf20 // THIS IS THE EFFECT OF HAVING 'DOCTEST_CONFIG_SUPER_FAST_ASSERTS' DEFINED}\par
4981         {\cf20 // ###################################################################################}\par
4982         DOCTEST_ASSERT_OUT_OF_TESTS(result.m_decomp);\par
4983         DOCTEST_ASSERT_IN_TESTS(result.m_decomp);\par
4984         {\cf19 return} !failed;\par
4985     \}\par
4986 \par
4987     MessageBuilder::MessageBuilder({\cf17 const} {\cf18 char}* file, {\cf18 int} line, assertType::Enum severity) \{\par
4988         m_stream   = tlssPush();\par
4989         m_file     = file;\par
4990         m_line     = line;\par
4991         m_severity = severity;\par
4992     \}\par
4993 \par
4994     MessageBuilder::~MessageBuilder() \{\par
4995         {\cf19 if} (!logged)\par
4996             tlssPop();\par
4997     \}\par
4998 \par
4999     DOCTEST_DEFINE_INTERFACE(IExceptionTranslator)\par
5000 \par
5001     {\cf18 bool} MessageBuilder::log() \{\par
5002         {\cf19 if} (!logged) \{\par
5003             m_string = tlssPop();\par
5004             logged = {\cf17 true};\par
5005         \}\par
5006 \par
5007         DOCTEST_ITERATE_THROUGH_REPORTERS(log_message, *{\cf17 this});\par
5008 \par
5009         {\cf17 const} {\cf18 bool} isWarn = m_severity & assertType::is_warn;\par
5010 \par
5011         {\cf20 // warn is just a message in this context so we don't treat it as an assert}\par
5012         {\cf19 if}(!isWarn) \{\par
5013             addAssert(m_severity);\par
5014             addFailedAssert(m_severity);\par
5015         \}\par
5016 \par
5017         {\cf19 return} isDebuggerActive() && !getContextOptions()->no_breaks && !isWarn &&\par
5018             (g_cs->currentTest == {\cf17 nullptr} || !g_cs->currentTest->m_no_breaks); {\cf20 // break into debugger}\par
5019     \}\par
5020 \par
5021     {\cf18 void} MessageBuilder::react() \{\par
5022         {\cf19 if}(m_severity & assertType::is_require) \par
5023             throwException();\par
5024     \}\par
5025 \} {\cf20 // namespace detail}\par
5026 {\cf17 namespace }\{\par
5027     {\cf17 using namespace }detail;\par
5028 \par
5029     {\cf20 // clang-format off}\par
5030 \par
5031 {\cf20 // =================================================================================================}\par
5032 {\cf20 // The following code has been taken verbatim from Catch2/include/internal/catch_xmlwriter.h/cpp}\par
5033 {\cf20 // This is done so cherry-picking bug fixes is trivial - even the style/formatting is untouched.}\par
5034 {\cf20 // =================================================================================================}\par
5035 \par
5036     {\cf17 class }XmlEncode \{\par
5037     {\cf17 public}:\par
5038         {\cf17 enum} ForWhat \{ ForTextNodes, ForAttributes \};\par
5039 \par
5040         XmlEncode( std::string {\cf17 const}& str, ForWhat forWhat = ForTextNodes );\par
5041 \par
5042         {\cf18 void} encodeTo( std::ostream& os ) {\cf17 const};\par
5043 \par
5044         {\cf17 friend} std::ostream& operator << ( std::ostream& os, XmlEncode {\cf17 const}& xmlEncode );\par
5045 \par
5046     {\cf17 private}:\par
5047         std::string m_str;\par
5048         ForWhat m_forWhat;\par
5049     \};\par
5050 \par
5051     {\cf17 class }XmlWriter \{\par
5052     {\cf17 public}:\par
5053 \par
5054         {\cf17 class }ScopedElement \{\par
5055         {\cf17 public}:\par
5056             ScopedElement( XmlWriter* writer );\par
5057 \par
5058             ScopedElement( ScopedElement&& other ) DOCTEST_NOEXCEPT;\par
5059             ScopedElement& operator=( ScopedElement&& other ) DOCTEST_NOEXCEPT;\par
5060 \par
5061             ~ScopedElement();\par
5062 \par
5063             ScopedElement& writeText( std::string {\cf17 const}& text, {\cf18 bool} indent = {\cf17 true} );\par
5064 \par
5065             {\cf17 template}<{\cf17 typename} T>\par
5066             ScopedElement& writeAttribute( std::string {\cf17 const}& name, T {\cf17 const}& attribute ) \{\par
5067                 m_writer->writeAttribute( name, attribute );\par
5068                 {\cf19 return} *{\cf17 this};\par
5069             \}\par
5070 \par
5071         {\cf17 private}:\par
5072             {\cf17 mutable} XmlWriter* m_writer = {\cf17 nullptr};\par
5073         \};\par
5074 \par
5075 {\cf21 #ifndef DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM}\par
5076         XmlWriter( std::ostream& os = std::cout );\par
5077 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM}\par
5078         XmlWriter( std::ostream& os );\par
5079 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM}\par
5080         ~XmlWriter();\par
5081 \par
5082         XmlWriter( XmlWriter {\cf17 const}& ) = {\cf17 delete};\par
5083         XmlWriter& operator=( XmlWriter {\cf17 const}& ) = {\cf17 delete};\par
5084 \par
5085         XmlWriter& startElement( std::string {\cf17 const}& name );\par
5086 \par
5087         ScopedElement scopedElement( std::string {\cf17 const}& name );\par
5088 \par
5089         XmlWriter& endElement();\par
5090 \par
5091         XmlWriter& writeAttribute( std::string {\cf17 const}& name, std::string {\cf17 const}& attribute );\par
5092 \par
5093         XmlWriter& writeAttribute( std::string {\cf17 const}& name, {\cf17 const} {\cf18 char}* attribute );\par
5094 \par
5095         XmlWriter& writeAttribute( std::string {\cf17 const}& name, {\cf18 bool} attribute );\par
5096 \par
5097         {\cf17 template}<{\cf17 typename} T>\par
5098         XmlWriter& writeAttribute( std::string {\cf17 const}& name, T {\cf17 const}& attribute ) \{\par
5099         std::stringstream rss;\par
5100             rss << attribute;\par
5101             {\cf19 return} writeAttribute( name, rss.str() );\par
5102         \}\par
5103 \par
5104         XmlWriter& writeText( std::string {\cf17 const}& text, {\cf18 bool} indent = {\cf17 true} );\par
5105 \par
5106         {\cf20 //XmlWriter& writeComment( std::string const& text );}\par
5107 \par
5108         {\cf20 //void writeStylesheetRef( std::string const& url );}\par
5109 \par
5110         {\cf20 //XmlWriter& writeBlankLine();}\par
5111 \par
5112         {\cf18 void} ensureTagClosed();\par
5113 \par
5114         {\cf18 void} writeDeclaration();\par
5115 \par
5116     {\cf17 private}:\par
5117 \par
5118         {\cf18 void} newlineIfNecessary();\par
5119 \par
5120         {\cf18 bool} m_tagIsOpen = {\cf17 false};\par
5121         {\cf18 bool} m_needsNewline = {\cf17 false};\par
5122         std::vector<std::string> m_tags;\par
5123         std::string m_indent;\par
5124         std::ostream& m_os;\par
5125     \};\par
5126 \par
5127 {\cf20 // =================================================================================================}\par
5128 {\cf20 // The following code has been taken verbatim from Catch2/include/internal/catch_xmlwriter.h/cpp}\par
5129 {\cf20 // This is done so cherry-picking bug fixes is trivial - even the style/formatting is untouched.}\par
5130 {\cf20 // =================================================================================================}\par
5131 \par
5132 {\cf17 using }uchar = {\cf18 unsigned} char;\par
5133 \par
5134 {\cf17 namespace }\{\par
5135 \par
5136     {\cf18 size_t} trailingBytes({\cf18 unsigned} {\cf18 char} c) \{\par
5137         {\cf19 if} ((c & 0xE0) == 0xC0) \{\par
5138             {\cf19 return} 2;\par
5139         \}\par
5140         {\cf19 if} ((c & 0xF0) == 0xE0) \{\par
5141             {\cf19 return} 3;\par
5142         \}\par
5143         {\cf19 if} ((c & 0xF8) == 0xF0) \{\par
5144             {\cf19 return} 4;\par
5145         \}\par
5146         DOCTEST_INTERNAL_ERROR({\cf22 "Invalid multibyte utf-8 start byte encountered"});\par
5147     \}\par
5148 \par
5149     uint32_t headerValue({\cf18 unsigned} {\cf18 char} c) \{\par
5150         {\cf19 if} ((c & 0xE0) == 0xC0) \{\par
5151             {\cf19 return} c & 0x1F;\par
5152         \}\par
5153         {\cf19 if} ((c & 0xF0) == 0xE0) \{\par
5154             {\cf19 return} c & 0x0F;\par
5155         \}\par
5156         {\cf19 if} ((c & 0xF8) == 0xF0) \{\par
5157             {\cf19 return} c & 0x07;\par
5158         \}\par
5159         DOCTEST_INTERNAL_ERROR({\cf22 "Invalid multibyte utf-8 start byte encountered"});\par
5160     \}\par
5161 \par
5162     {\cf18 void} hexEscapeChar(std::ostream& os, {\cf18 unsigned} {\cf18 char} c) \{\par
5163         std::ios_base::fmtflags f(os.flags());\par
5164         os << {\cf22 "\\\\x"}\par
5165             << std::uppercase << std::hex << std::setfill({\cf23 '0'}) << std::setw(2)\par
5166             << {\cf17 static_cast<}{\cf18 int}{\cf17 >}(c);\par
5167         os.flags(f);\par
5168     \}\par
5169 \par
5170 \} {\cf20 // anonymous namespace}\par
5171 \par
5172     XmlEncode::XmlEncode( std::string {\cf17 const}& str, ForWhat forWhat )\par
5173     :   m_str( str ),\par
5174         m_forWhat( forWhat )\par
5175     \{\}\par
5176 \par
5177     {\cf18 void} XmlEncode::encodeTo( std::ostream& os ){\cf17  const }\{\par
5178         {\cf20 // Apostrophe escaping not necessary if we always use " to write attributes}\par
5179         {\cf20 // (see: https://www.w3.org/TR/xml/#syntax)}\par
5180 \par
5181         {\cf19 for}( std::size_t idx = 0; idx < m_str.size(); ++ idx ) \{\par
5182             uchar c = m_str[idx];\par
5183             {\cf19 switch} (c) \{\par
5184             {\cf19 case} {\cf23 '<'}:   os << {\cf22 "&lt;"}; {\cf19 break};\par
5185             {\cf19 case} {\cf23 '&'}:   os << {\cf22 "&amp;"}; {\cf19 break};\par
5186 \par
5187             {\cf19 case} {\cf23 '>'}:\par
5188                 {\cf20 // See: https://www.w3.org/TR/xml/#syntax}\par
5189                 {\cf19 if} (idx > 2 && m_str[idx - 1] == {\cf23 ']'} && m_str[idx - 2] == {\cf23 ']'})\par
5190                     os << {\cf22 "&gt;"};\par
5191                 {\cf19 else}\par
5192                     os << c;\par
5193                 {\cf19 break};\par
5194 \par
5195             {\cf19 case} {\cf23 '\\"'}:\par
5196                 {\cf19 if} (m_forWhat == ForAttributes)\par
5197                     os << {\cf22 "&quot;"};\par
5198                 {\cf19 else}\par
5199                     os << c;\par
5200                 {\cf19 break};\par
5201 \par
5202             {\cf19 default}:\par
5203                 {\cf20 // Check for control characters and invalid utf-8}\par
5204 \par
5205                 {\cf20 // Escape control characters in standard ascii}\par
5206                 {\cf20 // see https://stackoverflow.com/questions/404107/why-are-control-characters-illegal-in-xml-1-0}\par
5207                 {\cf19 if} (c < 0x09 || (c > 0x0D && c < 0x20) || c == 0x7F) \{\par
5208                     hexEscapeChar(os, c);\par
5209                     {\cf19 break};\par
5210                 \}\par
5211 \par
5212                 {\cf20 // Plain ASCII: Write it to stream}\par
5213                 {\cf19 if} (c < 0x7F) \{\par
5214                     os << c;\par
5215                     {\cf19 break};\par
5216                 \}\par
5217 \par
5218                 {\cf20 // UTF-8 territory}\par
5219                 {\cf20 // Check if the encoding is valid and if it is not, hex escape bytes.}\par
5220                 {\cf20 // Important: We do not check the exact decoded values for validity, only the encoding format}\par
5221                 {\cf20 // First check that this bytes is a valid lead byte:}\par
5222                 {\cf20 // This means that it is not encoded as 1111 1XXX}\par
5223                 {\cf20 // Or as 10XX XXXX}\par
5224                 {\cf19 if} (c <  0xC0 ||\par
5225                     c >= 0xF8) \{\par
5226                     hexEscapeChar(os, c);\par
5227                     {\cf19 break};\par
5228                 \}\par
5229 \par
5230                 {\cf17 auto} encBytes = trailingBytes(c);\par
5231                 {\cf20 // Are there enough bytes left to avoid accessing out-of-bounds memory?}\par
5232                 {\cf19 if} (idx + encBytes - 1 >= m_str.size()) \{\par
5233                     hexEscapeChar(os, c);\par
5234                     {\cf19 break};\par
5235                 \}\par
5236                 {\cf20 // The header is valid, check data}\par
5237                 {\cf20 // The next encBytes bytes must together be a valid utf-8}\par
5238                 {\cf20 // This means: bitpattern 10XX XXXX and the extracted value is sane (ish)}\par
5239                 {\cf18 bool} valid = {\cf17 true};\par
5240                 uint32_t value = headerValue(c);\par
5241                 {\cf19 for} (std::size_t n = 1; n < encBytes; ++n) \{\par
5242                     uchar nc = m_str[idx + n];\par
5243                     valid &= ((nc & 0xC0) == 0x80);\par
5244                     value = (value << 6) | (nc & 0x3F);\par
5245                 \}\par
5246 \par
5247                 {\cf19 if} (\par
5248                     {\cf20 // Wrong bit pattern of following bytes}\par
5249                     (!valid) ||\par
5250                     {\cf20 // Overlong encodings}\par
5251                     (value < 0x80) ||\par
5252                     (                 value < 0x800   && encBytes > 2) || {\cf20 // removed "0x80 <= value &&" because redundant}\par
5253                     (0x800 < value && value < 0x10000 && encBytes > 3) ||\par
5254                     {\cf20 // Encoded value out of range}\par
5255                     (value >= 0x110000)\par
5256                     ) \{\par
5257                     hexEscapeChar(os, c);\par
5258                     {\cf19 break};\par
5259                 \}\par
5260 \par
5261                 {\cf20 // If we got here, this is in fact a valid(ish) utf-8 sequence}\par
5262                 {\cf19 for} (std::size_t n = 0; n < encBytes; ++n) \{\par
5263                     os << m_str[idx + n];\par
5264                 \}\par
5265                 idx += encBytes - 1;\par
5266                 {\cf19 break};\par
5267             \}\par
5268         \}\par
5269     \}\par
5270 \par
5271     std::ostream& operator << ( std::ostream& os, XmlEncode {\cf17 const}& xmlEncode ) \{\par
5272         xmlEncode.encodeTo( os );\par
5273         {\cf19 return} os;\par
5274     \}\par
5275 \par
5276     XmlWriter::ScopedElement::ScopedElement( XmlWriter* writer )\par
5277     :   m_writer( writer )\par
5278     \{\}\par
5279 \par
5280     XmlWriter::ScopedElement::ScopedElement( ScopedElement&& other ) DOCTEST_NOEXCEPT\par
5281     :   m_writer( other.m_writer )\{\par
5282         other.m_writer = {\cf17 nullptr};\par
5283     \}\par
5284     XmlWriter::ScopedElement& XmlWriter::ScopedElement::operator=( ScopedElement&& other ) DOCTEST_NOEXCEPT \{\par
5285         {\cf19 if} ( m_writer ) \{\par
5286             m_writer->endElement();\par
5287         \}\par
5288         m_writer = other.m_writer;\par
5289         other.m_writer = {\cf17 nullptr};\par
5290         {\cf19 return} *{\cf17 this};\par
5291     \}\par
5292 \par
5293 \par
5294     XmlWriter::ScopedElement::~ScopedElement() \{\par
5295         {\cf19 if}( m_writer )\par
5296             m_writer->endElement();\par
5297     \}\par
5298 \par
5299     XmlWriter::ScopedElement& XmlWriter::ScopedElement::writeText( std::string {\cf17 const}& text, {\cf18 bool} indent ) \{\par
5300         m_writer->writeText( text, indent );\par
5301         {\cf19 return} *{\cf17 this};\par
5302     \}\par
5303 \par
5304     XmlWriter::XmlWriter( std::ostream& os ) : m_os( os )\par
5305     \{\par
5306         {\cf20 // writeDeclaration(); // called explicitly by the reporters that use the writer class - see issue #627}\par
5307     \}\par
5308 \par
5309     XmlWriter::~XmlWriter() \{\par
5310         {\cf19 while}( !m_tags.empty() )\par
5311             endElement();\par
5312     \}\par
5313 \par
5314     XmlWriter& XmlWriter::startElement( std::string {\cf17 const}& name ) \{\par
5315         ensureTagClosed();\par
5316         newlineIfNecessary();\par
5317         m_os << m_indent << {\cf23 '<'} << name;\par
5318         m_tags.push_back( name );\par
5319         m_indent += {\cf22 "  "};\par
5320         m_tagIsOpen = {\cf17 true};\par
5321         {\cf19 return} *{\cf17 this};\par
5322     \}\par
5323 \par
5324     XmlWriter::ScopedElement XmlWriter::scopedElement( std::string {\cf17 const}& name ) \{\par
5325         ScopedElement scoped( {\cf17 this} );\par
5326         startElement( name );\par
5327         {\cf19 return} scoped;\par
5328     \}\par
5329 \par
5330     XmlWriter& XmlWriter::endElement() \{\par
5331         newlineIfNecessary();\par
5332         m_indent = m_indent.substr( 0, m_indent.size()-2 );\par
5333         {\cf19 if}( m_tagIsOpen ) \{\par
5334             m_os << {\cf22 "/>"};\par
5335             m_tagIsOpen = {\cf17 false};\par
5336         \}\par
5337         {\cf19 else} \{\par
5338             m_os << m_indent << {\cf22 "</"} << m_tags.back() << {\cf22 ">"};\par
5339         \}\par
5340         m_os << std::endl;\par
5341         m_tags.pop_back();\par
5342         {\cf19 return} *{\cf17 this};\par
5343     \}\par
5344 \par
5345     XmlWriter& XmlWriter::writeAttribute( std::string {\cf17 const}& name, std::string {\cf17 const}& attribute ) \{\par
5346         {\cf19 if}( !name.empty() && !attribute.empty() )\par
5347             m_os << {\cf23 ' '} << name << {\cf22 "=\\""} << XmlEncode( attribute, XmlEncode::ForAttributes ) << {\cf23 '"'};\par
5348         {\cf19 return} *{\cf17 this};\par
5349     \}\par
5350 \par
5351     XmlWriter& XmlWriter::writeAttribute( std::string {\cf17 const}& name, {\cf17 const} {\cf18 char}* attribute ) \{\par
5352         {\cf19 if}( !name.empty() && attribute && attribute[0] != {\cf23 '\\0'} )\par
5353             m_os << {\cf23 ' '} << name << {\cf22 "=\\""} << XmlEncode( attribute, XmlEncode::ForAttributes ) << {\cf23 '"'};\par
5354         {\cf19 return} *{\cf17 this};\par
5355     \}\par
5356 \par
5357     XmlWriter& XmlWriter::writeAttribute( std::string {\cf17 const}& name, {\cf18 bool} attribute ) \{\par
5358         m_os << {\cf23 ' '} << name << {\cf22 "=\\""} << ( attribute ? {\cf22 "true"} : {\cf22 "false"} ) << {\cf23 '"'};\par
5359         {\cf19 return} *{\cf17 this};\par
5360     \}\par
5361 \par
5362     XmlWriter& XmlWriter::writeText( std::string {\cf17 const}& text, {\cf18 bool} indent ) \{\par
5363         {\cf19 if}( !text.empty() )\{\par
5364             {\cf18 bool} tagWasOpen = m_tagIsOpen;\par
5365             ensureTagClosed();\par
5366             {\cf19 if}( tagWasOpen && indent )\par
5367                 m_os << m_indent;\par
5368             m_os << XmlEncode( text );\par
5369             m_needsNewline = {\cf17 true};\par
5370         \}\par
5371         {\cf19 return} *{\cf17 this};\par
5372     \}\par
5373 \par
5374     {\cf20 //XmlWriter& XmlWriter::writeComment( std::string const& text ) \{}\par
5375     {\cf20 //    ensureTagClosed();}\par
5376     {\cf20 //    m_os << m_indent << "<!--" << text << "-->";}\par
5377     {\cf20 //    m_needsNewline = true;}\par
5378     {\cf20 //    return *this;}\par
5379     {\cf20 //\}}\par
5380 \par
5381     {\cf20 //void XmlWriter::writeStylesheetRef( std::string const& url ) \{}\par
5382     {\cf20 //    m_os << "<?xml-stylesheet type=\\"text/xsl\\" href=\\"" << url << "\\"?>\\n";}\par
5383     {\cf20 //\}}\par
5384 \par
5385     {\cf20 //XmlWriter& XmlWriter::writeBlankLine() \{}\par
5386     {\cf20 //    ensureTagClosed();}\par
5387     {\cf20 //    m_os << '\\n';}\par
5388     {\cf20 //    return *this;}\par
5389     {\cf20 //\}}\par
5390 \par
5391     {\cf18 void} XmlWriter::ensureTagClosed() \{\par
5392         {\cf19 if}( m_tagIsOpen ) \{\par
5393             m_os << {\cf22 ">"} << std::endl;\par
5394             m_tagIsOpen = {\cf17 false};\par
5395         \}\par
5396     \}\par
5397 \par
5398     {\cf18 void} XmlWriter::writeDeclaration() \{\par
5399         m_os << {\cf22 "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n"};\par
5400     \}\par
5401 \par
5402     {\cf18 void} XmlWriter::newlineIfNecessary() \{\par
5403         {\cf19 if}( m_needsNewline ) \{\par
5404             m_os << std::endl;\par
5405             m_needsNewline = {\cf17 false};\par
5406         \}\par
5407     \}\par
5408 \par
5409 {\cf20 // =================================================================================================}\par
5410 {\cf20 // End of copy-pasted code from Catch}\par
5411 {\cf20 // =================================================================================================}\par
5412 \par
5413     {\cf20 // clang-format on}\par
5414 \par
5415     {\cf17 struct }XmlReporter : {\cf17 public} IReporter\par
5416     \{\par
5417         XmlWriter xml;\par
5418         DOCTEST_DECLARE_MUTEX(mutex)\par
5419 \par
5420         {\cf20 // caching pointers/references to objects of these types - safe to do}\par
5421         {\cf17 const} ContextOptions& opt;\par
5422         {\cf17 const} TestCaseData*   tc = {\cf17 nullptr};\par
5423 \par
5424         XmlReporter({\cf17 const} ContextOptions& co)\par
5425                 : xml(*co.cout)\par
5426                 , opt(co) \{\}\par
5427 \par
5428         {\cf18 void} log_contexts() \{\par
5429             {\cf18 int} num_contexts = get_num_active_contexts();\par
5430             {\cf19 if}(num_contexts) \{\par
5431                 {\cf17 auto}              contexts = get_active_contexts();\par
5432                 std::stringstream ss;\par
5433                 {\cf19 for}({\cf18 int} i = 0; i < num_contexts; ++i) \{\par
5434                     contexts[i]->stringify(&ss);\par
5435                     xml.scopedElement({\cf22 "Info"}).writeText(ss.str());\par
5436                     ss.str({\cf22 ""});\par
5437                 \}\par
5438             \}\par
5439         \}\par
5440 \par
5441         {\cf18 unsigned} line({\cf18 unsigned} l){\cf17  const }\{ {\cf19 return} opt.no_line_numbers ? 0 : l; \}\par
5442 \par
5443         {\cf18 void} test_case_start_impl({\cf17 const} TestCaseData& in) \{\par
5444             {\cf18 bool} open_ts_tag = {\cf17 false};\par
5445             {\cf19 if}(tc != {\cf17 nullptr}) \{ {\cf20 // we have already opened a test suite}\par
5446                 {\cf19 if}(std::strcmp(tc->m_test_suite, in.m_test_suite) != 0) \{\par
5447                     xml.endElement();\par
5448                     open_ts_tag = {\cf17 true};\par
5449                 \}\par
5450             \}\par
5451             {\cf19 else} \{\par
5452                 open_ts_tag = {\cf17 true}; {\cf20 // first test case ==> first test suite}\par
5453             \}\par
5454 \par
5455             {\cf19 if}(open_ts_tag) \{\par
5456                 xml.startElement({\cf22 "TestSuite"});\par
5457                 xml.writeAttribute({\cf22 "name"}, in.m_test_suite);\par
5458             \}\par
5459 \par
5460             tc = &in;\par
5461             xml.startElement({\cf22 "TestCase"})\par
5462                     .writeAttribute({\cf22 "name"}, in.m_name)\par
5463                     .writeAttribute({\cf22 "filename"}, skipPathFromFilename(in.m_file.c_str()))\par
5464                     .writeAttribute({\cf22 "line"}, line(in.m_line))\par
5465                     .writeAttribute({\cf22 "description"}, in.m_description);\par
5466 \par
5467             {\cf19 if}(Approx(in.m_timeout) != 0)\par
5468                 xml.writeAttribute({\cf22 "timeout"}, in.m_timeout);\par
5469             {\cf19 if}(in.m_may_fail)\par
5470                 xml.writeAttribute({\cf22 "may_fail"}, {\cf17 true});\par
5471             {\cf19 if}(in.m_should_fail)\par
5472                 xml.writeAttribute({\cf22 "should_fail"}, {\cf17 true});\par
5473         \}\par
5474 \par
5475         {\cf20 // =========================================================================================}\par
5476         {\cf20 // WHAT FOLLOWS ARE OVERRIDES OF THE VIRTUAL METHODS OF THE REPORTER INTERFACE}\par
5477         {\cf20 // =========================================================================================}\par
5478 \par
5479         {\cf18 void} report_query({\cf17 const} QueryData& in){\cf17  override }\{\par
5480             test_run_start();\par
5481             {\cf19 if}(opt.list_reporters) \{\par
5482                 {\cf19 for}({\cf17 auto}& curr : getListeners())\par
5483                     xml.scopedElement({\cf22 "Listener"})\par
5484                             .writeAttribute({\cf22 "priority"}, curr.first.first)\par
5485                             .writeAttribute({\cf22 "name"}, curr.first.second);\par
5486                 {\cf19 for}({\cf17 auto}& curr : getReporters())\par
5487                     xml.scopedElement({\cf22 "Reporter"})\par
5488                             .writeAttribute({\cf22 "priority"}, curr.first.first)\par
5489                             .writeAttribute({\cf22 "name"}, curr.first.second);\par
5490             \} {\cf19 else} {\cf19 if}(opt.count || opt.list_test_cases) \{\par
5491                 {\cf19 for}({\cf18 unsigned} i = 0; i < in.num_data; ++i) \{\par
5492                     xml.scopedElement({\cf22 "TestCase"}).writeAttribute({\cf22 "name"}, in.data[i]->m_name)\par
5493                         .writeAttribute({\cf22 "testsuite"}, in.data[i]->m_test_suite)\par
5494                         .writeAttribute({\cf22 "filename"}, skipPathFromFilename(in.data[i]->m_file.c_str()))\par
5495                         .writeAttribute({\cf22 "line"}, line(in.data[i]->m_line))\par
5496                         .writeAttribute({\cf22 "skipped"}, in.data[i]->m_skip);\par
5497                 \}\par
5498                 xml.scopedElement({\cf22 "OverallResultsTestCases"})\par
5499                         .writeAttribute({\cf22 "unskipped"}, in.run_stats->numTestCasesPassingFilters);\par
5500             \} {\cf19 else} {\cf19 if}(opt.list_test_suites) \{\par
5501                 {\cf19 for}({\cf18 unsigned} i = 0; i < in.num_data; ++i)\par
5502                     xml.scopedElement({\cf22 "TestSuite"}).writeAttribute({\cf22 "name"}, in.data[i]->m_test_suite);\par
5503                 xml.scopedElement({\cf22 "OverallResultsTestCases"})\par
5504                         .writeAttribute({\cf22 "unskipped"}, in.run_stats->numTestCasesPassingFilters);\par
5505                 xml.scopedElement({\cf22 "OverallResultsTestSuites"})\par
5506                         .writeAttribute({\cf22 "unskipped"}, in.run_stats->numTestSuitesPassingFilters);\par
5507             \}\par
5508             xml.endElement();\par
5509         \}\par
5510 \par
5511         {\cf18 void} test_run_start(){\cf17  override }\{\par
5512             xml.writeDeclaration();\par
5513 \par
5514             {\cf20 // remove .exe extension - mainly to have the same output on UNIX and Windows}\par
5515             std::string binary_name = skipPathFromFilename(opt.binary_name.c_str());\par
5516 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
5517             {\cf19 if}(binary_name.rfind({\cf22 ".exe"}) != std::string::npos)\par
5518                 binary_name = binary_name.substr(0, binary_name.length() - 4);\par
5519 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
5520 \par
5521             xml.startElement({\cf22 "doctest"}).writeAttribute({\cf22 "binary"}, binary_name);\par
5522             {\cf19 if}(opt.no_version == {\cf17 false})\par
5523                 xml.writeAttribute({\cf22 "version"}, DOCTEST_VERSION_STR);\par
5524 \par
5525             {\cf20 // only the consequential ones (TODO: filters)}\par
5526             xml.scopedElement({\cf22 "Options"})\par
5527                     .writeAttribute({\cf22 "order_by"}, opt.order_by.c_str())\par
5528                     .writeAttribute({\cf22 "rand_seed"}, opt.rand_seed)\par
5529                     .writeAttribute({\cf22 "first"}, opt.first)\par
5530                     .writeAttribute({\cf22 "last"}, opt.last)\par
5531                     .writeAttribute({\cf22 "abort_after"}, opt.abort_after)\par
5532                     .writeAttribute({\cf22 "subcase_filter_levels"}, opt.subcase_filter_levels)\par
5533                     .writeAttribute({\cf22 "case_sensitive"}, opt.case_sensitive)\par
5534                     .writeAttribute({\cf22 "no_throw"}, opt.no_throw)\par
5535                     .writeAttribute({\cf22 "no_skip"}, opt.no_skip);\par
5536         \}\par
5537 \par
5538         {\cf18 void} test_run_end({\cf17 const} TestRunStats& p){\cf17  override }\{\par
5539             {\cf19 if}(tc) {\cf20 // the TestSuite tag - only if there has been at least 1 test case}\par
5540                 xml.endElement();\par
5541 \par
5542             xml.scopedElement({\cf22 "OverallResultsAsserts"})\par
5543                     .writeAttribute({\cf22 "successes"}, p.numAsserts - p.numAssertsFailed)\par
5544                     .writeAttribute({\cf22 "failures"}, p.numAssertsFailed);\par
5545 \par
5546             xml.startElement({\cf22 "OverallResultsTestCases"})\par
5547                     .writeAttribute({\cf22 "successes"},\par
5548                                     p.numTestCasesPassingFilters - p.numTestCasesFailed)\par
5549                     .writeAttribute({\cf22 "failures"}, p.numTestCasesFailed);\par
5550             {\cf19 if}(opt.no_skipped_summary == {\cf17 false})\par
5551                 xml.writeAttribute({\cf22 "skipped"}, p.numTestCases - p.numTestCasesPassingFilters);\par
5552             xml.endElement();\par
5553 \par
5554             xml.endElement();\par
5555         \}\par
5556 \par
5557         {\cf18 void} test_case_start({\cf17 const} TestCaseData& in){\cf17  override }\{\par
5558             test_case_start_impl(in);\par
5559             xml.ensureTagClosed();\par
5560         \}\par
5561 \par
5562         {\cf18 void} test_case_reenter({\cf17 const} TestCaseData&){\cf17  override }\{\}\par
5563 \par
5564         {\cf18 void} test_case_end({\cf17 const} CurrentTestCaseStats& st){\cf17  override }\{\par
5565             xml.startElement({\cf22 "OverallResultsAsserts"})\par
5566                     .writeAttribute({\cf22 "successes"},\par
5567                                     st.numAssertsCurrentTest - st.numAssertsFailedCurrentTest)\par
5568                     .writeAttribute({\cf22 "failures"}, st.numAssertsFailedCurrentTest)\par
5569                     .writeAttribute({\cf22 "test_case_success"}, st.testCaseSuccess);\par
5570             {\cf19 if}(opt.duration)\par
5571                 xml.writeAttribute({\cf22 "duration"}, st.seconds);\par
5572             {\cf19 if}(tc->m_expected_failures)\par
5573                 xml.writeAttribute({\cf22 "expected_failures"}, tc->m_expected_failures);\par
5574             xml.endElement();\par
5575 \par
5576             xml.endElement();\par
5577         \}\par
5578 \par
5579         {\cf18 void} test_case_exception({\cf17 const} TestCaseException& e){\cf17  override }\{\par
5580             DOCTEST_LOCK_MUTEX(mutex)\par
5581 \par
5582             xml.scopedElement({\cf22 "Exception"})\par
5583                     .writeAttribute({\cf22 "crash"}, e.is_crash)\par
5584                     .writeText(e.error_string.c_str());\par
5585         \}\par
5586 \par
5587         {\cf18 void} subcase_start({\cf17 const} SubcaseSignature& in){\cf17  override }\{\par
5588             xml.startElement({\cf22 "SubCase"})\par
5589                     .writeAttribute({\cf22 "name"}, in.m_name)\par
5590                     .writeAttribute({\cf22 "filename"}, skipPathFromFilename(in.m_file))\par
5591                     .writeAttribute({\cf22 "line"}, line(in.m_line));\par
5592             xml.ensureTagClosed();\par
5593         \}\par
5594 \par
5595         {\cf18 void} subcase_end(){\cf17  override }\{ xml.endElement(); \}\par
5596 \par
5597         {\cf18 void} log_assert({\cf17 const} AssertData& rb){\cf17  override }\{\par
5598             {\cf19 if}(!rb.m_failed && !opt.success)\par
5599                 {\cf19 return};\par
5600 \par
5601             DOCTEST_LOCK_MUTEX(mutex)\par
5602 \par
5603             xml.startElement({\cf22 "Expression"})\par
5604                     .writeAttribute({\cf22 "success"}, !rb.m_failed)\par
5605                     .writeAttribute({\cf22 "type"}, assertString(rb.m_at))\par
5606                     .writeAttribute({\cf22 "filename"}, skipPathFromFilename(rb.m_file))\par
5607                     .writeAttribute({\cf22 "line"}, line(rb.m_line));\par
5608 \par
5609             xml.scopedElement({\cf22 "Original"}).writeText(rb.m_expr);\par
5610 \par
5611             {\cf19 if}(rb.m_threw)\par
5612                 xml.scopedElement({\cf22 "Exception"}).writeText(rb.m_exception.c_str());\par
5613 \par
5614             {\cf19 if}(rb.m_at & assertType::is_throws_as)\par
5615                 xml.scopedElement({\cf22 "ExpectedException"}).writeText(rb.m_exception_type);\par
5616             {\cf19 if}(rb.m_at & assertType::is_throws_with)\par
5617                 xml.scopedElement({\cf22 "ExpectedExceptionString"}).writeText(rb.m_exception_string.c_str());\par
5618             {\cf19 if}((rb.m_at & assertType::is_normal) && !rb.m_threw)\par
5619                 xml.scopedElement({\cf22 "Expanded"}).writeText(rb.m_decomp.c_str());\par
5620 \par
5621             log_contexts();\par
5622 \par
5623             xml.endElement();\par
5624         \}\par
5625 \par
5626         {\cf18 void} log_message({\cf17 const} MessageData& mb){\cf17  override }\{\par
5627             DOCTEST_LOCK_MUTEX(mutex)\par
5628 \par
5629             xml.startElement({\cf22 "Message"})\par
5630                     .writeAttribute({\cf22 "type"}, failureString(mb.m_severity))\par
5631                     .writeAttribute({\cf22 "filename"}, skipPathFromFilename(mb.m_file))\par
5632                     .writeAttribute({\cf22 "line"}, line(mb.m_line));\par
5633 \par
5634             xml.scopedElement({\cf22 "Text"}).writeText(mb.m_string.c_str());\par
5635 \par
5636             log_contexts();\par
5637 \par
5638             xml.endElement();\par
5639         \}\par
5640 \par
5641         {\cf18 void} test_case_skipped({\cf17 const} TestCaseData& in){\cf17  override }\{\par
5642             {\cf19 if}(opt.no_skipped_summary == {\cf17 false}) \{\par
5643                 test_case_start_impl(in);\par
5644                 xml.writeAttribute({\cf22 "skipped"}, {\cf22 "true"});\par
5645                 xml.endElement();\par
5646             \}\par
5647         \}\par
5648     \};\par
5649 \par
5650     DOCTEST_REGISTER_REPORTER({\cf22 "xml"}, 0, XmlReporter);\par
5651 \par
5652     {\cf18 void} fulltext_log_assert_to_stream(std::ostream& s, {\cf17 const} AssertData& rb) \{\par
5653         {\cf19 if}((rb.m_at & (assertType::is_throws_as | assertType::is_throws_with)) ==\par
5654             0) \par
5655             s << Color::Cyan << assertString(rb.m_at) << {\cf22 "( "} << rb.m_expr << {\cf22 " ) "}\par
5656                 << Color::None;\par
5657 \par
5658         {\cf19 if}(rb.m_at & assertType::is_throws) \{ \par
5659             s << (rb.m_threw ? {\cf22 "threw as expected!"} : {\cf22 "did NOT throw at all!"}) << {\cf22 "\\n"};\par
5660         \} {\cf19 else} {\cf19 if}((rb.m_at & assertType::is_throws_as) &&\par
5661                     (rb.m_at & assertType::is_throws_with)) \{ \par
5662             s << Color::Cyan << assertString(rb.m_at) << {\cf22 "( "} << rb.m_expr << {\cf22 ", \\""}\par
5663                 << rb.m_exception_string.c_str()\par
5664                 << {\cf22 "\\", "} << rb.m_exception_type << {\cf22 " ) "} << Color::None;\par
5665             {\cf19 if}(rb.m_threw) \{\par
5666                 {\cf19 if}(!rb.m_failed) \{\par
5667                     s << {\cf22 "threw as expected!\\n"};\par
5668                 \} {\cf19 else} \{\par
5669                     s << {\cf22 "threw a DIFFERENT exception! (contents: "} << rb.m_exception << {\cf22 ")\\n"};\par
5670                 \}\par
5671             \} {\cf19 else} \{\par
5672                 s << {\cf22 "did NOT throw at all!\\n"};\par
5673             \}\par
5674         \} {\cf19 else} {\cf19 if}(rb.m_at &\par
5675                     assertType::is_throws_as) \{ \par
5676             s << Color::Cyan << assertString(rb.m_at) << {\cf22 "( "} << rb.m_expr << {\cf22 ", "}\par
5677                 << rb.m_exception_type << {\cf22 " ) "} << Color::None\par
5678                 << (rb.m_threw ? (rb.m_threw_as ? {\cf22 "threw as expected!"} :\par
5679                                                 {\cf22 "threw a DIFFERENT exception: "}) :\par
5680                                 {\cf22 "did NOT throw at all!"})\par
5681                 << Color::Cyan << rb.m_exception << {\cf22 "\\n"};\par
5682         \} {\cf19 else} {\cf19 if}(rb.m_at &\par
5683                     assertType::is_throws_with) \{ \par
5684             s << Color::Cyan << assertString(rb.m_at) << {\cf22 "( "} << rb.m_expr << {\cf22 ", \\""}\par
5685                 << rb.m_exception_string.c_str()\par
5686                 << {\cf22 "\\" ) "} << Color::None\par
5687                 << (rb.m_threw ? (!rb.m_failed ? {\cf22 "threw as expected!"} :\par
5688                                                 {\cf22 "threw a DIFFERENT exception: "}) :\par
5689                                 {\cf22 "did NOT throw at all!"})\par
5690                 << Color::Cyan << rb.m_exception << {\cf22 "\\n"};\par
5691         \} {\cf19 else} {\cf19 if}(rb.m_at & assertType::is_nothrow) \{ \par
5692             s << (rb.m_threw ? {\cf22 "THREW exception: "} : {\cf22 "didn't throw!"}) << Color::Cyan\par
5693                 << rb.m_exception << {\cf22 "\\n"};\par
5694         \} {\cf19 else} \{\par
5695             s << (rb.m_threw ? {\cf22 "THREW exception: "} :\par
5696                                 (!rb.m_failed ? {\cf22 "is correct!\\n"} : {\cf22 "is NOT correct!\\n"}));\par
5697             {\cf19 if}(rb.m_threw)\par
5698                 s << rb.m_exception << {\cf22 "\\n"};\par
5699             {\cf19 else}\par
5700                 s << {\cf22 "  values: "} << assertString(rb.m_at) << {\cf22 "( "} << rb.m_decomp << {\cf22 " )\\n"};\par
5701         \}\par
5702     \}\par
5703 \par
5704     {\cf20 // TODO:}\par
5705     {\cf20 // - log_message()}\par
5706     {\cf20 // - respond to queries}\par
5707     {\cf20 // - honor remaining options}\par
5708     {\cf20 // - more attributes in tags}\par
5709     {\cf17 struct }JUnitReporter : {\cf17 public} IReporter\par
5710     \{\par
5711         XmlWriter xml;\par
5712         DOCTEST_DECLARE_MUTEX(mutex)\par
5713         Timer timer;\par
5714         std::vector<String> deepestSubcaseStackNames;\par
5715 \par
5716         {\cf17 struct }JUnitTestCaseData\par
5717         \{\par
5718             {\cf17 static} std::string getCurrentTimestamp() \{\par
5719                 {\cf20 // Beware, this is not reentrant because of backward compatibility issues}\par
5720                 {\cf20 // Also, UTC only, again because of backward compatibility (%z is C++11)}\par
5721                 time_t rawtime;\par
5722                 std::time(&rawtime);\par
5723                 {\cf17 auto} {\cf17 const} timeStampSize = {\cf17 sizeof}({\cf22 "2017-01-16T17:06:45Z"});\par
5724 \par
5725                 std::tm timeInfo;\par
5726 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
5727                 gmtime_s(&timeInfo, &rawtime);\par
5728 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
5729                 gmtime_r(&rawtime, &timeInfo);\par
5730 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
5731 \par
5732                 {\cf18 char} timeStamp[timeStampSize];\par
5733                 {\cf17 const} {\cf18 char}* {\cf17 const} fmt = {\cf22 "%Y-%m-%dT%H:%M:%SZ"};\par
5734 \par
5735                 std::strftime(timeStamp, timeStampSize, fmt, &timeInfo);\par
5736                 {\cf19 return} std::string(timeStamp);\par
5737             \}\par
5738 \par
5739             {\cf17 struct }JUnitTestMessage\par
5740             \{\par
5741                 JUnitTestMessage({\cf17 const} std::string& _message, {\cf17 const} std::string& _type, {\cf17 const} std::string& _details)\par
5742                     : message(_message), type(_type), details(_details) \{\}\par
5743 \par
5744                 JUnitTestMessage({\cf17 const} std::string& _message, {\cf17 const} std::string& _details)\par
5745                     : message(_message), type(), details(_details) \{\}\par
5746 \par
5747                 std::string message, type, details;\par
5748             \};\par
5749 \par
5750             {\cf17 struct }JUnitTestCase\par
5751             \{\par
5752                 JUnitTestCase({\cf17 const} std::string& _classname, {\cf17 const} std::string& _name)\par
5753                     : classname(_classname), name(_name), time(0), failures() \{\}\par
5754 \par
5755                 std::string classname, name;\par
5756                 {\cf18 double} time;\par
5757                 std::vector<JUnitTestMessage> failures, errors;\par
5758             \};\par
5759 \par
5760             {\cf18 void} add({\cf17 const} std::string& classname, {\cf17 const} std::string& name) \{\par
5761                 testcases.emplace_back(classname, name);\par
5762             \}\par
5763 \par
5764             {\cf18 void} appendSubcaseNamesToLastTestcase(std::vector<String> nameStack) \{\par
5765                 {\cf19 for}({\cf17 auto}& curr: nameStack)\par
5766                     if(curr.size())\par
5767                         testcases.back().name += std::string({\cf22 "/"}) + curr.c_str();\par
5768             \}\par
5769 \par
5770             {\cf18 void} addTime({\cf18 double} time) \{\par
5771                 {\cf19 if}(time < 1e-4)\par
5772                     time = 0;\par
5773                 testcases.back().time = time;\par
5774                 totalSeconds += time;\par
5775             \}\par
5776 \par
5777             {\cf18 void} addFailure({\cf17 const} std::string& message, {\cf17 const} std::string& type, {\cf17 const} std::string& details) \{\par
5778                 testcases.back().failures.emplace_back(message, type, details);\par
5779                 ++totalFailures;\par
5780             \}\par
5781 \par
5782             {\cf18 void} addError({\cf17 const} std::string& message, {\cf17 const} std::string& details) \{\par
5783                 testcases.back().errors.emplace_back(message, details);\par
5784                 ++totalErrors;\par
5785             \}\par
5786 \par
5787             std::vector<JUnitTestCase> testcases;\par
5788             {\cf18 double} totalSeconds = 0;\par
5789             {\cf18 int} totalErrors = 0, totalFailures = 0;\par
5790         \};\par
5791 \par
5792         JUnitTestCaseData testCaseData;\par
5793 \par
5794         {\cf20 // caching pointers/references to objects of these types - safe to do}\par
5795         {\cf17 const} ContextOptions& opt;\par
5796         {\cf17 const} TestCaseData*   tc = {\cf17 nullptr};\par
5797 \par
5798         JUnitReporter({\cf17 const} ContextOptions& co)\par
5799                 : xml(*co.cout)\par
5800                 , opt(co) \{\}\par
5801 \par
5802         {\cf18 unsigned} line({\cf18 unsigned} l){\cf17  const }\{ {\cf19 return} opt.no_line_numbers ? 0 : l; \}\par
5803 \par
5804         {\cf20 // =========================================================================================}\par
5805         {\cf20 // WHAT FOLLOWS ARE OVERRIDES OF THE VIRTUAL METHODS OF THE REPORTER INTERFACE}\par
5806         {\cf20 // =========================================================================================}\par
5807 \par
5808         {\cf18 void} report_query({\cf17 const} QueryData&){\cf17  override }\{\par
5809             xml.writeDeclaration();\par
5810         \}\par
5811 \par
5812         {\cf18 void} test_run_start(){\cf17  override }\{\par
5813             xml.writeDeclaration();\par
5814         \}\par
5815 \par
5816         {\cf18 void} test_run_end({\cf17 const} TestRunStats& p){\cf17  override }\{\par
5817             {\cf20 // remove .exe extension - mainly to have the same output on UNIX and Windows}\par
5818             std::string binary_name = skipPathFromFilename(opt.binary_name.c_str());\par
5819 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
5820             {\cf19 if}(binary_name.rfind({\cf22 ".exe"}) != std::string::npos)\par
5821                 binary_name = binary_name.substr(0, binary_name.length() - 4);\par
5822 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
5823             xml.startElement({\cf22 "testsuites"});\par
5824             xml.startElement({\cf22 "testsuite"}).writeAttribute({\cf22 "name"}, binary_name)\par
5825                     .writeAttribute({\cf22 "errors"}, testCaseData.totalErrors)\par
5826                     .writeAttribute({\cf22 "failures"}, testCaseData.totalFailures)\par
5827                     .writeAttribute({\cf22 "tests"}, p.numAsserts);\par
5828             {\cf19 if}(opt.no_time_in_output == {\cf17 false}) \{\par
5829                 xml.writeAttribute({\cf22 "time"}, testCaseData.totalSeconds);\par
5830                 xml.writeAttribute({\cf22 "timestamp"}, JUnitTestCaseData::getCurrentTimestamp());\par
5831             \}\par
5832             {\cf19 if}(opt.no_version == {\cf17 false})\par
5833                 xml.writeAttribute({\cf22 "doctest_version"}, DOCTEST_VERSION_STR);\par
5834 \par
5835             {\cf19 for}({\cf17 const} {\cf17 auto}& testCase : testCaseData.testcases) \{\par
5836                 xml.startElement({\cf22 "testcase"})\par
5837                     .writeAttribute({\cf22 "classname"}, testCase.classname)\par
5838                     .writeAttribute({\cf22 "name"}, testCase.name);\par
5839                 {\cf19 if}(opt.no_time_in_output == {\cf17 false})\par
5840                     xml.writeAttribute({\cf22 "time"}, testCase.time);\par
5841                 {\cf20 // This is not ideal, but it should be enough to mimic gtest's junit output.}\par
5842                 xml.writeAttribute({\cf22 "status"}, {\cf22 "run"});\par
5843 \par
5844                 {\cf19 for}({\cf17 const} {\cf17 auto}& failure : testCase.failures) \{\par
5845                     xml.scopedElement({\cf22 "failure"})\par
5846                         .writeAttribute({\cf22 "message"}, failure.message)\par
5847                         .writeAttribute({\cf22 "type"}, failure.type)\par
5848                         .writeText(failure.details, {\cf17 false});\par
5849                 \}\par
5850 \par
5851                 {\cf19 for}({\cf17 const} {\cf17 auto}& error : testCase.errors) \{\par
5852                     xml.scopedElement({\cf22 "error"})\par
5853                         .writeAttribute({\cf22 "message"}, error.message)\par
5854                         .writeText(error.details);\par
5855                 \}\par
5856 \par
5857                 xml.endElement();\par
5858             \}\par
5859             xml.endElement();\par
5860             xml.endElement();\par
5861         \}\par
5862 \par
5863         {\cf18 void} test_case_start({\cf17 const} TestCaseData& in){\cf17  override }\{\par
5864             testCaseData.add(skipPathFromFilename(in.m_file.c_str()), in.m_name);\par
5865             timer.start();\par
5866         \}\par
5867 \par
5868         {\cf18 void} test_case_reenter({\cf17 const} TestCaseData& in){\cf17  override }\{\par
5869             testCaseData.addTime(timer.getElapsedSeconds());\par
5870             testCaseData.appendSubcaseNamesToLastTestcase(deepestSubcaseStackNames);\par
5871             deepestSubcaseStackNames.clear();\par
5872 \par
5873             timer.start();\par
5874             testCaseData.add(skipPathFromFilename(in.m_file.c_str()), in.m_name);\par
5875         \}\par
5876 \par
5877         {\cf18 void} test_case_end({\cf17 const} CurrentTestCaseStats&){\cf17  override }\{\par
5878             testCaseData.addTime(timer.getElapsedSeconds());\par
5879             testCaseData.appendSubcaseNamesToLastTestcase(deepestSubcaseStackNames);\par
5880             deepestSubcaseStackNames.clear();\par
5881         \}\par
5882 \par
5883         {\cf18 void} test_case_exception({\cf17 const} TestCaseException& e){\cf17  override }\{\par
5884             DOCTEST_LOCK_MUTEX(mutex)\par
5885             testCaseData.addError({\cf22 "exception"}, e.error_string.c_str());\par
5886         \}\par
5887 \par
5888         {\cf18 void} subcase_start({\cf17 const} SubcaseSignature& in){\cf17  override }\{\par
5889             deepestSubcaseStackNames.push_back(in.m_name);\par
5890         \}\par
5891 \par
5892         {\cf18 void} subcase_end(){\cf17  override }\{\}\par
5893 \par
5894         {\cf18 void} log_assert({\cf17 const} AssertData& rb){\cf17  override }\{\par
5895             {\cf19 if}(!rb.m_failed) {\cf20 // report only failures & ignore the `success` option}\par
5896                 {\cf19 return};\par
5897 \par
5898             DOCTEST_LOCK_MUTEX(mutex)\par
5899 \par
5900             std::ostringstream os;\par
5901             os << skipPathFromFilename(rb.m_file) << (opt.gnu_file_line ? {\cf22 ":"} : {\cf22 "("})\par
5902               << line(rb.m_line) << (opt.gnu_file_line ? {\cf22 ":"} : {\cf22 "):"}) << std::endl;\par
5903 \par
5904             fulltext_log_assert_to_stream(os, rb);\par
5905             log_contexts(os);\par
5906             testCaseData.addFailure(rb.m_decomp.c_str(), assertString(rb.m_at), os.str());\par
5907         \}\par
5908 \par
5909         {\cf18 void} log_message({\cf17 const} MessageData& mb){\cf17  override }\{\par
5910             {\cf19 if}(mb.m_severity & assertType::is_warn) {\cf20 // report only failures}\par
5911                 {\cf19 return};\par
5912 \par
5913             DOCTEST_LOCK_MUTEX(mutex)\par
5914 \par
5915             std::ostringstream os;\par
5916             os << skipPathFromFilename(mb.m_file) << (opt.gnu_file_line ? {\cf22 ":"} : {\cf22 "("})\par
5917               << line(mb.m_line) << (opt.gnu_file_line ? {\cf22 ":"} : {\cf22 "):"}) << std::endl;\par
5918 \par
5919             os << mb.m_string.c_str() << {\cf22 "\\n"};\par
5920             log_contexts(os);\par
5921 \par
5922             testCaseData.addFailure(mb.m_string.c_str(),\par
5923                 mb.m_severity & assertType::is_check ? {\cf22 "FAIL_CHECK"} : {\cf22 "FAIL"}, os.str());\par
5924         \}\par
5925 \par
5926         {\cf18 void} test_case_skipped({\cf17 const} TestCaseData&){\cf17  override }\{\}\par
5927 \par
5928         {\cf18 void} log_contexts(std::ostringstream& s) \{\par
5929             {\cf18 int} num_contexts = get_num_active_contexts();\par
5930             {\cf19 if}(num_contexts) \{\par
5931                 {\cf17 auto} contexts = get_active_contexts();\par
5932 \par
5933                 s << {\cf22 "  logged: "};\par
5934                 {\cf19 for}({\cf18 int} i = 0; i < num_contexts; ++i) \{\par
5935                     s << (i == 0 ? {\cf22 ""} : {\cf22 "          "});\par
5936                     contexts[i]->stringify(&s);\par
5937                     s << std::endl;\par
5938                 \}\par
5939             \}\par
5940         \}\par
5941     \};\par
5942 \par
5943     DOCTEST_REGISTER_REPORTER({\cf22 "junit"}, 0, JUnitReporter);\par
5944 \par
5945     {\cf17 struct }Whitespace\par
5946     \{\par
5947         {\cf18 int} nrSpaces;\par
5948         {\cf17 explicit} Whitespace({\cf18 int} nr)\par
5949                 : nrSpaces(nr) \{\}\par
5950     \};\par
5951 \par
5952     std::ostream& operator<<(std::ostream& out, {\cf17 const} Whitespace& ws) \{\par
5953         {\cf19 if}(ws.nrSpaces != 0)\par
5954             out << std::setw(ws.nrSpaces) << {\cf23 ' '};\par
5955         {\cf19 return} out;\par
5956     \}\par
5957 \par
5958     {\cf17 struct }ConsoleReporter : {\cf17 public} IReporter\par
5959     \{\par
5960         std::ostream&                 s;\par
5961         {\cf18 bool}                          hasLoggedCurrentTestStart;\par
5962         std::vector<SubcaseSignature> subcasesStack;\par
5963         {\cf18 size_t}                        currentSubcaseLevel;\par
5964         DOCTEST_DECLARE_MUTEX(mutex)\par
5965 \par
5966         {\cf20 // caching pointers/references to objects of these types - safe to do}\par
5967         {\cf17 const} ContextOptions& opt;\par
5968         {\cf17 const} TestCaseData*   tc;\par
5969 \par
5970         ConsoleReporter({\cf17 const} ContextOptions& co)\par
5971                 : s(*co.cout)\par
5972                 , opt(co) \{\}\par
5973 \par
5974         ConsoleReporter({\cf17 const} ContextOptions& co, std::ostream& ostr)\par
5975                 : s(ostr)\par
5976                 , opt(co) \{\}\par
5977 \par
5978         {\cf20 // =========================================================================================}\par
5979         {\cf20 // WHAT FOLLOWS ARE HELPERS USED BY THE OVERRIDES OF THE VIRTUAL METHODS OF THE INTERFACE}\par
5980         {\cf20 // =========================================================================================}\par
5981 \par
5982         {\cf18 void} separator_to_stream() \{\par
5983             s << Color::Yellow\par
5984               << {\cf22 "==============================================================================="}\par
5985                  {\cf22 "\\n"};\par
5986         \}\par
5987 \par
5988         {\cf17 const} {\cf18 char}* getSuccessOrFailString({\cf18 bool} success, assertType::Enum at,\par
5989                                            {\cf17 const} {\cf18 char}* success_str) \{\par
5990             {\cf19 if}(success)\par
5991                 {\cf19 return} success_str;\par
5992             {\cf19 return} failureString(at);\par
5993         \}\par
5994 \par
5995         Color::Enum getSuccessOrFailColor({\cf18 bool} success, assertType::Enum at) \{\par
5996             {\cf19 return} success ? Color::BrightGreen :\par
5997                              (at & assertType::is_warn) ? Color::Yellow : Color::Red;\par
5998         \}\par
5999 \par
6000         {\cf18 void} successOrFailColoredStringToStream({\cf18 bool} success, assertType::Enum at,\par
6001                                                 {\cf17 const} {\cf18 char}* success_str = {\cf22 "SUCCESS"}) \{\par
6002             s << getSuccessOrFailColor(success, at)\par
6003               << getSuccessOrFailString(success, at, success_str) << {\cf22 ": "};\par
6004         \}\par
6005 \par
6006         {\cf18 void} log_contexts() \{\par
6007             {\cf18 int} num_contexts = get_num_active_contexts();\par
6008             {\cf19 if}(num_contexts) \{\par
6009                 {\cf17 auto} contexts = get_active_contexts();\par
6010 \par
6011                 s << Color::None << {\cf22 "  logged: "};\par
6012                 {\cf19 for}({\cf18 int} i = 0; i < num_contexts; ++i) \{\par
6013                     s << (i == 0 ? {\cf22 ""} : {\cf22 "          "});\par
6014                     contexts[i]->stringify(&s);\par
6015                     s << {\cf22 "\\n"};\par
6016                 \}\par
6017             \}\par
6018 \par
6019             s << {\cf22 "\\n"};\par
6020         \}\par
6021 \par
6022         {\cf20 // this was requested to be made virtual so users could override it}\par
6023         {\cf17 virtual} {\cf18 void} file_line_to_stream({\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
6024                                         {\cf17 const} {\cf18 char}* tail = {\cf22 ""}) \{\par
6025             s << Color::LightGrey << skipPathFromFilename(file) << (opt.gnu_file_line ? {\cf22 ":"} : {\cf22 "("})\par
6026             << (opt.no_line_numbers ? 0 : line) {\cf20 // 0 or the real num depending on the option}\par
6027             << (opt.gnu_file_line ? {\cf22 ":"} : {\cf22 "):"}) << tail;\par
6028         \}\par
6029 \par
6030         {\cf18 void} logTestStart() \{\par
6031             {\cf19 if}(hasLoggedCurrentTestStart)\par
6032                 {\cf19 return};\par
6033 \par
6034             separator_to_stream();\par
6035             file_line_to_stream(tc->m_file.c_str(), tc->m_line, {\cf22 "\\n"});\par
6036             {\cf19 if}(tc->m_description)\par
6037                 s << Color::Yellow << {\cf22 "DESCRIPTION: "} << Color::None << tc->m_description << {\cf22 "\\n"};\par
6038             {\cf19 if}(tc->m_test_suite && tc->m_test_suite[0] != {\cf23 '\\0'})\par
6039                 s << Color::Yellow << {\cf22 "TEST SUITE: "} << Color::None << tc->m_test_suite << {\cf22 "\\n"};\par
6040             {\cf19 if}(strncmp(tc->m_name, {\cf22 "  Scenario:"}, 11) != 0)\par
6041                 s << Color::Yellow << {\cf22 "TEST CASE:  "};\par
6042             s << Color::None << tc->m_name << {\cf22 "\\n"};\par
6043 \par
6044             {\cf19 for}({\cf18 size_t} i = 0; i < currentSubcaseLevel; ++i) \{\par
6045                 {\cf19 if}(subcasesStack[i].m_name[0] != {\cf23 '\\0'})\par
6046                     s << {\cf22 "  "} << subcasesStack[i].m_name << {\cf22 "\\n"};\par
6047             \}\par
6048 \par
6049             {\cf19 if}(currentSubcaseLevel != subcasesStack.size()) \{\par
6050                 s << Color::Yellow << {\cf22 "\\nDEEPEST SUBCASE STACK REACHED (DIFFERENT FROM THE CURRENT ONE):\\n"} << Color::None;\par
6051                 {\cf19 for}({\cf18 size_t} i = 0; i < subcasesStack.size(); ++i) \{\par
6052                     {\cf19 if}(subcasesStack[i].m_name[0] != {\cf23 '\\0'})\par
6053                         s << {\cf22 "  "} << subcasesStack[i].m_name << {\cf22 "\\n"};\par
6054                 \}\par
6055             \}\par
6056 \par
6057             s << {\cf22 "\\n"};\par
6058 \par
6059             hasLoggedCurrentTestStart = {\cf17 true};\par
6060         \}\par
6061 \par
6062         {\cf18 void} printVersion() \{\par
6063             {\cf19 if}(opt.no_version == {\cf17 false})\par
6064                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "doctest version is \\""}\par
6065                   << DOCTEST_VERSION_STR << {\cf22 "\\"\\n"};\par
6066         \}\par
6067 \par
6068         {\cf18 void} printIntro() \{\par
6069             {\cf19 if}(opt.no_intro == {\cf17 false}) \{\par
6070                 printVersion();\par
6071                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
6072                   << {\cf22 "run with \\"--"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "help\\" for options\\n"};\par
6073             \}\par
6074         \}\par
6075 \par
6076         {\cf18 void} printHelp() \{\par
6077             {\cf18 int} sizePrefixDisplay = {\cf17 static_cast<}{\cf18 int}{\cf17 >}(strlen(DOCTEST_OPTIONS_PREFIX_DISPLAY));\par
6078             printVersion();\par
6079             {\cf20 // clang-format off}\par
6080             s << Color::Cyan << {\cf22 "[doctest]\\n"} << Color::None;\par
6081             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6082             s << {\cf22 "boolean values: \\"1/on/yes/true\\" or \\"0/off/no/false\\"\\n"};\par
6083             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6084             s << {\cf22 "filter  values: \\"str1,str2,str3\\" (comma separated strings)\\n"};\par
6085             s << Color::Cyan << {\cf22 "[doctest]\\n"} << Color::None;\par
6086             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6087             s << {\cf22 "filters use wildcards for matching strings\\n"};\par
6088             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6089             s << {\cf22 "something passes a filter if any of the strings in a filter matches\\n"};\par
6090 {\cf21 #ifndef DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS}\par
6091             s << Color::Cyan << {\cf22 "[doctest]\\n"} << Color::None;\par
6092             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6093             s << {\cf22 "ALL FLAGS, OPTIONS AND FILTERS ALSO AVAILABLE WITH A \\""} DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "\\" PREFIX!!!\\n"};\par
6094 {\cf21 #endif}\par
6095             s << Color::Cyan << {\cf22 "[doctest]\\n"} << Color::None;\par
6096             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6097             s << {\cf22 "Query flags - the program quits after them. Available:\\n\\n"};\par
6098             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "?,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "help, -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "h                      "}\par
6099               << Whitespace(sizePrefixDisplay*0) <<  {\cf22 "prints this message\\n"};\par
6100             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "v,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "version                       "}\par
6101               << Whitespace(sizePrefixDisplay*1) << {\cf22 "prints the version\\n"};\par
6102             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "c,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "count                         "}\par
6103               << Whitespace(sizePrefixDisplay*1) << {\cf22 "prints the number of matching tests\\n"};\par
6104             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ltc, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "list-test-cases               "}\par
6105               << Whitespace(sizePrefixDisplay*1) << {\cf22 "lists all matching tests by name\\n"};\par
6106             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "lts, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "list-test-suites              "}\par
6107               << Whitespace(sizePrefixDisplay*1) << {\cf22 "lists all matching test suites\\n"};\par
6108             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "lr,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "list-reporters                "}\par
6109               << Whitespace(sizePrefixDisplay*1) << {\cf22 "lists all registered reporters\\n\\n"};\par
6110             {\cf20 // ================================================================================== << 79}\par
6111             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6112             s << {\cf22 "The available <int>/<string> options/filters are:\\n\\n"};\par
6113             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "tc,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "test-case=<filters>           "}\par
6114               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters     tests by their name\\n"};\par
6115             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "tce, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "test-case-exclude=<filters>   "}\par
6116               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters OUT tests by their name\\n"};\par
6117             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "sf,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "source-file=<filters>         "}\par
6118               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters     tests by their file\\n"};\par
6119             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "sfe, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "source-file-exclude=<filters> "}\par
6120               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters OUT tests by their file\\n"};\par
6121             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ts,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "test-suite=<filters>          "}\par
6122               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters     tests by their test suite\\n"};\par
6123             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "tse, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "test-suite-exclude=<filters>  "}\par
6124               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters OUT tests by their test suite\\n"};\par
6125             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "sc,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "subcase=<filters>             "}\par
6126               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters     subcases by their name\\n"};\par
6127             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "sce, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "subcase-exclude=<filters>     "}\par
6128               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters OUT subcases by their name\\n"};\par
6129             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "r,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "reporters=<filters>           "}\par
6130               << Whitespace(sizePrefixDisplay*1) << {\cf22 "reporters to use (console is default)\\n"};\par
6131             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "o,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "out=<string>                  "}\par
6132               << Whitespace(sizePrefixDisplay*1) << {\cf22 "output filename\\n"};\par
6133             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ob,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "order-by=<string>             "}\par
6134               << Whitespace(sizePrefixDisplay*1) << {\cf22 "how the tests should be ordered\\n"};\par
6135             s << Whitespace(sizePrefixDisplay*3) << {\cf22 "                                       <string> - [file/suite/name/rand/none]\\n"};\par
6136             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "rs,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "rand-seed=<int>               "}\par
6137               << Whitespace(sizePrefixDisplay*1) << {\cf22 "seed for random ordering\\n"};\par
6138             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "f,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "first=<int>                   "}\par
6139               << Whitespace(sizePrefixDisplay*1) << {\cf22 "the first test passing the filters to\\n"};\par
6140             s << Whitespace(sizePrefixDisplay*3) << {\cf22 "                                       execute - for range-based execution\\n"};\par
6141             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "l,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "last=<int>                    "}\par
6142               << Whitespace(sizePrefixDisplay*1) << {\cf22 "the last test passing the filters to\\n"};\par
6143             s << Whitespace(sizePrefixDisplay*3) << {\cf22 "                                       execute - for range-based execution\\n"};\par
6144             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "aa,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "abort-after=<int>             "}\par
6145               << Whitespace(sizePrefixDisplay*1) << {\cf22 "stop after <int> failed assertions\\n"};\par
6146             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "scfl,--"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "subcase-filter-levels=<int>   "}\par
6147               << Whitespace(sizePrefixDisplay*1) << {\cf22 "apply filters for the first <int> levels\\n"};\par
6148             s << Color::Cyan << {\cf22 "\\n[doctest] "} << Color::None;\par
6149             s << {\cf22 "Bool options - can be used like flags and true is assumed. Available:\\n\\n"};\par
6150             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "s,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "success=<bool>                "}\par
6151               << Whitespace(sizePrefixDisplay*1) << {\cf22 "include successful assertions in output\\n"};\par
6152             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "cs,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "case-sensitive=<bool>         "}\par
6153               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters being treated as case sensitive\\n"};\par
6154             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "e,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "exit=<bool>                   "}\par
6155               << Whitespace(sizePrefixDisplay*1) << {\cf22 "exits after the tests finish\\n"};\par
6156             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "d,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "duration=<bool>               "}\par
6157               << Whitespace(sizePrefixDisplay*1) << {\cf22 "prints the time duration of each test\\n"};\par
6158             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "m,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "minimal=<bool>                "}\par
6159               << Whitespace(sizePrefixDisplay*1) << {\cf22 "minimal console output (only failures)\\n"};\par
6160             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "q,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "quiet=<bool>                  "}\par
6161               << Whitespace(sizePrefixDisplay*1) << {\cf22 "no console output\\n"};\par
6162             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nt,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-throw=<bool>               "}\par
6163               << Whitespace(sizePrefixDisplay*1) << {\cf22 "skips exceptions-related assert checks\\n"};\par
6164             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ne,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-exitcode=<bool>            "}\par
6165               << Whitespace(sizePrefixDisplay*1) << {\cf22 "returns (or exits) always with success\\n"};\par
6166             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nr,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-run=<bool>                 "}\par
6167               << Whitespace(sizePrefixDisplay*1) << {\cf22 "skips all runtime doctest operations\\n"};\par
6168             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ni,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-intro=<bool>               "}\par
6169               << Whitespace(sizePrefixDisplay*1) << {\cf22 "omit the framework intro in the output\\n"};\par
6170             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nv,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-version=<bool>             "}\par
6171               << Whitespace(sizePrefixDisplay*1) << {\cf22 "omit the framework version in the output\\n"};\par
6172             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nc,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-colors=<bool>              "}\par
6173               << Whitespace(sizePrefixDisplay*1) << {\cf22 "disables colors in output\\n"};\par
6174             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "fc,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "force-colors=<bool>           "}\par
6175               << Whitespace(sizePrefixDisplay*1) << {\cf22 "use colors even when not in a tty\\n"};\par
6176             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nb,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-breaks=<bool>              "}\par
6177               << Whitespace(sizePrefixDisplay*1) << {\cf22 "disables breakpoints in debuggers\\n"};\par
6178             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ns,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-skip=<bool>                "}\par
6179               << Whitespace(sizePrefixDisplay*1) << {\cf22 "don't skip test cases marked as skip\\n"};\par
6180             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "gfl, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "gnu-file-line=<bool>          "}\par
6181               << Whitespace(sizePrefixDisplay*1) << {\cf22 ":n: vs (n): for line numbers in output\\n"};\par
6182             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "npf, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-path-filenames=<bool>      "}\par
6183               << Whitespace(sizePrefixDisplay*1) << {\cf22 "only filenames and no paths in output\\n"};\par
6184             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nln, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-line-numbers=<bool>        "}\par
6185               << Whitespace(sizePrefixDisplay*1) << {\cf22 "0 instead of real line numbers in output\\n"};\par
6186             {\cf20 // ================================================================================== << 79}\par
6187             {\cf20 // clang-format on}\par
6188 \par
6189             s << Color::Cyan << {\cf22 "\\n[doctest] "} << Color::None;\par
6190             s << {\cf22 "for more information visit the project documentation\\n\\n"};\par
6191         \}\par
6192 \par
6193         {\cf18 void} printRegisteredReporters() \{\par
6194             printVersion();\par
6195             {\cf17 auto} printReporters = [{\cf17 this}] ({\cf17 const} reporterMap& reporters, {\cf17 const} {\cf18 char}* type) \{\par
6196                 {\cf19 if}(reporters.size()) \{\par
6197                     s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "listing all registered "} << type << {\cf22 "\\n"};\par
6198                     {\cf19 for}({\cf17 auto}& curr : reporters)\par
6199                         s << {\cf22 "priority: "} << std::setw(5) << curr.first.first\par
6200                           << {\cf22 " name: "} << curr.first.second << {\cf22 "\\n"};\par
6201                 \}\par
6202             \};\par
6203             printReporters(getListeners(), {\cf22 "listeners"});\par
6204             printReporters(getReporters(), {\cf22 "reporters"});\par
6205         \}\par
6206 \par
6207         {\cf20 // =========================================================================================}\par
6208         {\cf20 // WHAT FOLLOWS ARE OVERRIDES OF THE VIRTUAL METHODS OF THE REPORTER INTERFACE}\par
6209         {\cf20 // =========================================================================================}\par
6210 \par
6211         {\cf18 void} report_query({\cf17 const} QueryData& in){\cf17  override }\{\par
6212             {\cf19 if}(opt.version) \{\par
6213                 printVersion();\par
6214             \} {\cf19 else} {\cf19 if}(opt.help) \{\par
6215                 printHelp();\par
6216             \} {\cf19 else} {\cf19 if}(opt.list_reporters) \{\par
6217                 printRegisteredReporters();\par
6218             \} {\cf19 else} {\cf19 if}(opt.count || opt.list_test_cases) \{\par
6219                 {\cf19 if}(opt.list_test_cases) \{\par
6220                     s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
6221                       << {\cf22 "listing all test case names\\n"};\par
6222                     separator_to_stream();\par
6223                 \}\par
6224 \par
6225                 {\cf19 for}({\cf18 unsigned} i = 0; i < in.num_data; ++i)\par
6226                     s << Color::None << in.data[i]->m_name << {\cf22 "\\n"};\par
6227 \par
6228                 separator_to_stream();\par
6229 \par
6230                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
6231                   << {\cf22 "unskipped test cases passing the current filters: "}\par
6232                   << g_cs->numTestCasesPassingFilters << {\cf22 "\\n"};\par
6233 \par
6234             \} {\cf19 else} {\cf19 if}(opt.list_test_suites) \{\par
6235                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "listing all test suites\\n"};\par
6236                 separator_to_stream();\par
6237 \par
6238                 {\cf19 for}({\cf18 unsigned} i = 0; i < in.num_data; ++i)\par
6239                     s << Color::None << in.data[i]->m_test_suite << {\cf22 "\\n"};\par
6240 \par
6241                 separator_to_stream();\par
6242 \par
6243                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
6244                   << {\cf22 "unskipped test cases passing the current filters: "}\par
6245                   << g_cs->numTestCasesPassingFilters << {\cf22 "\\n"};\par
6246                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
6247                   << {\cf22 "test suites with unskipped test cases passing the current filters: "}\par
6248                   << g_cs->numTestSuitesPassingFilters << {\cf22 "\\n"};\par
6249             \}\par
6250         \}\par
6251 \par
6252         {\cf18 void} test_run_start(){\cf17  override }\{\par
6253             {\cf19 if}(!opt.minimal)\par
6254                 printIntro();\par
6255         \}\par
6256 \par
6257         {\cf18 void} test_run_end({\cf17 const} TestRunStats& p){\cf17  override }\{\par
6258             {\cf19 if}(opt.minimal && p.numTestCasesFailed == 0)\par
6259                 {\cf19 return};\par
6260 \par
6261             separator_to_stream();\par
6262             s << std::dec;\par
6263 \par
6264             {\cf17 auto} totwidth = int(std::ceil(log10({\cf17 static_cast<}{\cf18 double}{\cf17 >}(std::max(p.numTestCasesPassingFilters, {\cf17 static_cast<}{\cf18 unsigned}{\cf17 >}(p.numAsserts))) + 1)));\par
6265             {\cf17 auto} passwidth = int(std::ceil(log10({\cf17 static_cast<}{\cf18 double}{\cf17 >}(std::max(p.numTestCasesPassingFilters - p.numTestCasesFailed, {\cf17 static_cast<}{\cf18 unsigned}{\cf17 >}(p.numAsserts - p.numAssertsFailed))) + 1)));\par
6266             {\cf17 auto} failwidth = int(std::ceil(log10({\cf17 static_cast<}{\cf18 double}{\cf17 >}(std::max(p.numTestCasesFailed, {\cf17 static_cast<}{\cf18 unsigned}{\cf17 >}(p.numAssertsFailed))) + 1)));\par
6267             {\cf17 const} {\cf18 bool} anythingFailed = p.numTestCasesFailed > 0 || p.numAssertsFailed > 0;\par
6268             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "test cases: "} << std::setw(totwidth)\par
6269               << p.numTestCasesPassingFilters << {\cf22 " | "}\par
6270               << ((p.numTestCasesPassingFilters == 0 || anythingFailed) ? Color::None :\par
6271                                                                           Color::Green)\par
6272               << std::setw(passwidth) << p.numTestCasesPassingFilters - p.numTestCasesFailed << {\cf22 " passed"}\par
6273               << Color::None << {\cf22 " | "} << (p.numTestCasesFailed > 0 ? Color::Red : Color::None)\par
6274               << std::setw(failwidth) << p.numTestCasesFailed << {\cf22 " failed"} << Color::None << {\cf22 " |"};\par
6275             {\cf19 if}(opt.no_skipped_summary == {\cf17 false}) \{\par
6276                 {\cf17 const} {\cf18 int} numSkipped = p.numTestCases - p.numTestCasesPassingFilters;\par
6277                 s << {\cf22 " "} << (numSkipped == 0 ? Color::None : Color::Yellow) << numSkipped\par
6278                   << {\cf22 " skipped"} << Color::None;\par
6279             \}\par
6280             s << {\cf22 "\\n"};\par
6281             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "assertions: "} << std::setw(totwidth)\par
6282               << p.numAsserts << {\cf22 " | "}\par
6283               << ((p.numAsserts == 0 || anythingFailed) ? Color::None : Color::Green)\par
6284               << std::setw(passwidth) << (p.numAsserts - p.numAssertsFailed) << {\cf22 " passed"} << Color::None\par
6285               << {\cf22 " | "} << (p.numAssertsFailed > 0 ? Color::Red : Color::None) << std::setw(failwidth)\par
6286               << p.numAssertsFailed << {\cf22 " failed"} << Color::None << {\cf22 " |\\n"};\par
6287             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
6288               << {\cf22 "Status: "} << (p.numTestCasesFailed > 0 ? Color::Red : Color::Green)\par
6289               << ((p.numTestCasesFailed > 0) ? {\cf22 "FAILURE!"} : {\cf22 "SUCCESS!"}) << Color::None << std::endl;\par
6290         \}\par
6291 \par
6292         {\cf18 void} test_case_start({\cf17 const} TestCaseData& in){\cf17  override }\{\par
6293             hasLoggedCurrentTestStart = {\cf17 false};\par
6294             tc                        = &in;\par
6295             subcasesStack.clear();\par
6296             currentSubcaseLevel = 0;\par
6297         \}\par
6298 \par
6299         {\cf18 void} test_case_reenter({\cf17 const} TestCaseData&){\cf17  override }\{\par
6300             subcasesStack.clear();\par
6301         \}\par
6302 \par
6303         {\cf18 void} test_case_end({\cf17 const} CurrentTestCaseStats& st){\cf17  override }\{\par
6304             {\cf19 if}(tc->m_no_output)\par
6305                 {\cf19 return};\par
6306 \par
6307             {\cf20 // log the preamble of the test case only if there is something}\par
6308             {\cf20 // else to print - something other than that an assert has failed}\par
6309             {\cf19 if}(opt.duration ||\par
6310                (st.failure_flags && st.failure_flags != {\cf17 static_cast<}{\cf18 int}{\cf17 >}(TestCaseFailureReason::AssertFailure)))\par
6311                 logTestStart();\par
6312 \par
6313             {\cf19 if}(opt.duration)\par
6314                 s << Color::None << std::setprecision(6) << std::fixed << st.seconds\par
6315                   << {\cf22 " s: "} << tc->m_name << {\cf22 "\\n"};\par
6316 \par
6317             {\cf19 if}(st.failure_flags & TestCaseFailureReason::Timeout)\par
6318                 s << Color::Red << {\cf22 "Test case exceeded time limit of "} << std::setprecision(6)\par
6319                   << std::fixed << tc->m_timeout << {\cf22 "!\\n"};\par
6320 \par
6321             {\cf19 if}(st.failure_flags & TestCaseFailureReason::ShouldHaveFailedButDidnt) \{\par
6322                 s << Color::Red << {\cf22 "Should have failed but didn't! Marking it as failed!\\n"};\par
6323             \} {\cf19 else} {\cf19 if}(st.failure_flags & TestCaseFailureReason::ShouldHaveFailedAndDid) \{\par
6324                 s << Color::Yellow << {\cf22 "Failed as expected so marking it as not failed\\n"};\par
6325             \} {\cf19 else} {\cf19 if}(st.failure_flags & TestCaseFailureReason::CouldHaveFailedAndDid) \{\par
6326                 s << Color::Yellow << {\cf22 "Allowed to fail so marking it as not failed\\n"};\par
6327             \} {\cf19 else} {\cf19 if}(st.failure_flags & TestCaseFailureReason::DidntFailExactlyNumTimes) \{\par
6328                 s << Color::Red << {\cf22 "Didn't fail exactly "} << tc->m_expected_failures\par
6329                   << {\cf22 " times so marking it as failed!\\n"};\par
6330             \} {\cf19 else} {\cf19 if}(st.failure_flags & TestCaseFailureReason::FailedExactlyNumTimes) \{\par
6331                 s << Color::Yellow << {\cf22 "Failed exactly "} << tc->m_expected_failures\par
6332                   << {\cf22 " times as expected so marking it as not failed!\\n"};\par
6333             \}\par
6334             {\cf19 if}(st.failure_flags & TestCaseFailureReason::TooManyFailedAsserts) \{\par
6335                 s << Color::Red << {\cf22 "Aborting - too many failed asserts!\\n"};\par
6336             \}\par
6337             s << Color::None; {\cf20 // lgtm [cpp/useless-expression]}\par
6338         \}\par
6339 \par
6340         {\cf18 void} test_case_exception({\cf17 const} TestCaseException& e){\cf17  override }\{\par
6341             DOCTEST_LOCK_MUTEX(mutex)\par
6342             {\cf19 if}(tc->m_no_output)\par
6343                 {\cf19 return};\par
6344 \par
6345             logTestStart();\par
6346 \par
6347             file_line_to_stream(tc->m_file.c_str(), tc->m_line, {\cf22 " "});\par
6348             successOrFailColoredStringToStream({\cf17 false}, e.is_crash ? assertType::is_require :\par
6349                                                                    assertType::is_check);\par
6350             s << Color::Red << (e.is_crash ? {\cf22 "test case CRASHED: "} : {\cf22 "test case THREW exception: "})\par
6351               << Color::Cyan << e.error_string << {\cf22 "\\n"};\par
6352 \par
6353             {\cf18 int} num_stringified_contexts = get_num_stringified_contexts();\par
6354             {\cf19 if}(num_stringified_contexts) \{\par
6355                 {\cf17 auto} stringified_contexts = get_stringified_contexts();\par
6356                 s << Color::None << {\cf22 "  logged: "};\par
6357                 {\cf19 for}({\cf18 int} i = num_stringified_contexts; i > 0; --i) \{\par
6358                     s << (i == num_stringified_contexts ? {\cf22 ""} : {\cf22 "          "})\par
6359                       << stringified_contexts[i - 1] << {\cf22 "\\n"};\par
6360                 \}\par
6361             \}\par
6362             s << {\cf22 "\\n"} << Color::None;\par
6363         \}\par
6364 \par
6365         {\cf18 void} subcase_start({\cf17 const} SubcaseSignature& subc){\cf17  override }\{\par
6366             subcasesStack.push_back(subc);\par
6367             ++currentSubcaseLevel;\par
6368             hasLoggedCurrentTestStart = {\cf17 false};\par
6369         \}\par
6370 \par
6371         {\cf18 void} subcase_end(){\cf17  override }\{\par
6372             --currentSubcaseLevel;\par
6373             hasLoggedCurrentTestStart = {\cf17 false};\par
6374         \}\par
6375 \par
6376         {\cf18 void} log_assert({\cf17 const} AssertData& rb){\cf17  override }\{\par
6377             {\cf19 if}((!rb.m_failed && !opt.success) || tc->m_no_output)\par
6378                 {\cf19 return};\par
6379 \par
6380             DOCTEST_LOCK_MUTEX(mutex)\par
6381 \par
6382             logTestStart();\par
6383 \par
6384             file_line_to_stream(rb.m_file, rb.m_line, {\cf22 " "});\par
6385             successOrFailColoredStringToStream(!rb.m_failed, rb.m_at);\par
6386 \par
6387             fulltext_log_assert_to_stream(s, rb);\par
6388 \par
6389             log_contexts();\par
6390         \}\par
6391 \par
6392         {\cf18 void} log_message({\cf17 const} MessageData& mb){\cf17  override }\{\par
6393             {\cf19 if}(tc->m_no_output)\par
6394                 {\cf19 return};\par
6395 \par
6396             DOCTEST_LOCK_MUTEX(mutex)\par
6397 \par
6398             logTestStart();\par
6399 \par
6400             file_line_to_stream(mb.m_file, mb.m_line, {\cf22 " "});\par
6401             s << getSuccessOrFailColor({\cf17 false}, mb.m_severity)\par
6402               << getSuccessOrFailString(mb.m_severity & assertType::is_warn, mb.m_severity,\par
6403                                         {\cf22 "MESSAGE"}) << {\cf22 ": "};\par
6404             s << Color::None << mb.m_string << {\cf22 "\\n"};\par
6405             log_contexts();\par
6406         \}\par
6407 \par
6408         {\cf18 void} test_case_skipped({\cf17 const} TestCaseData&){\cf17  override }\{\}\par
6409     \};\par
6410 \par
6411     DOCTEST_REGISTER_REPORTER({\cf22 "console"}, 0, ConsoleReporter);\par
6412 \par
6413 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
6414     {\cf17 struct }DebugOutputWindowReporter : {\cf17 public} ConsoleReporter\par
6415     \{\par
6416         DOCTEST_THREAD_LOCAL {\cf17 static} std::ostringstream oss;\par
6417 \par
6418         DebugOutputWindowReporter({\cf17 const} ContextOptions& co)\par
6419                 : ConsoleReporter(co, oss) \{\}\par
6420 \par
6421 {\cf21 #define DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(func, type, arg)                                    \\}\par
6422 {\cf21     void func(type arg) override \{                                                                 \\}\par
6423 {\cf21         bool with_col = g_no_colors;                                                               \\}\par
6424 {\cf21         g_no_colors   = false;                                                                     \\}\par
6425 {\cf21         ConsoleReporter::func(arg);                                                                \\}\par
6426 {\cf21         if(oss.tellp() != std::streampos\{\}) \{                                                      \\}\par
6427 {\cf21             DOCTEST_OUTPUT_DEBUG_STRING(oss.str().c_str());                                        \\}\par
6428 {\cf21             oss.str("");                                                                           \\}\par
6429 {\cf21         \}                                                                                          \\}\par
6430 {\cf21         g_no_colors = with_col;                                                                    \\}\par
6431 {\cf21     \}}\par
6432 \par
6433         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_run_start, DOCTEST_EMPTY, DOCTEST_EMPTY)\par
6434         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_run_end, {\cf17 const} TestRunStats&, in)\par
6435         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_start, {\cf17 const} TestCaseData&, in)\par
6436         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_reenter, {\cf17 const} TestCaseData&, in)\par
6437         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_end, {\cf17 const} CurrentTestCaseStats&, in)\par
6438         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_exception, {\cf17 const} TestCaseException&, in)\par
6439         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(subcase_start, {\cf17 const} SubcaseSignature&, in)\par
6440         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(subcase_end, DOCTEST_EMPTY, DOCTEST_EMPTY)\par
6441         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(log_assert, {\cf17 const} AssertData&, in)\par
6442         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(log_message, {\cf17 const} MessageData&, in)\par
6443         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_skipped, {\cf17 const} TestCaseData&, in)\par
6444     \};\par
6445 \par
6446     DOCTEST_THREAD_LOCAL std::ostringstream DebugOutputWindowReporter::oss;\par
6447 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
6448 \par
6449     {\cf20 // the implementation of parseOption()}\par
6450     {\cf18 bool} parseOptionImpl({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern, String* value) \{\par
6451         {\cf20 // going from the end to the beginning and stopping on the first occurrence from the end}\par
6452         {\cf19 for}({\cf18 int} i = argc; i > 0; --i) \{\par
6453             {\cf17 auto} index = i - 1;\par
6454             {\cf17 auto} temp = std::strstr(argv[index], pattern);\par
6455             {\cf19 if}(temp && (value || strlen(temp) == strlen(pattern))) \{ \par
6456                 {\cf20 // eliminate matches in which the chars before the option are not '-'}\par
6457                 {\cf18 bool} noBadCharsFound = {\cf17 true};\par
6458                 {\cf17 auto} curr            = argv[index];\par
6459                 {\cf19 while}(curr != temp) \{\par
6460                     {\cf19 if}(*curr++ != {\cf23 '-'}) \{\par
6461                         noBadCharsFound = {\cf17 false};\par
6462                         {\cf19 break};\par
6463                     \}\par
6464                 \}\par
6465                 {\cf19 if}(noBadCharsFound && argv[index][0] == {\cf23 '-'}) \{\par
6466                     {\cf19 if}(value) \{\par
6467                         {\cf20 // parsing the value of an option}\par
6468                         temp += strlen(pattern);\par
6469                         {\cf17 const} {\cf18 unsigned} len = strlen(temp);\par
6470                         {\cf19 if}(len) \{\par
6471                             *value = temp;\par
6472                             {\cf19 return} {\cf17 true};\par
6473                         \}\par
6474                     \} {\cf19 else} \{\par
6475                         {\cf20 // just a flag - no value}\par
6476                         {\cf19 return} {\cf17 true};\par
6477                     \}\par
6478                 \}\par
6479             \}\par
6480         \}\par
6481         {\cf19 return} {\cf17 false};\par
6482     \}\par
6483 \par
6484     {\cf20 // parses an option and returns the string after the '=' character}\par
6485     {\cf18 bool} parseOption({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern, String* value = {\cf17 nullptr},\par
6486                      {\cf17 const} String& defaultVal = String()) \{\par
6487         {\cf19 if}(value)\par
6488             *value = defaultVal;\par
6489 {\cf21 #ifndef DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS}\par
6490         {\cf20 // offset (normally 3 for "dt-") to skip prefix}\par
6491         {\cf19 if}(parseOptionImpl(argc, argv, pattern + strlen(DOCTEST_CONFIG_OPTIONS_PREFIX), value))\par
6492             {\cf19 return} {\cf17 true};\par
6493 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS}\par
6494         {\cf19 return} parseOptionImpl(argc, argv, pattern, value);\par
6495     \}\par
6496 \par
6497     {\cf20 // locates a flag on the command line}\par
6498     {\cf18 bool} parseFlag({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern) \{\par
6499         {\cf19 return} parseOption(argc, argv, pattern);\par
6500     \}\par
6501 \par
6502     {\cf20 // parses a comma separated list of words after a pattern in one of the arguments in argv}\par
6503     {\cf18 bool} parseCommaSepArgs({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern,\par
6504                            std::vector<String>& res) \{\par
6505         String filtersString;\par
6506         {\cf19 if}(parseOption(argc, argv, pattern, &filtersString)) \{\par
6507             {\cf20 // tokenize with "," as a separator, unless escaped with backslash}\par
6508             std::ostringstream s;\par
6509             {\cf17 auto} flush = [&s, &res]() \{\par
6510                 {\cf17 auto} {\cf18 string} = s.str();\par
6511                 {\cf19 if}({\cf18 string}.size() > 0) \{\par
6512                     res.push_back({\cf18 string}.c_str());\par
6513                 \}\par
6514                 s.str({\cf22 ""});\par
6515             \};\par
6516 \par
6517             {\cf18 bool} seenBackslash = {\cf17 false};\par
6518             {\cf17 const} {\cf18 char}* current = filtersString.c_str();\par
6519             {\cf17 const} {\cf18 char}* end = current + strlen(current);\par
6520             {\cf19 while}(current != end) \{\par
6521                 {\cf18 char} character = *current++;\par
6522                 {\cf19 if}(seenBackslash) \{\par
6523                     seenBackslash = {\cf17 false};\par
6524                     {\cf19 if}(character == {\cf23 ','} || character == {\cf23 '\\\\'}) \{\par
6525                         s.put(character);\par
6526                         {\cf19 continue};\par
6527                     \}\par
6528                     s.put({\cf23 '\\\\'});\par
6529                 \}\par
6530                 {\cf19 if}(character == {\cf23 '\\\\'}) \{\par
6531                     seenBackslash = {\cf17 true};\par
6532                 \} {\cf19 else} {\cf19 if}(character == {\cf23 ','}) \{\par
6533                     flush();\par
6534                 \} {\cf19 else} \{\par
6535                     s.put(character);\par
6536                 \}\par
6537             \}\par
6538 \par
6539             {\cf19 if}(seenBackslash) \{\par
6540                 s.put({\cf23 '\\\\'});\par
6541             \}\par
6542             flush();\par
6543             {\cf19 return} {\cf17 true};\par
6544         \}\par
6545         {\cf19 return} {\cf17 false};\par
6546     \}\par
6547 \par
6548     {\cf17 enum} optionType\par
6549     \{\par
6550         option_bool,\par
6551         option_int\par
6552     \};\par
6553 \par
6554     {\cf20 // parses an int/bool option from the command line}\par
6555     {\cf18 bool} parseIntOption({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern, optionType type,\par
6556                         {\cf18 int}& res) \{\par
6557         String parsedValue;\par
6558         {\cf19 if}(!parseOption(argc, argv, pattern, &parsedValue))\par
6559             {\cf19 return} {\cf17 false};\par
6560 \par
6561         {\cf19 if}(type) \{\par
6562             {\cf20 // integer}\par
6563             {\cf20 // TODO: change this to use std::stoi or something else! currently it uses undefined behavior - assumes '0' on failed parse...}\par
6564             {\cf18 int} theInt = std::atoi(parsedValue.c_str());\par
6565             {\cf19 if} (theInt != 0) \{\par
6566                 res = theInt; \par
6567                 {\cf19 return} {\cf17 true};\par
6568             \}\par
6569         \} {\cf19 else} \{\par
6570             {\cf20 // boolean}\par
6571             {\cf17 const} {\cf18 char} positive[][5] = \{ {\cf22 "1"}, {\cf22 "true"}, {\cf22 "on"}, {\cf22 "yes"} \};  {\cf20 // 5 - strlen("true") + 1}\par
6572             {\cf17 const} {\cf18 char} negative[][6] = \{ {\cf22 "0"}, {\cf22 "false"}, {\cf22 "off"}, {\cf22 "no"} \}; {\cf20 // 6 - strlen("false") + 1}\par
6573 \par
6574             {\cf20 // if the value matches any of the positive/negative possibilities}\par
6575             {\cf19 for} ({\cf18 unsigned} i = 0; i < 4; i++) \{\par
6576                 {\cf19 if} (parsedValue.compare(positive[i], {\cf17 true}) == 0) \{\par
6577                     res = 1; \par
6578                     {\cf19 return} {\cf17 true};\par
6579                 \}\par
6580                 {\cf19 if} (parsedValue.compare(negative[i], {\cf17 true}) == 0) \{\par
6581                     res = 0; \par
6582                     {\cf19 return} {\cf17 true};\par
6583                 \}\par
6584             \}\par
6585         \}\par
6586         {\cf19 return} {\cf17 false};\par
6587     \}\par
6588 \} {\cf20 // namespace}\par
6589 \par
6590 Context::Context({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv)\par
6591         : p(new detail::ContextState) \{\par
6592     parseArgs(argc, argv, {\cf17 true});\par
6593     {\cf19 if}(argc)\par
6594         p->binary_name = argv[0];\par
6595 \}\par
6596 \par
6597 Context::~Context() \{\par
6598     {\cf19 if}(g_cs == p)\par
6599         g_cs = {\cf17 nullptr};\par
6600     {\cf17 delete} p;\par
6601 \}\par
6602 \par
6603 {\cf18 void} Context::applyCommandLine({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv) \{\par
6604     parseArgs(argc, argv);\par
6605     {\cf19 if}(argc)\par
6606         p->binary_name = argv[0];\par
6607 \}\par
6608 \par
6609 {\cf20 // parses args}\par
6610 {\cf18 void} Context::parseArgs({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf18 bool} withDefaults) \{\par
6611     {\cf17 using namespace }detail;\par
6612 \par
6613     {\cf20 // clang-format off}\par
6614     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "source-file="},        p->filters[0]);\par
6615     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "sf="},                 p->filters[0]);\par
6616     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "source-file-exclude="},p->filters[1]);\par
6617     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "sfe="},                p->filters[1]);\par
6618     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "test-suite="},         p->filters[2]);\par
6619     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "ts="},                 p->filters[2]);\par
6620     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "test-suite-exclude="}, p->filters[3]);\par
6621     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "tse="},                p->filters[3]);\par
6622     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "test-case="},          p->filters[4]);\par
6623     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "tc="},                 p->filters[4]);\par
6624     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "test-case-exclude="},  p->filters[5]);\par
6625     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "tce="},                p->filters[5]);\par
6626     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "subcase="},            p->filters[6]);\par
6627     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "sc="},                 p->filters[6]);\par
6628     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "subcase-exclude="},    p->filters[7]);\par
6629     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "sce="},                p->filters[7]);\par
6630     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "reporters="},          p->filters[8]);\par
6631     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "r="},                  p->filters[8]);\par
6632     {\cf20 // clang-format on}\par
6633 \par
6634     {\cf18 int}    intRes = 0;\par
6635     String strRes;\par
6636 \par
6637 {\cf21 #define DOCTEST_PARSE_AS_BOOL_OR_FLAG(name, sname, var, default)                                   \\}\par
6638 {\cf21     if(parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name "=", option_bool, intRes) ||  \\}\par
6639 {\cf21        parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname "=", option_bool, intRes))   \\}\par
6640 {\cf21         p->var = static_cast<bool>(intRes);                                                        \\}\par
6641 {\cf21     else if(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name) ||                           \\}\par
6642 {\cf21             parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname))                            \\}\par
6643 {\cf21         p->var = true;                                                                             \\}\par
6644 {\cf21     else if(withDefaults)                                                                          \\}\par
6645 {\cf21     p->var = default}\par
6646 \par
6647 {\cf21 #define DOCTEST_PARSE_INT_OPTION(name, sname, var, default)                                        \\}\par
6648 {\cf21     if(parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name "=", option_int, intRes) ||   \\}\par
6649 {\cf21        parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname "=", option_int, intRes))    \\}\par
6650 {\cf21         p->var = intRes;                                                                           \\}\par
6651 {\cf21     else if(withDefaults)                                                                          \\}\par
6652 {\cf21     p->var = default}\par
6653 \par
6654 {\cf21 #define DOCTEST_PARSE_STR_OPTION(name, sname, var, default)                                        \\}\par
6655 {\cf21     if(parseOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name "=", &strRes, default) ||        \\}\par
6656 {\cf21        parseOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname "=", &strRes, default) ||       \\}\par
6657 {\cf21        withDefaults)                                                                               \\}\par
6658 {\cf21     p->var = strRes}\par
6659 \par
6660     {\cf20 // clang-format off}\par
6661     DOCTEST_PARSE_STR_OPTION({\cf22 "out"}, {\cf22 "o"}, out, {\cf22 ""});\par
6662     DOCTEST_PARSE_STR_OPTION({\cf22 "order-by"}, {\cf22 "ob"}, order_by, {\cf22 "file"});\par
6663     DOCTEST_PARSE_INT_OPTION({\cf22 "rand-seed"}, {\cf22 "rs"}, rand_seed, 0);\par
6664 \par
6665     DOCTEST_PARSE_INT_OPTION({\cf22 "first"}, {\cf22 "f"}, first, 0);\par
6666     DOCTEST_PARSE_INT_OPTION({\cf22 "last"}, {\cf22 "l"}, last, UINT_MAX);\par
6667 \par
6668     DOCTEST_PARSE_INT_OPTION({\cf22 "abort-after"}, {\cf22 "aa"}, abort_after, 0);\par
6669     DOCTEST_PARSE_INT_OPTION({\cf22 "subcase-filter-levels"}, {\cf22 "scfl"}, subcase_filter_levels, INT_MAX);\par
6670 \par
6671     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "success"}, {\cf22 "s"}, success, {\cf17 false});\par
6672     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "case-sensitive"}, {\cf22 "cs"}, case_sensitive, {\cf17 false});\par
6673     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "exit"}, {\cf22 "e"}, exit, {\cf17 false});\par
6674     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "duration"}, {\cf22 "d"}, duration, {\cf17 false});\par
6675     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "minimal"}, {\cf22 "m"}, minimal, {\cf17 false});\par
6676     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "quiet"}, {\cf22 "q"}, quiet, {\cf17 false});\par
6677     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-throw"}, {\cf22 "nt"}, no_throw, {\cf17 false});\par
6678     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-exitcode"}, {\cf22 "ne"}, no_exitcode, {\cf17 false});\par
6679     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-run"}, {\cf22 "nr"}, no_run, {\cf17 false});\par
6680     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-intro"}, {\cf22 "ni"}, no_intro, {\cf17 false});\par
6681     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-version"}, {\cf22 "nv"}, no_version, {\cf17 false});\par
6682     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-colors"}, {\cf22 "nc"}, no_colors, {\cf17 false});\par
6683     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "force-colors"}, {\cf22 "fc"}, force_colors, {\cf17 false});\par
6684     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-breaks"}, {\cf22 "nb"}, no_breaks, {\cf17 false});\par
6685     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-skip"}, {\cf22 "ns"}, no_skip, {\cf17 false});\par
6686     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "gnu-file-line"}, {\cf22 "gfl"}, gnu_file_line, !{\cf18 bool}(DOCTEST_MSVC));\par
6687     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-path-filenames"}, {\cf22 "npf"}, no_path_in_filenames, {\cf17 false});\par
6688     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-line-numbers"}, {\cf22 "nln"}, no_line_numbers, {\cf17 false});\par
6689     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-debug-output"}, {\cf22 "ndo"}, no_debug_output, {\cf17 false});\par
6690     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-skipped-summary"}, {\cf22 "nss"}, no_skipped_summary, {\cf17 false});\par
6691     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-time-in-output"}, {\cf22 "ntio"}, no_time_in_output, {\cf17 false});\par
6692     {\cf20 // clang-format on}\par
6693 \par
6694     {\cf19 if}(withDefaults) \{\par
6695         p->help             = {\cf17 false};\par
6696         p->version          = {\cf17 false};\par
6697         p->count            = {\cf17 false};\par
6698         p->list_test_cases  = {\cf17 false};\par
6699         p->list_test_suites = {\cf17 false};\par
6700         p->list_reporters   = {\cf17 false};\par
6701     \}\par
6702     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "help"}) ||\par
6703        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "h"}) ||\par
6704        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "?"})) \{\par
6705         p->help = {\cf17 true};\par
6706         p->exit = {\cf17 true};\par
6707     \}\par
6708     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "version"}) ||\par
6709        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "v"})) \{\par
6710         p->version = {\cf17 true};\par
6711         p->exit    = {\cf17 true};\par
6712     \}\par
6713     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "count"}) ||\par
6714        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "c"})) \{\par
6715         p->count = {\cf17 true};\par
6716         p->exit  = {\cf17 true};\par
6717     \}\par
6718     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "list-test-cases"}) ||\par
6719        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "ltc"})) \{\par
6720         p->list_test_cases = {\cf17 true};\par
6721         p->exit            = {\cf17 true};\par
6722     \}\par
6723     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "list-test-suites"}) ||\par
6724        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "lts"})) \{\par
6725         p->list_test_suites = {\cf17 true};\par
6726         p->exit             = {\cf17 true};\par
6727     \}\par
6728     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "list-reporters"}) ||\par
6729        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "lr"})) \{\par
6730         p->list_reporters = {\cf17 true};\par
6731         p->exit           = {\cf17 true};\par
6732     \}\par
6733 \}\par
6734 \par
6735 {\cf20 // allows the user to add procedurally to the filters from the command line}\par
6736 {\cf18 void} Context::addFilter({\cf17 const} {\cf18 char}* filter, {\cf17 const} {\cf18 char}* value) \{ setOption(filter, value); \}\par
6737 \par
6738 {\cf20 // allows the user to clear all filters from the command line}\par
6739 {\cf18 void} Context::clearFilters() \{\par
6740     {\cf19 for}({\cf17 auto}& curr : p->filters)\par
6741         curr.clear();\par
6742 \}\par
6743 \par
6744 {\cf20 // allows the user to override procedurally the bool options from the command line}\par
6745 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}* option, {\cf18 bool} value) \{\par
6746     setOption(option, value ? {\cf22 "true"} : {\cf22 "false"});\par
6747 \}\par
6748 \par
6749 {\cf20 // allows the user to override procedurally the int options from the command line}\par
6750 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}* option, {\cf18 int} value) \{\par
6751     setOption(option, toString(value).c_str());\par
6752 \}\par
6753 \par
6754 {\cf20 // allows the user to override procedurally the string options from the command line}\par
6755 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}* option, {\cf17 const} {\cf18 char}* value) \{\par
6756     {\cf17 auto} argv   = String({\cf22 "-"}) + option + {\cf22 "="} + value;\par
6757     {\cf17 auto} lvalue = argv.c_str();\par
6758     parseArgs(1, &lvalue);\par
6759 \}\par
6760 \par
6761 {\cf20 // users should query this in their main() and exit the program if true}\par
6762 {\cf18 bool} Context::shouldExit() \{ {\cf19 return} p->exit; \}\par
6763 \par
6764 {\cf18 void} Context::setAsDefaultForAssertsOutOfTestCases() \{ g_cs = p; \}\par
6765 \par
6766 {\cf18 void} Context::setAssertHandler(detail::assert_handler ah) \{ p->ah = ah; \}\par
6767 \par
6768 {\cf18 void} Context::setCout(std::ostream* out) \{ p->cout = out; \}\par
6769 \par
6770 {\cf17 static} {\cf17 class }DiscardOStream : {\cf17 public} std::ostream\par
6771 \{\par
6772 {\cf17 private}:\par
6773     class : {\cf17 public} std::streambuf\par
6774     \{\par
6775     {\cf17 private}:\par
6776         {\cf20 // allowing some buffering decreases the amount of calls to overflow}\par
6777         {\cf18 char} buf[1024];\par
6778 \par
6779     {\cf17 protected}:\par
6780         std::streamsize xsputn({\cf17 const} char_type*, std::streamsize count){\cf17  override }\{ {\cf19 return} count; \}\par
6781 \par
6782         int_type overflow(int_type ch){\cf17  override }\{\par
6783             setp(std::begin(buf), std::end(buf));\par
6784             {\cf19 return} traits_type::not_eof(ch);\par
6785         \}\par
6786     \} discardBuf;\par
6787 \par
6788 {\cf17 public}:\par
6789     DiscardOStream()\par
6790             : std::ostream(&discardBuf) \{\}\par
6791 \} discardOut;\par
6792 \par
6793 {\cf20 // the main function that does all the filtering and test running}\par
6794 {\cf18 int} Context::run() \{\par
6795     {\cf17 using namespace }detail;\par
6796 \par
6797     {\cf20 // save the old context state in case such was setup - for using asserts out of a testing context}\par
6798     {\cf17 auto} old_cs = g_cs;\par
6799     {\cf20 // this is the current contest}\par
6800     g_cs               = p;\par
6801     is_running_in_test = {\cf17 true};\par
6802 \par
6803     g_no_colors = p->no_colors;\par
6804     p->resetRunData();\par
6805 \par
6806     std::fstream fstr;\par
6807     {\cf19 if}(p->cout == {\cf17 nullptr}) \{\par
6808         {\cf19 if}(p->quiet) \{\par
6809             p->cout = &discardOut;\par
6810         \} {\cf19 else} {\cf19 if}(p->out.size()) \{\par
6811             {\cf20 // to a file if specified}\par
6812             fstr.open(p->out.c_str(), std::fstream::out);\par
6813             p->cout = &fstr;\par
6814         \} {\cf19 else} \{\par
6815 {\cf21 #ifndef DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM}\par
6816             {\cf20 // stdout by default}\par
6817             p->cout = &std::cout;\par
6818 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM}\par
6819             {\cf19 return} EXIT_FAILURE;\par
6820 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM}\par
6821         \}\par
6822     \}\par
6823 \par
6824     FatalConditionHandler::allocateAltStackMem();\par
6825 \par
6826     {\cf17 auto} cleanup_and_return = [&]() \{\par
6827         FatalConditionHandler::freeAltStackMem();\par
6828 \par
6829         {\cf19 if}(fstr.is_open())\par
6830             fstr.close();\par
6831 \par
6832         {\cf20 // restore context}\par
6833         g_cs               = old_cs;\par
6834         is_running_in_test = {\cf17 false};\par
6835 \par
6836         {\cf20 // we have to free the reporters which were allocated when the run started}\par
6837         {\cf19 for}({\cf17 auto}& curr : p->reporters_currently_used)\par
6838             delete curr;\par
6839         p->reporters_currently_used.clear();\par
6840 \par
6841         {\cf19 if}(p->numTestCasesFailed && !p->no_exitcode)\par
6842             {\cf19 return} EXIT_FAILURE;\par
6843         {\cf19 return} EXIT_SUCCESS;\par
6844     \};\par
6845 \par
6846     {\cf20 // setup default reporter if none is given through the command line}\par
6847     {\cf19 if}(p->filters[8].empty())\par
6848         p->filters[8].push_back({\cf22 "console"});\par
6849 \par
6850     {\cf20 // check to see if any of the registered reporters has been selected}\par
6851     {\cf19 for}({\cf17 auto}& curr : getReporters()) \{\par
6852         {\cf19 if}(matchesAny(curr.first.second.c_str(), p->filters[8], {\cf17 false}, p->case_sensitive))\par
6853             p->reporters_currently_used.push_back(curr.second(*g_cs));\par
6854     \}\par
6855 \par
6856     {\cf20 // TODO: check if there is nothing in reporters_currently_used}\par
6857 \par
6858     {\cf20 // prepend all listeners}\par
6859     {\cf19 for}({\cf17 auto}& curr : getListeners())\par
6860         p->reporters_currently_used.insert(p->reporters_currently_used.begin(), curr.second(*g_cs));\par
6861 \par
6862 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
6863     {\cf19 if}(isDebuggerActive() && p->no_debug_output == {\cf17 false})\par
6864         p->reporters_currently_used.push_back({\cf17 new} DebugOutputWindowReporter(*g_cs));\par
6865 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
6866 \par
6867     {\cf20 // handle version, help and no_run}\par
6868     {\cf19 if}(p->no_run || p->version || p->help || p->list_reporters) \{\par
6869         DOCTEST_ITERATE_THROUGH_REPORTERS(report_query, QueryData());\par
6870 \par
6871         {\cf19 return} cleanup_and_return();\par
6872     \}\par
6873 \par
6874     std::vector<const TestCase*> testArray;\par
6875     {\cf19 for}({\cf17 auto}& curr : getRegisteredTests())\par
6876         testArray.push_back(&curr);\par
6877     p->numTestCases = testArray.size();\par
6878 \par
6879     {\cf20 // sort the collected records}\par
6880     {\cf19 if}(!testArray.empty()) \{\par
6881         {\cf19 if}(p->order_by.compare({\cf22 "file"}, {\cf17 true}) == 0) \{\par
6882             std::sort(testArray.begin(), testArray.end(), fileOrderComparator);\par
6883         \} {\cf19 else} {\cf19 if}(p->order_by.compare({\cf22 "suite"}, {\cf17 true}) == 0) \{\par
6884             std::sort(testArray.begin(), testArray.end(), suiteOrderComparator);\par
6885         \} {\cf19 else} {\cf19 if}(p->order_by.compare({\cf22 "name"}, {\cf17 true}) == 0) \{\par
6886             std::sort(testArray.begin(), testArray.end(), nameOrderComparator);\par
6887         \} {\cf19 else} {\cf19 if}(p->order_by.compare({\cf22 "rand"}, {\cf17 true}) == 0) \{\par
6888             std::srand(p->rand_seed);\par
6889 \par
6890             {\cf20 // random_shuffle implementation}\par
6891             {\cf17 const} {\cf17 auto} first = &testArray[0];\par
6892             {\cf19 for}({\cf18 size_t} i = testArray.size() - 1; i > 0; --i) \{\par
6893                 {\cf18 int} idxToSwap = std::rand() % (i + 1);\par
6894 \par
6895                 {\cf17 const} {\cf17 auto} temp = first[i];\par
6896 \par
6897                 first[i]         = first[idxToSwap];\par
6898                 first[idxToSwap] = temp;\par
6899             \}\par
6900         \} {\cf19 else} {\cf19 if}(p->order_by.compare({\cf22 "none"}, {\cf17 true}) == 0) \{\par
6901             {\cf20 // means no sorting - beneficial for death tests which call into the executable}\par
6902             {\cf20 // with a specific test case in mind - we don't want to slow down the startup times}\par
6903         \}\par
6904     \}\par
6905 \par
6906     std::set<String> testSuitesPassingFilt;\par
6907 \par
6908     {\cf18 bool}                             query_mode = p->count || p->list_test_cases || p->list_test_suites;\par
6909     std::vector<const TestCaseData*> queryResults;\par
6910 \par
6911     {\cf19 if}(!query_mode)\par
6912         DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_start, DOCTEST_EMPTY);\par
6913 \par
6914     {\cf20 // invoke the registered functions if they match the filter criteria (or just count them)}\par
6915     {\cf19 for}({\cf17 auto}& curr : testArray) \{\par
6916         {\cf17 const} {\cf17 auto}& tc = *curr;\par
6917 \par
6918         {\cf18 bool} skip_me = {\cf17 false};\par
6919         {\cf19 if}(tc.m_skip && !p->no_skip)\par
6920             skip_me = {\cf17 true};\par
6921 \par
6922         {\cf19 if}(!matchesAny(tc.m_file.c_str(), p->filters[0], {\cf17 true}, p->case_sensitive))\par
6923             skip_me = {\cf17 true};\par
6924         {\cf19 if}(matchesAny(tc.m_file.c_str(), p->filters[1], {\cf17 false}, p->case_sensitive))\par
6925             skip_me = {\cf17 true};\par
6926         {\cf19 if}(!matchesAny(tc.m_test_suite, p->filters[2], {\cf17 true}, p->case_sensitive))\par
6927             skip_me = {\cf17 true};\par
6928         {\cf19 if}(matchesAny(tc.m_test_suite, p->filters[3], {\cf17 false}, p->case_sensitive))\par
6929             skip_me = {\cf17 true};\par
6930         {\cf19 if}(!matchesAny(tc.m_name, p->filters[4], {\cf17 true}, p->case_sensitive))\par
6931             skip_me = {\cf17 true};\par
6932         {\cf19 if}(matchesAny(tc.m_name, p->filters[5], {\cf17 false}, p->case_sensitive))\par
6933             skip_me = {\cf17 true};\par
6934 \par
6935         {\cf19 if}(!skip_me)\par
6936             p->numTestCasesPassingFilters++;\par
6937 \par
6938         {\cf20 // skip the test if it is not in the execution range}\par
6939         {\cf19 if}((p->last < p->numTestCasesPassingFilters && p->first <= p->last) ||\par
6940            (p->first > p->numTestCasesPassingFilters))\par
6941             skip_me = {\cf17 true};\par
6942 \par
6943         {\cf19 if}(skip_me) \{\par
6944             {\cf19 if}(!query_mode)\par
6945                 DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_skipped, tc);\par
6946             {\cf19 continue};\par
6947         \}\par
6948 \par
6949         {\cf20 // do not execute the test if we are to only count the number of filter passing tests}\par
6950         {\cf19 if}(p->count)\par
6951             {\cf19 continue};\par
6952 \par
6953         {\cf20 // print the name of the test and don't execute it}\par
6954         {\cf19 if}(p->list_test_cases) \{\par
6955             queryResults.push_back(&tc);\par
6956             {\cf19 continue};\par
6957         \}\par
6958 \par
6959         {\cf20 // print the name of the test suite if not done already and don't execute it}\par
6960         {\cf19 if}(p->list_test_suites) \{\par
6961             {\cf19 if}((testSuitesPassingFilt.count(tc.m_test_suite) == 0) && tc.m_test_suite[0] != {\cf23 '\\0'}) \{\par
6962                 queryResults.push_back(&tc);\par
6963                 testSuitesPassingFilt.insert(tc.m_test_suite);\par
6964                 p->numTestSuitesPassingFilters++;\par
6965             \}\par
6966             {\cf19 continue};\par
6967         \}\par
6968 \par
6969         {\cf20 // execute the test if it passes all the filtering}\par
6970         \{\par
6971             p->currentTest = &tc;\par
6972 \par
6973             p->failure_flags = TestCaseFailureReason::None;\par
6974             p->seconds       = 0;\par
6975 \par
6976             {\cf20 // reset atomic counters}\par
6977             p->numAssertsFailedCurrentTest_atomic = 0;\par
6978             p->numAssertsCurrentTest_atomic       = 0;\par
6979 \par
6980             p->fullyTraversedSubcases.clear();\par
6981 \par
6982             DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_start, tc);\par
6983 \par
6984             p->timer.start();\par
6985 \par
6986             {\cf18 bool} run_test = {\cf17 true};\par
6987 \par
6988             {\cf19 do} \{\par
6989                 {\cf20 // reset some of the fields for subcases (except for the set of fully passed ones)}\par
6990                 p->reachedLeaf = {\cf17 false};\par
6991                 {\cf20 // May not be empty if previous subcase exited via exception.}\par
6992                 p->subcaseStack.clear();\par
6993                 p->currentSubcaseDepth = 0;\par
6994 \par
6995                 p->shouldLogCurrentException = {\cf17 true};\par
6996 \par
6997                 {\cf20 // reset stuff for logging with INFO()}\par
6998                 p->stringifiedContexts.clear();\par
6999 \par
7000 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
7001                 {\cf19 try} \{\par
7002 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
7003 {\cf20 // MSVC 2015 diagnoses fatalConditionHandler as unused (because reset() is a static method)}\par
7004 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4101) {\cf20 // unreferenced local variable}\par
7005                     FatalConditionHandler fatalConditionHandler; {\cf20 // Handle signals}\par
7006                     {\cf20 // execute the test}\par
7007                     tc.m_test();\par
7008                     fatalConditionHandler.reset();\par
7009 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
7010 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
7011                 \} {\cf19 catch}({\cf17 const} TestFailureException&) \{\par
7012                     p->failure_flags |= TestCaseFailureReason::AssertFailure;\par
7013                 \} {\cf19 catch}(...) \{\par
7014                     DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_exception,\par
7015                                                       \{translateActiveException(), {\cf17 false}\});\par
7016                     p->failure_flags |= TestCaseFailureReason::Exception;\par
7017                 \}\par
7018 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
7019 \par
7020                 {\cf20 // exit this loop if enough assertions have failed - even if there are more subcases}\par
7021                 {\cf19 if}(p->abort_after > 0 &&\par
7022                    p->numAssertsFailed + p->numAssertsFailedCurrentTest_atomic >= p->abort_after) \{\par
7023                     run_test = {\cf17 false};\par
7024                     p->failure_flags |= TestCaseFailureReason::TooManyFailedAsserts;\par
7025                 \}\par
7026 \par
7027                 {\cf19 if}(!p->nextSubcaseStack.empty() && run_test)\par
7028                     DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_reenter, tc);\par
7029                 {\cf19 if}(p->nextSubcaseStack.empty())\par
7030                     run_test = {\cf17 false};\par
7031             \} {\cf19 while}(run_test);\par
7032 \par
7033             p->finalizeTestCaseData();\par
7034 \par
7035             DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_end, *g_cs);\par
7036 \par
7037             p->currentTest = {\cf17 nullptr};\par
7038 \par
7039             {\cf20 // stop executing tests if enough assertions have failed}\par
7040             {\cf19 if}(p->abort_after > 0 && p->numAssertsFailed >= p->abort_after)\par
7041                 {\cf19 break};\par
7042         \}\par
7043     \}\par
7044 \par
7045     {\cf19 if}(!query_mode) \{\par
7046         DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_end, *g_cs);\par
7047     \} {\cf19 else} \{\par
7048         QueryData qdata;\par
7049         qdata.run_stats = g_cs;\par
7050         qdata.data      = queryResults.data();\par
7051         qdata.num_data  = unsigned(queryResults.size());\par
7052         DOCTEST_ITERATE_THROUGH_REPORTERS(report_query, qdata);\par
7053     \}\par
7054 \par
7055     {\cf19 return} cleanup_and_return();\par
7056 \}\par
7057 \par
7058 DOCTEST_DEFINE_INTERFACE(IReporter)\par
7059 \par
7060 {\cf18 int} IReporter::get_num_active_contexts() \{ {\cf19 return} detail::g_infoContexts.size(); \}\par
7061 {\cf17 const} IContextScope* {\cf17 const}* IReporter::get_active_contexts() \{\par
7062     {\cf19 return} get_num_active_contexts() ? &detail::g_infoContexts[0] : {\cf17 nullptr};\par
7063 \}\par
7064 \par
7065 {\cf18 int} IReporter::get_num_stringified_contexts() \{ {\cf19 return} detail::g_cs->stringifiedContexts.size(); \}\par
7066 {\cf17 const} String* IReporter::get_stringified_contexts() \{\par
7067     {\cf19 return} get_num_stringified_contexts() ? &detail::g_cs->stringifiedContexts[0] : {\cf17 nullptr};\par
7068 \}\par
7069 \par
7070 {\cf17 namespace }detail \{\par
7071     {\cf18 void} registerReporterImpl({\cf17 const} {\cf18 char}* name, {\cf18 int} priority, reporterCreatorFunc c, {\cf18 bool} isReporter) \{\par
7072         {\cf19 if}(isReporter)\par
7073             getReporters().insert(reporterMap::value_type(reporterMap::key_type(priority, name), c));\par
7074         {\cf19 else}\par
7075             getListeners().insert(reporterMap::value_type(reporterMap::key_type(priority, name), c));\par
7076     \}\par
7077 \} {\cf20 // namespace detail}\par
7078 \par
7079 \} {\cf20 // namespace doctest}\par
7080 \par
7081 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
7082 \par
7083 {\cf21 #ifdef DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
7084 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4007) {\cf20 // 'function' : must be 'attribute' - see issue #182}\par
7085 int main({\cf18 int} argc, {\cf18 char}** argv) \{ {\cf19 return} doctest::Context(argc, argv).run(); \}\par
7086 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
7087 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
7088 \par
7089 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
7090 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
7091 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
7092 \par
7093 DOCTEST_SUPPRESS_COMMON_WARNINGS_POP\par
7094 \par
7095 {\cf21 #endif }{\cf20 // DOCTEST_LIBRARY_IMPLEMENTATION}\par
7096 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENT}\par
7097 \par
7098 {\cf21 #ifdef DOCTEST_UNDEF_WIN32_LEAN_AND_MEAN}\par
7099 {\cf21 #undef WIN32_LEAN_AND_MEAN}\par
7100 {\cf21 #undef DOCTEST_UNDEF_WIN32_LEAN_AND_MEAN}\par
7101 {\cf21 #endif }{\cf20 // DOCTEST_UNDEF_WIN32_LEAN_AND_MEAN}\par
7102 \par
7103 {\cf21 #ifdef DOCTEST_UNDEF_NOMINMAX}\par
7104 {\cf21 #undef NOMINMAX}\par
7105 {\cf21 #undef DOCTEST_UNDEF_NOMINMAX}\par
7106 {\cf21 #endif }{\cf20 // DOCTEST_UNDEF_NOMINMAX}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Farmer.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v Farmer.cpp}
{\xe \v Farmer.cpp}
{\bkmkstart AAAAAAAAOU}
{\bkmkend AAAAAAAAOU}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include "Farmer.hpp"}\par
{\f2 #include "Item.hpp"}\par
{\f2 #include "Inventory.hpp"}\par
{\f2 #include "ItemsStorage.hpp"}\par
{\f2 #include "Player.hpp"}\par
{\f2 #include "TerminalPalette.hpp"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Farmer.cpp\par \pard\plain 
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <iostream>}\par
2 \par
3 {\cf21 #include "Farmer.hpp"}\par
4 {\cf21 #include "Item.hpp"}\par
5 {\cf21 #include "Inventory.hpp"}\par
6 {\cf21 #include "ItemsStorage.hpp"}\par
7 {\cf21 #include "Player.hpp"}\par
8 {\cf21 #include "TerminalPalette.hpp"}\par
9 \par
10 {\cf18 void} Farmer::getWheat({\cf18 int} quantidade, Player *p, ItemsStorage *storage)\par
11 \{\par
12     {\cf19 try}\par
13     \{\par
14         {\cf19 if} (p->getInventory()->hasItem(0, quantidade))\par
15         \{\par
16             {\cf19 for} ({\cf18 int} i = 0; i < quantidade; i++)\par
17             \{\par
18                 p->getInventory()->remove(0, 1);\par
19                 Item item = storage->findByName({\cf22 "Trigo"});\par
20                 p->getInventory()->insert(item.getId(), item);\par
21                 p->addXp(15.0);\par
22             \}\par
23         \}\par
24         {\cf19 else}\par
25         \{\par
26             {\cf19 throw} std::runtime_error({\cf22 "N\'E3o foi encontrada semente"});\par
27         \}\par
28     \}\par
29     {\cf19 catch} (std::runtime_error {\cf17 const} &e)\par
30     \{\par
31         std::cout << color::redi << {\cf22 "Nao foi possivel plantar o trigo... verifique se possui todos os itens necessarios"} << color::off << std::endl;\par
32         {\cf19 return};\par
33     \}\par
34     std::cout << color::cyan << {\cf22 "Trigos adicionados ao seu inventario!"} << color::off << std::endl;\par
35 \}\par
36 \par
37 {\cf18 void} Farmer::getCarrot({\cf18 int} quantidade, Player *p, ItemsStorage *storage)\par
38 \{\par
39     {\cf19 try}\par
40     \{\par
41         {\cf19 if} (p->getInventory()->hasItem(0, quantidade))\par
42         \{\par
43             {\cf19 for} ({\cf18 int} i = 0; i < quantidade; i++)\par
44             \{\par
45                 Item cenoura = storage->findByName({\cf22 "Cenoura"});\par
46                 p->getInventory()->insert(cenoura.getId(), cenoura);\par
47                 p->getInventory()->remove(0, 1);\par
48                 p->addXp(15.0);\par
49             \}\par
50         \}\par
51         {\cf19 else}\par
52         \{\par
53             {\cf19 throw} std::runtime_error({\cf22 "N\'E3o foi encontrada semente"});\par
54         \}\par
55     \}\par
56     {\cf19 catch} (std::runtime_error {\cf17 const} &e)\par
57     \{\par
58         std::cout << color::redi << {\cf22 "Nao foi possivel plantar a cenoura... verifique se possui todos os itens necessarios"} << color::off << std::endl;\par
59         {\cf19 return};\par
60     \}\par
61     std::cout << color::cyan << {\cf22 "Cenouras adicionadas ao seu inventario!"} << color::off << std::endl;\par
62 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Farmer.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v Farmer.hpp}
{\xe \v Farmer.hpp}
{\bkmkstart AAAAAAAAOV}
{\bkmkend AAAAAAAAOV}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe {\b Farmer}. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Item.hpp"}\par
{\f2 #include "Inventory.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Farmer}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um agricultor no jogo. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe {\b Farmer}. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Farmer.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #pragma once}\par
2 {\cf21 #include "Item.hpp"}\par
3 {\cf21 #include "Inventory.hpp"}\par
4 \par
14 {\cf17 class }Farmer\par
15 \{\par
16 {\cf17 public}:\par
23     {\cf18 void} getWheat({\cf18 int} quantidade, Player *player, ItemsStorage *storage);\par
24 \par
31     {\cf18 void} getCarrot({\cf18 int} quantidade, Player *player, ItemsStorage *storage);\par
32 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Fisherman.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v Fisherman.cpp}
{\xe \v Fisherman.cpp}
{\bkmkstart AAAAAAAAOW}
{\bkmkend AAAAAAAAOW}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include <ctime>}\par
{\f2 #include <cstdlib>}\par
{\f2 #include <algorithm>}\par
{\f2 #include <vector>}\par
{\f2 #include "Player.hpp"}\par
{\f2 #include "ItemsStorage.hpp"}\par
{\f2 #include "Fisherman.hpp"}\par
{\f2 #include "Item.hpp"}\par
{\f2 #include "Inventory.hpp"}\par
{\f2 #include "TerminalPalette.hpp"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Fisherman.cpp\par \pard\plain 
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <iostream>}\par
2 {\cf21 #include <ctime>}\par
3 {\cf21 #include <cstdlib>}\par
4 {\cf21 #include <algorithm>}\par
5 {\cf21 #include <vector>}\par
6 \par
7 {\cf21 #include "Player.hpp"}\par
8 {\cf21 #include "ItemsStorage.hpp"}\par
9 {\cf21 #include "Fisherman.hpp"}\par
10 {\cf21 #include "Item.hpp"}\par
11 {\cf21 #include "Inventory.hpp"}\par
12 {\cf21 #include "TerminalPalette.hpp"}\par
13 \par
14 {\cf18 void} Fisherman::fish(Player *p, ItemsStorage *storage)\par
15 \{\par
16     Item peixe = storage->findRandom(1);\par
17     p->getInventory()->insert(peixe.getId(), peixe);\par
18     p->addXp(peixe.getUnitaryPrice() * 2.0);\par
19     std::cout << color::cyan << {\cf22 "Voce pescou um "} << peixe.getName() << {\cf22 "!"} << color::off << std::endl;\par
20 \}\par
21 \par
22 {\cf18 void} Fisherman::cleanFish(Player *p)\par
23 \{\par
24     Inventory *playerInventory = p->getInventory();\par
25     {\cf18 bool} limpou = {\cf17 false};\par
26     {\cf19 for} ({\cf17 auto} &entry : playerInventory->list())\par
27     \{\par
28         Item &item = entry.second.first;\par
29 \par
30         {\cf19 if} ((item.getId() >= 5 && item.getId() <= 11) && !item.getStatus())\par
31         \{\par
32             {\cf18 double} cleanedPrice = item.getUnitaryPrice() * 1.1;\par
33             playerInventory->updateItemPrice(item.getId(), cleanedPrice);\par
34             playerInventory->updateItemStatus(item.getId());\par
35             limpou = {\cf17 true};\par
36         \}\par
37     \}\par
38     {\cf19 if} (limpou)\par
39     \{\par
40         p->addXp(15.0);\par
41         std::cout << color::cyan << {\cf22 "Agora seus peixes valem mais!"} << color::off << std::endl;\par
42     \}\par
43     {\cf19 else}\par
44     \{\par
45         std::cout << color::red << {\cf22 "Ops, parece que todos os seus peixes ja estao limpos..."} << color::off << std::endl;\par
46     \}\par
47 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Fisherman.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v Fisherman.hpp}
{\xe \v Fisherman.hpp}
{\bkmkstart AAAAAAAAOX}
{\bkmkend AAAAAAAAOX}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe {\b Fisherman}. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Item.hpp"}\par
{\f2 #include "Inventory.hpp"}\par
{\f2 #include "ItemsStorage.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Fisherman}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um pescador no jogo. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe {\b Fisherman}. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Fisherman.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #pragma once}\par
2 {\cf21 #include "Item.hpp"}\par
3 {\cf21 #include "Inventory.hpp"}\par
4 {\cf21 #include "ItemsStorage.hpp"}\par
5 \par
15 {\cf17 class }Fisherman\par
16 \{\par
17 {\cf17 public}:\par
23     {\cf18 void} fish(Player *player, ItemsStorage *storage);\par
24 \par
29     {\cf18 void} cleanFish(Player *player);\par
30 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Inventory.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v Inventory.cpp}
{\xe \v Inventory.cpp}
{\bkmkstart AAAAAAAAOY}
{\bkmkend AAAAAAAAOY}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Inventory.hpp"}\par
{\f2 #include "Item.hpp"}\par
{\f2 #include "TerminalPalette.hpp"}\par
{\f2 #include <iostream>}\par
{\f2 #include <set>}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Inventory.cpp\par \pard\plain 
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include "Inventory.hpp"}\par
2 {\cf21 #include "Item.hpp"}\par
3 {\cf21 #include "TerminalPalette.hpp"}\par
4 {\cf21 #include <iostream>}\par
5 {\cf21 #include <set>}\par
6 \par
7 Inventory::Inventory({\cf18 unsigned} capacity)\par
8 \{\par
9     _inventorySize = capacity;\par
10 \}\par
11 \par
12 {\cf18 bool} Inventory::hasItem({\cf18 int} {\cf18 id}, {\cf18 unsigned} quantidade)\par
13 \{\par
14     {\cf17 auto} find = _inventory.find({\cf18 id});\par
15     {\cf19 return} (find != _inventory.end() && find->second.second >= quantidade);\par
16 \}\par
17 \par
18 {\cf18 bool} Inventory::insert({\cf18 int} {\cf18 id}, Item item)\par
19 \{\par
20     {\cf20 // std::cout <<color::grayf << "Item atual sendo inserido : " << color::off << std::endl;}\par
21 \par
22     {\cf17 auto} find = _inventory.find({\cf18 id});\par
23     {\cf19 if} (_inventory.find({\cf18 id}) != _inventory.end())\par
24         find->second.second += 1;\par
25     {\cf19 else}\par
26     \{\par
27         _inventory.insert(\{id, std::make_pair(item, 1)\});\par
28         find = _inventory.find({\cf18 id});\par
29     \}\par
30 \par
31     {\cf20 // std::cout <<color::grayf << "Qtd do item atual:" << find->second.second << color::off << std::endl;}\par
32 \par
33     {\cf19 return} {\cf17 true};\par
34 \}\par
35 \par
36 {\cf18 bool} Inventory::remove({\cf18 int} {\cf18 id}, {\cf18 unsigned} quantidade)\par
37 \{\par
38     {\cf17 auto} find = _inventory.find({\cf18 id});\par
39     {\cf19 if} (find != _inventory.end())\par
40     \{\par
41         {\cf19 if} (find->second.second >= quantidade)\par
42         \{\par
43             find->second.second -= quantidade;\par
44         \}\par
45         {\cf19 else}\par
46         \{\par
47             {\cf19 return} {\cf17 false};\par
48         \}\par
49     \}\par
50     {\cf19 return} {\cf17 true};\par
51 \}\par
52 \par
53 {\cf18 void} Inventory::printInventory()\par
54 \{\par
55     std::cout << color::yellows << {\cf22 "--------------- LISTAGEM DO INVENTARIO ---------------"} << color::off << std::endl;\par
56     {\cf19 for} ({\cf17 auto} stack : _inventory)\par
57     \{\par
58         std::cout << {\cf22 "Item: "} << stack.second.first.getName() << {\cf22 " | Qtd:"} << stack.second.second << {\cf22 " | Preco total:"} << stack.second.first.getUnitaryPrice() * {\cf17 static_cast<}{\cf18 double}{\cf17 >}(stack.second.second) << std::endl;\par
59     \}\par
60     std::cout << std::endl;\par
61 \}\par
62 \par
63 std::map<int, std::pair<Item, unsigned>> Inventory::list()\par
64 \{\par
65     {\cf19 return} _inventory;\par
66 \}\par
67 \par
68 {\cf18 void} Inventory::updateItemPrice({\cf18 int} {\cf18 id}, {\cf18 double} novoPreco)\par
69 \{\par
70     {\cf17 auto} it = _inventory.find({\cf18 id});\par
71 \par
72     {\cf19 if} (it != _inventory.end())\par
73     \{\par
74         it->second.first.changePrice(novoPreco);\par
75     \}\par
76 \}\par
77 \par
78 {\cf18 void} Inventory::updateItemStatus({\cf18 int} {\cf18 id})\par
79 \{\par
80     {\cf17 auto} it = _inventory.find({\cf18 id});\par
81 \par
82     {\cf19 if} (it != _inventory.end())\par
83     \{\par
84         it->second.first.changeStatus();\par
85     \}\par
86 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Inventory.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v Inventory.hpp}
{\xe \v Inventory.hpp}
{\bkmkstart AAAAAAAAOZ}
{\bkmkend AAAAAAAAOZ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe {\b Inventory}. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <map>}\par
{\f2 #include "Item.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Inventory}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa o invent\'E1rio de um jogador. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe {\b Inventory}. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Inventory.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #pragma once}\par
2 {\cf21 #include <map>}\par
3 {\cf21 #include "Item.hpp"}\par
4 \par
14 {\cf17 class }Inventory\par
15 \{\par
16 {\cf17 public}:\par
21     Inventory({\cf18 unsigned} capacity);\par
22 \par
29     {\cf18 bool} hasItem({\cf18 int} {\cf18 id}, {\cf18 unsigned} quantidade);\par
30 \par
37     {\cf18 bool} insert({\cf18 int} {\cf18 id}, Item item);\par
38 \par
45     {\cf18 bool} remove({\cf18 int} {\cf18 id}, {\cf18 unsigned} quantidade);\par
46 \par
50     {\cf18 void} printInventory();\par
51 \par
56     std::map<int, std::pair<Item, unsigned>> list();\par
57 \par
63     {\cf18 void} updateItemPrice({\cf18 int} {\cf18 id}, {\cf18 double} novoPreco);\par
64 \par
69     {\cf18 void} updateItemStatus({\cf18 int} {\cf18 id});\par
70 \par
71 {\cf17 private}:\par
72     {\cf18 unsigned} _inventorySize; \par
73     std::map<int, std::pair<Item, unsigned>> _inventory; \par
74 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Item.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v Item.cpp}
{\xe \v Item.cpp}
{\bkmkstart AAAAAAAAPA}
{\bkmkend AAAAAAAAPA}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <string>}\par
{\f2 #include "Item.hpp"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Item.cpp\par \pard\plain 
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <string>}\par
2 \par
3 {\cf21 #include "Item.hpp"}\par
4 \par
5 Item::Item({\cf18 int} {\cf18 id}, std::string name, {\cf18 double} price, {\cf18 bool} status)\par
6 \{\par
7     _id = id;\par
8     _name = name;\par
9     _price = price;\par
10     _status = status;\par
11 \}\par
12 \par
13 std::string Item::getName()\par
14 \{\par
15     {\cf19 return} _name;\par
16 \}\par
17 \par
18 {\cf18 int} Item::getId()\par
19 \{\par
20     {\cf19 return} _id;\par
21 \}\par
22 \par
23 {\cf18 double} Item::getUnitaryPrice()\par
24 \{\par
25     {\cf19 return} _price;\par
26 \}\par
27 \par
28 {\cf18 bool} Item::getStatus()\par
29 \{\par
30     {\cf19 return} _status;\par
31 \}\par
32 \par
33 {\cf18 void} Item::changePrice({\cf18 double} novo)\par
34 \{\par
35     _price = novo;\par
36 \}\par
37 \par
38 {\cf18 void} Item::changeStatus()\par
39 \{\par
40     _status = !_status;\par
41 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Item.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v Item.hpp}
{\xe \v Item.hpp}
{\bkmkstart AAAAAAAAPB}
{\bkmkend AAAAAAAAPB}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe {\b Item}. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <map>}\par
{\f2 #include <string>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Item}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um item no sistema. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe {\b Item}. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Item.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #pragma once}\par
2 {\cf21 #include <map>}\par
3 {\cf21 #include <string>}\par
4 \par
14 {\cf17 class }Item \{\par
15 {\cf17 public}:\par
23     Item({\cf18 int} {\cf18 id}, std::string name, {\cf18 double} price, {\cf18 bool} status);\par
24 \par
29     std::string getName();\par
30 \par
35     {\cf18 double} getUnitaryPrice();\par
36 \par
41     {\cf18 int} getId();\par
42 \par
47     {\cf18 bool} getStatus();\par
48 \par
53     {\cf18 void} changePrice({\cf18 double} novo);\par
54 \par
58     {\cf18 void} changeStatus();\par
59 \par
60 {\cf17 private}:\par
61     {\cf18 int} _id; \par
62     std::string _name; \par
63     {\cf18 double} _price; \par
64     {\cf18 bool} _status; \par
65 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ItemsStorage.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v ItemsStorage.cpp}
{\xe \v ItemsStorage.cpp}
{\bkmkstart AAAAAAAAPC}
{\bkmkend AAAAAAAAPC}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <ctime>}\par
{\f2 #include <random>}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ItemsStorage.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v ItemsStorage.hpp}
{\xe \v ItemsStorage.hpp}
{\bkmkstart AAAAAAAAPD}
{\bkmkend AAAAAAAAPD}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe {\b ItemsStorage}, uma subclasse de {\b StorageManager}. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "StorageManager.hpp"}\par
{\f2 #include "ItemsStorage.hpp"}\par
{\f2 #include "Item.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ItemsStorage}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gerencia o armazenamento de itens. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe {\b ItemsStorage}, uma subclasse de {\b StorageManager}. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ItemsStorage.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #pragma once}\par
2 {\cf21 #include "StorageManager.hpp"}\par
3 {\cf21 #include "ItemsStorage.hpp"}\par
4 {\cf21 #include "Item.hpp"}\par
14 {\cf17 class }ItemsStorage : {\cf17 public} StorageManager<Item>\par
15 \{\par
16 {\cf17 public}:\par
21     ItemsStorage({\cf18 char} {\cf17 const} *file_path);\par
22 \par
26     ~ItemsStorage();\par
27 \par
32     {\cf18 void} write({\cf17 const} Item &item) {\cf17 override};\par
33 \par
38     {\cf18 void} read({\cf18 int} totalRegistros) {\cf17 override};\par
39 \par
46     Item findRandom({\cf17 const} {\cf18 int} tipo);\par
47 \par
48     Item findByName({\cf17 const} std::string name);\par
49 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Livestocker.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v Livestocker.cpp}
{\xe \v Livestocker.cpp}
{\bkmkstart AAAAAAAAPE}
{\bkmkend AAAAAAAAPE}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include "Player.hpp"}\par
{\f2 #include "Livestocker.hpp"}\par
{\f2 #include "Item.hpp"}\par
{\f2 #include "Inventory.hpp"}\par
{\f2 #include "ItemsStorage.hpp"}\par
{\f2 #include "TerminalPalette.hpp"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Livestocker.cpp\par \pard\plain 
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <iostream>}\par
2 \par
3 {\cf21 #include "Player.hpp"}\par
4 {\cf21 #include "Livestocker.hpp"}\par
5 {\cf21 #include "Item.hpp"}\par
6 {\cf21 #include "Inventory.hpp"}\par
7 {\cf21 #include "ItemsStorage.hpp"}\par
8 {\cf21 #include "TerminalPalette.hpp"}\par
9 \par
10 {\cf18 void} Livestocker::getBacon({\cf18 int} quantidade, Player *p, ItemsStorage *storage)\par
11 \{\par
12     {\cf19 try}\par
13     \{\par
14         {\cf19 if} (p->getInventory()->hasItem(3, quantidade))\par
15         \{\par
16             {\cf19 for} ({\cf18 int} i = 0; i < quantidade; i++)\par
17             \{\par
18                 Item bacon = storage->findByName({\cf22 "Bacon"});\par
19                 p->getInventory()->insert(bacon.getId(), bacon);\par
20                 p->getInventory()->remove(3, 1);\par
21             \}\par
22         \}\par
23         {\cf19 else}\par
24         \{\par
25             {\cf19 throw} std::runtime_error({\cf22 "N\'E3o foi encontrada cenoura"});\par
26         \}\par
27     \}\par
28     {\cf19 catch} (std::runtime_error {\cf17 const} &e)\par
29     \{\par
30         std::cout << color::redi << {\cf22 "Nao foi possivel produzir bacon... verifique se possui todos os itens necessarios"} << color::off << std::endl;\par
31         {\cf19 return};\par
32     \}\par
33     p->addXp(15.0);\par
34     std::cout << color::cyan << {\cf22 "Bacons adicionados ao seu inventario!"} << color::off << std::endl;\par
35 \}\par
36 \par
37 {\cf18 void} Livestocker::getEgg({\cf18 int} quantidade, Player *p, ItemsStorage *storage)\par
38 \{\par
39     {\cf19 try}\par
40     \{\par
41         {\cf19 if} (p->getInventory()->hasItem(3, quantidade))\par
42         \{\par
43             {\cf19 for} ({\cf18 int} i = 0; i < quantidade; i++)\par
44             \{\par
45                 Item ovo = storage->findByName({\cf22 "Ovo"});\par
46                 p->getInventory()->insert(ovo.getId(), ovo);\par
47                 p->getInventory()->remove(2, quantidade);\par
48             \}\par
49         \}\par
50         {\cf19 else}\par
51         \{\par
52             {\cf19 throw} std::runtime_error({\cf22 "N\'E3o foi encontrado trigo"});\par
53         \}\par
54     \}\par
55     {\cf19 catch} (std::runtime_error {\cf17 const} &e)\par
56     \{\par
57         std::cout << color::redi << {\cf22 "Nao foi possivel produzir ovo... verifique se possui todos os itens necessarios"} << color::off << std::endl;\par
58         {\cf19 return};\par
59     \}\par
60     p->addXp(15.0);\par
61     std::cout << color::cyan << {\cf22 "Ovos adicionados ao seu inventario!"} << color::off << std::endl;\par
62 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Livestocker.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v Livestocker.hpp}
{\xe \v Livestocker.hpp}
{\bkmkstart AAAAAAAAPF}
{\bkmkend AAAAAAAAPF}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe {\b Livestocker}. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Item.hpp"}\par
{\f2 #include "Inventory.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Livestocker}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um criador de animais no jogo. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe {\b Livestocker}. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Livestocker.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #pragma once}\par
2 {\cf21 #include "Item.hpp"}\par
3 {\cf21 #include "Inventory.hpp"}\par
4 \par
14 {\cf17 class }Livestocker\par
15 \{\par
16 {\cf17 public}:\par
23     {\cf18 void} getBacon({\cf18 int} quantidade, Player *player, ItemsStorage *storage);\par
24 \par
31     {\cf18 void} getEgg({\cf18 int} quantidade, Player *player, ItemsStorage *storage);\par
32 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
LojaDeItens.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v LojaDeItens.cpp}
{\xe \v LojaDeItens.cpp}
{\bkmkstart AAAAAAAAPG}
{\bkmkend AAAAAAAAPG}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "LojaDeItens.hpp"}\par
{\f2 #include <iostream>}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
LojaDeItens.cpp\par \pard\plain 
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include "LojaDeItens.hpp"}\par
2 {\cf21 #include <iostream>}\par
3 \par
4 LojaDeItens::LojaDeItens(Player* player, Inventory* inventory, std::vector<Item>* items) \par
5     : _player(player), _inventory(inventory), _items(items) \{\}\par
6 \par
7 {\cf18 void} LojaDeItens::exibirItens()\par
8 \{\par
9     std::cout << {\cf22 "Itens da Loja:\\n"};\par
10     {\cf19 for} ({\cf17 const} {\cf17 auto}& item : *_items) \{\par
11         std::cout << item._id << {\cf22 " - "} << item._name << {\cf22 " - $"} << item._price << {\cf22 "\\n"};\par
12     \}\par
13     std::cout << {\cf22 "\\n"};\par
14 \par
15     std::cout << {\cf22 "Escolha uma op\'E7\'E3o:"} << std::endl;\par
16     std::cout << {\cf22 "1. Comprar Item"} << std::endl;\par
17     std::cout << {\cf22 "2. Vender Item"} << std::endl;\par
18 \par
19     {\cf18 int} opcao;\par
20     std::cin >> opcao;\par
21 \par
22     {\cf19 switch} (opcao)\par
23     \{\par
24     {\cf19 case} 1:\par
25         comprarItem();\par
26         {\cf19 break};\par
27     {\cf19 case} 2:\par
28         venderItem();\par
29         {\cf19 break};\par
30     {\cf19 default}:\par
31         std::cout << {\cf22 "Op\'E7\'E3o inv\'E1lida!"} << std::endl;\par
32     \}\par
33 \}\par
34 \par
35 {\cf18 void} LojaDeItens::comprarItem()\par
36 \{\par
37     _inventory->list(); {\cf20 // Chama a fun\'E7\'E3o list do invent\'E1rio para exibir os itens}\par
38     {\cf20 // Adicione l\'F3gica para compra de item aqui}\par
39 \par
40     {\cf20 //Jogador deve escolher um item}\par
41     {\cf18 int} escolha;\par
42     std::cout << {\cf22 "Escolha um item para comprar: "};\par
43     std::cin >> escolha;\par
44     \par
45      {\cf19 if} (escolha >= 0 && escolha < _items.size()) \{\par
46         Item itemComprado = (*_items)[escolha];\par
47 \par
48         {\cf20 // Verificar se o jogador tem dinheiro suficiente}\par
49         {\cf19 if} (_player->_money >= itemComprado._price) \{\par
50             {\cf20 // Adicionar item ao invent\'E1rio do jogador}\par
51             _player->inventory.insert(itemComprado);\par
52             {\cf20 // Remover dinheiro do jogador}\par
53             _player->_money -= itemComprado._price;\par
54 \par
55             std::cout << {\cf22 "Voc\'EA comprou "} << itemComprado._name << {\cf22 " por $"} << itemComprado._price << {\cf22 "\\n\\n"};\par
56         \} {\cf19 else} \{\par
57             std::cout << {\cf22 "Dinheiro insuficiente!\\n\\n"};\par
58         \}\par
59     \} {\cf19 else} \{\par
60         std::cout << {\cf22 "Escolha inv\'E1lida!\\n\\n"};\par
61          {\cf19 return} comprarItem();\par
62     \}\par
63 \}\par
64 \}\par
65 \par
66 {\cf18 void} LojaDeItens::venderItem()\par
67 \{\par
68     _inventory->list(); {\cf20 // Chama a fun\'E7\'E3o list do invent\'E1rio para exibir os itens}\par
69     {\cf20 // Adicione l\'F3gica para venda de item aqui}\par
70        {\cf18 int} escolha;\par
71     std::cout << {\cf22 "Escolha um item para vender: "};\par
72     std::cin >> escolha;\par
73     \par
74      {\cf19 if} (escolha >= 0 && escolha < _player->inventory.size()) \{\par
75         Item itemVendido = _player->inventory[escolha];\par
76 \par
77         {\cf20 //Adicionar os itens \'E0 loja}\par
78          _items->push_back(itemVendido);\par
79 \par
80          {\cf20 //Adicionar dinheiro ao jogador}\par
81          _player->_money += itemVendido._price;\par
82 \par
83          {\cf20 //Removendo item do invent\'E1rio do jogador}\par
84          _player->inventory.remove(_player->inventory.begin() + escolha);\par
85 \par
86         std::cout << {\cf22 "Voc\'EA vendeu seu item"} << itemVendido._name << {\cf22 " por $"} << itemVendido._price << {\cf22 " \\n\\n "};\par
87      \} {\cf19 else} \{\par
88         std::cout << {\cf22 "Escolha inv\'E1lida!\\n\\n"};\par
89          {\cf19 return} venderItem();\par
90      \}\par
91 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
LojaDeItens.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v LojaDeItens.hpp}
{\xe \v LojaDeItens.hpp}
{\bkmkstart AAAAAAAAPH}
{\bkmkend AAAAAAAAPH}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <map>}\par
{\f2 #include <string>}\par
{\f2 #include "Item.hpp"}\par
{\f2 #include "Player.hpp"}\par
{\f2 #include "Inventory.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b LojaDeItens}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa uma loja de itens no jogo. }}\par}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
LojaDeItens.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #pragma once}\par
2 {\cf21 #include <map>}\par
3 {\cf21 #include <string>}\par
4 {\cf21 #include "Item.hpp"}\par
5 {\cf21 #include "Player.hpp"}\par
6 {\cf21 #include "Inventory.hpp"}\par
7 \par
9 {\cf17 class }LojaDeItens\par
10 \{\par
11 {\cf17 public}:\par
12 \par
16     LojaDeItens(Player* player, Inventory* inventory, Item* item);\par
17 \par
19     {\cf18 void} exibirItens();\par
21     {\cf18 void} LojaDeItens::comprarItem();\par
23     {\cf18 void} LojaDeItens::venderItem();\par
24 \par
25 {\cf17 private}:\par
26     Player* _player;\par
27     Inventory* _inventory;\par
28     Item* _items;\par
29 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
main.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v main.cpp}
{\xe \v main.cpp}
{\bkmkstart AAAAAAAAPI}
{\bkmkend AAAAAAAAPI}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Inventory.hpp"}\par
{\f2 #include "Inventory.cpp"}\par
{\f2 #include "Item.hpp"}\par
{\f2 #include "Item.cpp"}\par
{\f2 #include "Sistema.hpp"}\par
{\f2 #include "Sistema.cpp"}\par
{\f2 #include "Player.hpp"}\par
{\f2 #include "Player.cpp"}\par
{\f2 #include "Menu.hpp"}\par
{\f2 #include "Menu.cpp"}\par
{\f2 #include "StorageManager.hpp"}\par
{\f2 #include "Farmer.hpp"}\par
{\f2 #include "Farmer.cpp"}\par
{\f2 #include "LojaDeItens.hpp"}\par
{\f2 #include "LojaDeItens.cpp"}\par
{\f2 #include <string>}\par
{\f2 #include <stack>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:main.cpp}
{\xe \v main.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAAPJ}
{\bkmkend AAAAAAAAPJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Menu.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v Menu.cpp}
{\xe \v Menu.cpp}
{\bkmkstart AAAAAAAAPK}
{\bkmkend AAAAAAAAPK}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Menu.hpp"}\par
{\f2 #include "ItemsStorage.hpp"}\par
{\f2 #include "Sistema.hpp"}\par
{\f2 #include "Player.hpp"}\par
{\f2 #include "Farmer.hpp"}\par
{\f2 #include "Fisherman.hpp"}\par
{\f2 #include "Miner.hpp"}\par
{\f2 #include "Livestocker.hpp"}\par
{\f2 #include "TerminalPalette.hpp"}\par
{\f2 #include <iostream>}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Menu.cpp\par \pard\plain 
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include "Menu.hpp"}\par
2 {\cf21 #include "ItemsStorage.hpp"}\par
3 {\cf21 #include "Sistema.hpp"}\par
4 {\cf21 #include "Player.hpp"}\par
5 {\cf21 #include "Farmer.hpp"}\par
6 {\cf21 #include "Fisherman.hpp"}\par
7 {\cf21 #include "Miner.hpp"}\par
8 {\cf21 #include "Livestocker.hpp"}\par
9 {\cf21 #include "TerminalPalette.hpp"}\par
10 {\cf21 #include <iostream>}\par
11 \par
12 Menu::Menu()\{\};\par
13 \par
14 {\cf18 void} Menu::listarAtividades(Player *p, ItemsStorage *storage, Sistema *sistema)\par
15 \{\par
16 \par
17     {\cf18 int} option;\par
18     {\cf18 int} quantidade;\par
19     Farmer f;\par
20     Livestocker l;\par
21     Fisherman i;\par
22     Miner m;\par
23     {\cf19 do}\par
24     \{\par
25         std::cout << color::greens << {\cf22 "Atividades disponiveis:"} << color::off << std::endl;\par
26         std::cout << color::green;\par
27         sistema->printText({\cf22 "       1- Colher trigo"});\par
28         sistema->printText({\cf22 "       2- Colher cenouras"});\par
29         sistema->printText({\cf22 "       3- Alimentar as galinhas"});\par
30         sistema->printText({\cf22 "       4- Cuidar dos porcos"});\par
31         sistema->printText({\cf22 "       5- Pescar"});\par
32         sistema->printText({\cf22 "       6- Limpar os peixes"});\par
33         sistema->printText({\cf22 "       7- Minerar"});\par
34         sistema->printText({\cf22 "       8- Refinar os minerios"});\par
35         sistema->printText({\cf22 "       9- Loja"});\par
36         sistema->printText({\cf22 "       10- Ver inventario"});\par
37         sistema->printText({\cf22 "       11- Ver perfil"});\par
38         sistema->printText({\cf22 "       0- Sair"});\par
39         std::cout << color::off;\par
40 \par
41         {\cf19 do}\par
42         \{\par
43             std::cin >> option;\par
44             {\cf19 if} (std::cin.fail())\par
45             \{\par
46                 std::cin.clear();\par
47                 std::cout << color::redf << {\cf22 "Digite uma tarefa v\'E1lida"} << color::off << std::endl;\par
48             \}\par
49             {\cf19 else} {\cf19 if} (option < 0 || option > 11)\par
50             \{\par
51                 std::cout << color::grayb << {\cf22 "Uhmm, ainda nao sabemos fazer essa tarefa..."} << color::off << std::endl;\par
52             \}\par
53         \} {\cf19 while} (std::cin.fail() || option < 0 || option > 11);\par
54 \par
55         {\cf19 switch} (option)\par
56         \{\par
57         {\cf19 case} 1:\par
58             std::cout << color::grayb << {\cf22 "Quantos trigos deseja plantar?"} << color::off << std::endl;\par
59             std::cin >> quantidade;\par
60             f.getWheat(quantidade, p, storage);\par
61             {\cf19 break};\par
62         {\cf19 case} 2:\par
63             std::cout << color::grayb << {\cf22 "Quantas cenouras deseja plantar?"} << color::off << std::endl;\par
64             std::cin >> quantidade;\par
65             f.getCarrot(quantidade, p, storage);\par
66             {\cf19 break};\par
67         {\cf19 case} 3:\par
68             std::cout << color::grayb << {\cf22 "Quantas galinhas deseja alimentar?"} << color::off << std::endl;\par
69             std::cin >> quantidade;\par
70             l.getEgg(quantidade, p, storage);\par
71             {\cf19 break};\par
72         {\cf19 case} 4:\par
73             std::cout << color::grayb << {\cf22 "Quantos porcos deseja cuidar?"} << color::off << std::endl;\par
74             std::cin >> quantidade;\par
75             l.getBacon(quantidade, p, storage);\par
76             {\cf19 break};\par
77         {\cf19 case} 5:\par
78             i.fish(p, storage);\par
79             {\cf19 break};\par
80         {\cf19 case} 6:\par
81             i.cleanFish(p);\par
82             {\cf19 break};\par
83         {\cf19 case} 7:\par
84             m.ore(p, storage);\par
85             {\cf19 break};\par
86         {\cf19 case} 8:\par
87             m.refine(p);\par
88             {\cf19 break};\par
89         {\cf19 case} 9:\par
90             {\cf20 // exibir a loja}\par
91             {\cf19 break};\par
92         {\cf19 case} 10:\par
93             p->printInventory();\par
94             {\cf19 break};\par
95         {\cf19 case} 11:\par
96             p->displayProfile();\par
97             {\cf19 break};\par
98         {\cf19 default}:\par
99             {\cf19 break};\par
100         \}\par
101         std::cout << std::endl;\par
102     \} {\cf19 while} (option != 0);\par
103 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Menu.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v Menu.hpp}
{\xe \v Menu.hpp}
{\bkmkstart AAAAAAAAPL}
{\bkmkend AAAAAAAAPL}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <string>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Menu}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa um menu. }}\par}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Menu.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #pragma once}\par
2 \par
3 {\cf21 #include <string>}\par
4 {\cf17 class }Player;       {\cf20 // Forward declaration}\par
5 {\cf17 class }ItemsStorage; {\cf20 // Forward declaration}\par
6 {\cf17 class }Sistema;      {\cf20 // Forward declaration}\par
7 \par
9 {\cf17 class }Menu\par
10 \{\par
11 {\cf17 public}:\par
13     Menu();\par
14 \par
17     {\cf18 void} listarAtividades(Player *p, ItemsStorage *storage, Sistema *sistema);\par
18 \par
19     {\cf20 // M\'E9todos comentados para remo\'E7\'E3o tempor\'E1ria}\par
20     {\cf20 // virtual ~StorageManager();}\par
21     {\cf20 // void write(const T &data);}\par
22     {\cf20 // void read(const T &data, int totalRegistros);}\par
23     {\cf20 // virtual void findOne(char const *data);}\par
24 \par
25 {\cf17 private}:\par
26     {\cf20 // std::ifstream _file;}\par
27 \};\par
28 \par
29 {\cf20 // Cabe\'E7alho comentado para remo\'E7\'E3o tempor\'E1ria}\par
30 {\cf20 // #include "StorageManager.tpp"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Miner.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v Miner.cpp}
{\xe \v Miner.cpp}
{\bkmkstart AAAAAAAAPM}
{\bkmkend AAAAAAAAPM}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include <ctime>}\par
{\f2 #include <cstdlib>}\par
{\f2 #include <algorithm>}\par
{\f2 #include <vector>}\par
{\f2 #include "Player.hpp"}\par
{\f2 #include "Miner.hpp"}\par
{\f2 #include "Item.hpp"}\par
{\f2 #include "Inventory.hpp"}\par
{\f2 #include "ItemsStorage.hpp"}\par
{\f2 #include "TerminalPalette.hpp"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Miner.cpp\par \pard\plain 
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <iostream>}\par
2 {\cf21 #include <ctime>}\par
3 {\cf21 #include <cstdlib>}\par
4 {\cf21 #include <algorithm>}\par
5 {\cf21 #include <vector>}\par
6 \par
7 {\cf21 #include "Player.hpp"}\par
8 {\cf21 #include "Miner.hpp"}\par
9 {\cf21 #include "Item.hpp"}\par
10 {\cf21 #include "Inventory.hpp"}\par
11 {\cf21 #include "ItemsStorage.hpp"}\par
12 {\cf21 #include "TerminalPalette.hpp"}\par
13 \par
14 {\cf18 void} Miner::ore(Player *p, ItemsStorage *storage)\par
15 \{\par
16     Item minerio = storage->findRandom(2);\par
17     p->getInventory()->insert(minerio.getId(), minerio);\par
18     p->addXp(minerio.getUnitaryPrice() * 2.0);\par
19     std::cout << color::cyan << {\cf22 "Voce mineirou 1 "} << minerio.getName() << {\cf22 "!"} << color::off << std::endl;\par
20 \}\par
21 \par
22 {\cf18 void} Miner::refine(Player *p)\par
23 \{\par
24     Inventory *playerInventory = p->getInventory();\par
25     {\cf18 bool} refinou = {\cf17 false};\par
26     {\cf19 for} ({\cf17 auto} &entry : playerInventory->list())\par
27     \{\par
28         Item &item = entry.second.first;\par
29 \par
30         {\cf19 if} ((item.getId() >= 11 || item.getId() <= 16) && !item.getStatus())\par
31         \{\par
32             {\cf18 double} refinedPrice = item.getUnitaryPrice() * 1.1;\par
33             playerInventory->updateItemPrice(item.getId(), refinedPrice);\par
34             playerInventory->updateItemStatus(item.getId());\par
35             refinou = {\cf17 true};\par
36         \}\par
37     \}\par
38     {\cf19 if} (refinou)\par
39     \{\par
40 \par
41         p->addXp(15.0);\par
42         std::cout << color::cyan << {\cf22 "Agora seus minerios valem mais!"} << color::off << std::endl;\par
43     \}\par
44     {\cf19 else}\par
45         std::cout << color::red << {\cf22 "Ops, parece que seus minerios ja estao refinados..."} << color::off << std::endl;\par
46 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MIner.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v MIner.hpp}
{\xe \v MIner.hpp}
{\bkmkstart AAAAAAAAPN}
{\bkmkend AAAAAAAAPN}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Item.hpp"}\par
{\f2 #include "Inventory.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Miner}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MIner.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #pragma once}\par
2 {\cf21 #include "Item.hpp"}\par
3 {\cf21 #include "Inventory.hpp"}\par
4 \par
5 {\cf17 class }Miner\par
6 \{\par
7 {\cf17 public}:\par
12     {\cf18 void} ore(Player *p, ItemsStorage *storage);\par
13 \par
17     {\cf18 void} refine(Player *p);\par
18 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Player.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v Player.cpp}
{\xe \v Player.cpp}
{\bkmkstart AAAAAAAAPO}
{\bkmkend AAAAAAAAPO}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Player.hpp"}\par
{\f2 #include "Inventory.hpp"}\par
{\f2 #include "Item.hpp"}\par
{\f2 #include "TerminalPalette.hpp"}\par
{\f2 #include <iostream>}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Player.cpp\par \pard\plain 
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include "Player.hpp"}\par
2 {\cf21 #include "Inventory.hpp"}\par
3 {\cf21 #include "Item.hpp"}\par
4 {\cf21 #include "TerminalPalette.hpp"}\par
5 {\cf21 #include <iostream>}\par
6 \par
7 Player::Player() : _name({\cf22 ""}), _level(0.0), _xp(0.0), _inventario(0)\{\};\par
8 Player::Player({\cf17 const} std::string name) : _name(name), _level(0.0), _xp(0.0), _inventario(10)\{\};\par
9 \par
10 {\cf18 void} Player::functeste()\par
11 \{\par
12     Item ITEMTESTE(0, {\cf22 "Item teste 1"}, 10.3, {\cf17 true});\par
13     _inventario.insert(ITEMTESTE.getId(), ITEMTESTE);\par
14     _inventario.list();\par
15 \}\par
16 {\cf18 void} Player::printInventory()\par
17 \{\par
18     _inventario.printInventory();\par
19 \}\par
20 \par
21 {\cf18 void} Player::addXp({\cf18 float} newXp)\par
22 \{\par
23     _xp += newXp;\par
24     {\cf19 if}(_xp >= 150.0)\{\par
25         _level++;\par
26         _xp = 0;\par
27         std::cout<<color::bluen << {\cf22 "Nivel atualizado: "} << _level <<color::off<< std::endl;\par
28         std::cout<<color::bluen << {\cf22 "Pontos de experiencia atualizados: "} << _xp <<color::off<< std::endl;\par
29     \}\par
30 \}\par
31 \par
32 {\cf18 float} Player::getLevel()\par
33 \{\par
34     {\cf19 return} _level;\par
35 \}\par
36 \par
37 Inventory* Player::getInventory()\par
38 \{\par
39     {\cf19 return} &_inventario;\par
40 \}\par
41 \par
42 {\cf18 void} Player::displayProfile()\par
43 \{\par
44     std::cout << color::blues << {\cf22 "--------------- MEU PERFIL ---------------"} << color::off<< std::endl;\par
45     std::cout << color::bluen << {\cf22 "Nome de jogador: "} << _name << color::off<< std::endl;\par
46     std::cout << color::bluen << {\cf22 "Nivel: "} << _level << color::off<< std::endl;\par
47     std::cout << color::bluen << {\cf22 "Pontos de experiencia: "} << _xp << color::off<< std::endl;\par
48     std::cout << std::endl;\par
49 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Player.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v Player.hpp}
{\xe \v Player.hpp}
{\bkmkstart AAAAAAAAPP}
{\bkmkend AAAAAAAAPP}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <string>}\par
{\f2 #include "Inventory.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Player}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa um jogador. }}\par}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Player.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #pragma once}\par
2 \par
3 {\cf21 #include <string>}\par
4 {\cf21 #include "Inventory.hpp"}\par
5 \par
7 {\cf17 class }Player \{\par
8 {\cf17 public}:\par
10     Player();\par
11 \par
14     Player({\cf17 const} std::string name);\par
15 \par
17     {\cf18 void} functeste();\par
18 \par
20     {\cf18 void} printInventory();\par
21 \par
24     {\cf18 void} addXp({\cf18 float} newXp);\par
25 \par
27     {\cf18 void} displayProfile();\par
28 \par
31     {\cf18 float} getLevel();\par
32 \par
35     Inventory* getInventory();\par
36 \par
37     {\cf20 // M\'E9todos comentados para remo\'E7\'E3o tempor\'E1ria}\par
38     {\cf20 // virtual ~StorageManager();}\par
39     {\cf20 // void write(const T &data);}\par
40     {\cf20 // void read(const T &data, int totalRegistros);}\par
41     {\cf20 // virtual void findOne(char const *data);}\par
42 \par
43 {\cf17 private}:\par
44     std::string _name; \par
45     {\cf18 float} _level; \par
46     {\cf18 float} _xp; \par
47     Inventory _inventario; \par
48 \};\par
49 \par
50 {\cf20 // Cabe\'E7alho comentado para remo\'E7\'E3o tempor\'E1ria}\par
51 {\cf20 // #include "StorageManager.tpp"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
README.md File Reference\par \pard\plain 
{\tc\tcl2 \v README.md}
{\xe \v README.md}
{\bkmkstart AAAAAAAAPQ}
{\bkmkend AAAAAAAAPQ}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Sistema.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v Sistema.cpp}
{\xe \v Sistema.cpp}
{\bkmkstart AAAAAAAAPR}
{\bkmkend AAAAAAAAPR}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Sistema.hpp"}\par
{\f2 #include "Player.hpp"}\par
{\f2 #include "Menu.hpp"}\par
{\f2 #include "ItemsStorage.hpp"}\par
{\f2 #include "TerminalPalette.hpp"}\par
{\f2 #include <iostream>}\par
{\f2 #include <cstdlib>}\par
{\f2 #include <ctime>}\par
{\f2 #include <windows.h>}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Sistema.cpp\par \pard\plain 
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include "Sistema.hpp"}\par
2 {\cf21 #include "Player.hpp"}\par
3 {\cf21 #include "Menu.hpp"}\par
4 {\cf21 #include "ItemsStorage.hpp"}\par
5 {\cf21 #include "TerminalPalette.hpp"}\par
6 {\cf21 #include <iostream>}\par
7 {\cf21 #include <iostream>}\par
8 {\cf21 #include <cstdlib>}\par
9 {\cf21 #include <ctime>}\par
10 {\cf21 #include <windows.h>}\par
11 \par
12 Sistema::Sistema() : _player()\{\};\par
13 {\cf18 void} Sistema::criarPersonagem()\par
14 \{\par
15     std::cout << color::purpleb << {\cf22 "Bem vindo(a) a sua nova fazenda!"} << color::off << std::endl;\par
16     std::cout << {\cf22 "Informe um nome para o seu personagem:"};\par
17     std::string nome;\par
18     std::cin >> nome;\par
19     {\cf20 // std::cout << "Escolha uma classe pro seu personagem:" << std::endl;}\par
20     {\cf20 // std::cout << "  1- Fazendeiro" << std::endl;}\par
21     {\cf20 // std::cout << "  2- Pescador" << std::endl;}\par
22     {\cf20 // std::cout << "  3- Pecuarista" << std::endl;}\par
23     {\cf20 // std::cout << "  4- Mineiro" << std::endl;}\par
24     {\cf20 // int classe;}\par
25     {\cf20 // do}\par
26     {\cf20 // \{}\par
27     {\cf20 //     std::cin >> classe;}\par
28     {\cf20 //     switch (classe)}\par
29     {\cf20 //     \{}\par
30     {\cf20 //     case 1:}\par
31     {\cf20 //         std::cout << "Fazendeiro!" << std::endl;}\par
32     {\cf20 //         break;}\par
33     {\cf20 //     case 2:}\par
34     {\cf20 //         std::cout << "Pescador" << std::endl;}\par
35     {\cf20 //         /* code */}\par
36     {\cf20 //         break;}\par
37     {\cf20 //     case 3:}\par
38     {\cf20 //         std::cout << "Pecuarista" << std::endl;}\par
39     {\cf20 //         /* code */}\par
40     {\cf20 //         break;}\par
41     {\cf20 //     case 4:}\par
42     {\cf20 //         std::cout << "Mineiro" << std::endl;}\par
43     {\cf20 //         /* code */}\par
44     {\cf20 //         break;}\par
45 \par
46     {\cf20 //     default:}\par
47     {\cf20 //         std::cout << "Valor inv\'E1lido, tente novamente." << std::endl;}\par
48     {\cf20 //         break;}\par
49     {\cf20 //     \}}\par
50     {\cf20 // \} while (classe != 1 && classe != 2 && classe != 3 && classe != 4);}\par
51     _player = Player(nome);\par
52     ItemsStorage storage({\cf22 "./filetest.txt"});\par
53     Menu menu = Menu();\par
54 \par
55     menu.listarAtividades(&_player, &storage, {\cf17 this});\par
56 \par
57     _player.printInventory();\par
58 \};\par
59 {\cf18 void} Sistema::printText({\cf17 const} std::string texto)\par
60 \{\par
61     {\cf19 for} ({\cf18 char} x : texto)\par
62     \{\par
63         {\cf18 unsigned} seed = time(0);\par
64         std::cout << x;\par
65         srand(seed);\par
66         {\cf20 // std::cout << rand() % 300 << std::endl;}\par
67         Sleep(rand() % 50);\par
68     \}\par
69     std::cout << std::endl;\par
70 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Sistema.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v Sistema.hpp}
{\xe \v Sistema.hpp}
{\bkmkstart AAAAAAAAPS}
{\bkmkend AAAAAAAAPS}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Player.hpp"}\par
{\f2 #include <iostream>}\par
{\f2 #include <fstream>}\par
{\f2 #include <string>}\par
{\f2 #include <sstream>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Sistema}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa o sistema do jogo. }}\par}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Sistema.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #pragma once}\par
2 {\cf21 #include "Player.hpp"}\par
3 {\cf21 #include <iostream>}\par
4 {\cf21 #include <fstream>}\par
5 {\cf21 #include <string>}\par
6 {\cf21 #include <sstream>}\par
7 \par
9 {\cf17 class }Sistema\par
10 \{\par
11 {\cf17 public}:\par
13     Sistema();\par
14 \par
16     {\cf18 void} criarPersonagem();\par
17 \par
20     {\cf18 void} printText({\cf17 const} std::string texto);\par
21 \par
22 {\cf17 private}:\par
23     Player _player; \par
24 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
StorageManager.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v StorageManager.hpp}
{\xe \v StorageManager.hpp}
{\bkmkstart AAAAAAAAPT}
{\bkmkend AAAAAAAAPT}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe template {\b StorageManager}. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include <fstream>}\par
{\f2 #include <string>}\par
{\f2 #include <sstream>}\par
{\f2 #include "StorageManager.tpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b StorageManager< T >}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe modelo para gerenciamento de armazenamento. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cont\'E9m a defini\'E7\'E3o da classe template {\b StorageManager}. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
StorageManager.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <iostream>}\par
2 {\cf21 #include <fstream>}\par
3 {\cf21 #include <string>}\par
4 {\cf21 #include <sstream>}\par
5 \par
15 {\cf17 template} <{\cf17 typename} T>\par
16 {\cf17 class }StorageManager\par
17 \{\par
18 {\cf17 public}:\par
23     StorageManager({\cf18 char} {\cf17 const} *file_path);\par
24 \par
25     {\cf20 // M\'E9todos comentados para remo\'E7\'E3o tempor\'E1ria}\par
26     {\cf20 // virtual ~StorageManager();}\par
27 \par
32     {\cf17 virtual} {\cf18 void} write({\cf17 const} T &data);\par
33 \par
39     {\cf17 virtual} {\cf18 void} read({\cf18 int} totalRegistros);\par
40 \par
45     {\cf20 // virtual T findRandom(const std::string classe);}\par
46     {\cf20 // M\'E9todos comentados para remo\'E7\'E3o tempor\'E1ria}\par
47     {\cf20 // virtual void findOne(char const *data);}\par
48 \par
49 {\cf17 protected}:\par
50     std::ifstream _file; \par
51 \};\par
52 \par
53 {\cf21 #include "StorageManager.tpp"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
tempCodeRunnerFile.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v tempCodeRunnerFile.cpp}
{\xe \v tempCodeRunnerFile.cpp}
{\bkmkstart AAAAAAAAPU}
{\bkmkend AAAAAAAAPU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Mostrar Menu")\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST_CASE\:tempCodeRunnerFile.cpp}
{\xe \v tempCodeRunnerFile.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Mostrar Menu" )}}
\par
{\bkmkstart AAAAAAAAPV}
{\bkmkend AAAAAAAAPV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TerminalPalette.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v TerminalPalette.hpp}
{\xe \v TerminalPalette.hpp}
{\bkmkstart AAAAAAAAPW}
{\bkmkend AAAAAAAAPW}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b color}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
biblioteca para adi\'E7\'E3o de cores no terminal }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b COLORS_H}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::gray} = "\\e[30;10m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::grayn} = "\\e[30;1m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::grayf} = "\\e[30;2m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::grayi} = "\\e[30;3m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::grays} = "\\e[30;4m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::grayp} = "\\e[30;5m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::grayb} = "\\e[30;7m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::grayc} = "\\e[30;9m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::red} = "\\e[31;10m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::redn} = "\\e[31;1m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::redf} = "\\e[31;2m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::redi} = "\\e[31;3m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::reds} = "\\e[31;4m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::redp} = "\\e[31;5m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::redb} = "\\e[31;7m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::redc} = "\\e[31;9m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::green} = "\\e[32;10m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::greenn} = "\\e[32;1m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::greenf} = "\\e[32;2m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::greeni} = "\\e[32;3m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::greens} = "\\e[32;4m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::greenp} = "\\e[32;5m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::greenb} = "\\e[32;7m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::greenc} = "\\e[32;9m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::yellow} = "\\e[33;10m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::yellown} = "\\e[33;1m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::yellowf} = "\\e[33;2m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::yellowi} = "\\e[33;3m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::yellows} = "\\e[33;4m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::yellowp} = "\\e[33;5m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::yellowb} = "\\e[33;7m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::yellowc} = "\\e[33;9m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::blue} = "\\e[34;10m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::bluen} = "\\e[34;1m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::bluef} = "\\e[34;2m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::bluei} = "\\e[34;3m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::blues} = "\\e[34;4m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::bluep} = "\\e[34;5m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::blueb} = "\\e[34;7m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::bluec} = "\\e[34;9m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::purple} = "\\e[35;10m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::purplen} = "\\e[35;1m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::purplef} = "\\e[35;2m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::purplei} = "\\e[35;3m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::purples} = "\\e[35;4m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::purplep} = "\\e[35;5m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::purpleb} = "\\e[35;7m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::purplec} = "\\e[35;9m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::cyan} = "\\e[36;10m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::cyann} = "\\e[36;1m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::cyanf} = "\\e[36;2m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::cyani} = "\\e[36;3m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::cyans} = "\\e[36;4m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::cyanp} = "\\e[36;5m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::cyanb} = "\\e[36;7m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::cyanc} = "\\e[36;9m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::white} = "\\e[38;10m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::whiten} = "\\e[38;1m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::whitef} = "\\e[38;2m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::whitei} = "\\e[38;3m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::whites} = "\\e[38;4m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::whitep} = "\\e[38;5m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::whiteb} = "\\e[38;7m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::whitec} = "\\e[38;9m"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b color::off} = "\\e[m"\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v COLORS_H\:TerminalPalette.hpp}
{\xe \v TerminalPalette.hpp\:COLORS_H}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define COLORS_H}}
\par
{\bkmkstart AAAAAAAAPX}
{\bkmkend AAAAAAAAPX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TerminalPalette.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #pragma once}\par
2 {\cf21 #ifndef COLORS_H}\par
3 {\cf21 #define COLORS_H}\par
4 {\cf21 #include <iostream>}\par
5 \par
7 {\cf17 namespace }color \par
8 \{                    \par
9   {\cf17 const} std::string gray  = {\cf22 "\\e[30;10m"}, {\cf20 // normal}\par
10                     grayn = {\cf22 "\\e[30;1m"}, {\cf20 // negrito}\par
11                     grayf = {\cf22 "\\e[30;2m"}, {\cf20 // fraco}\par
12                     grayi = {\cf22 "\\e[30;3m"}, {\cf20 // it\'E1lico}\par
13                     grays = {\cf22 "\\e[30;4m"}, {\cf20 // sublinhado}\par
14                     grayp = {\cf22 "\\e[30;5m"}, {\cf20 // piscando}\par
15                     grayb = {\cf22 "\\e[30;7m"}, {\cf20 // background}\par
16                     grayc = {\cf22 "\\e[30;9m"}, {\cf20 // cancelado}\par
17 \par
18                     red  = {\cf22 "\\e[31;10m"}, {\cf20 // normal}\par
19                     redn = {\cf22 "\\e[31;1m"}, {\cf20 // negrito}\par
20                     redf = {\cf22 "\\e[31;2m"}, {\cf20 // fraco}\par
21                     redi = {\cf22 "\\e[31;3m"}, {\cf20 // it\'E1lico}\par
22                     reds = {\cf22 "\\e[31;4m"}, {\cf20 // sublinhado}\par
23                     redp = {\cf22 "\\e[31;5m"}, {\cf20 // piscando}\par
24                     redb = {\cf22 "\\e[31;7m"}, {\cf20 // background}\par
25                     redc = {\cf22 "\\e[31;9m"}, {\cf20 // cancelado}\par
26 \par
27                     green  = {\cf22 "\\e[32;10m"}, {\cf20 // normal}\par
28                     greenn = {\cf22 "\\e[32;1m"}, {\cf20 // negrito}\par
29                     greenf = {\cf22 "\\e[32;2m"}, {\cf20 // fraco}\par
30                     greeni = {\cf22 "\\e[32;3m"}, {\cf20 // it\'E1lico}\par
31                     greens = {\cf22 "\\e[32;4m"}, {\cf20 // sublinhado}\par
32                     greenp = {\cf22 "\\e[32;5m"}, {\cf20 // piscando}\par
33                     greenb = {\cf22 "\\e[32;7m"}, {\cf20 // background}\par
34                     greenc = {\cf22 "\\e[32;9m"}, {\cf20 // cancelado}\par
35 \par
36                     yellow  = {\cf22 "\\e[33;10m"}, {\cf20 // normal}\par
37                     yellown = {\cf22 "\\e[33;1m"}, {\cf20 // negrito}\par
38                     yellowf = {\cf22 "\\e[33;2m"}, {\cf20 // fraco}\par
39                     yellowi = {\cf22 "\\e[33;3m"}, {\cf20 // it\'E1lico}\par
40                     yellows = {\cf22 "\\e[33;4m"}, {\cf20 // sublinhado}\par
41                     yellowp = {\cf22 "\\e[33;5m"}, {\cf20 // piscando}\par
42                     yellowb = {\cf22 "\\e[33;7m"}, {\cf20 // background}\par
43                     yellowc = {\cf22 "\\e[33;9m"}, {\cf20 // cancelado}\par
44 \par
45                     blue  = {\cf22 "\\e[34;10m"}, {\cf20 // normal}\par
46                     bluen = {\cf22 "\\e[34;1m"}, {\cf20 // negrito}\par
47                     bluef = {\cf22 "\\e[34;2m"}, {\cf20 // fraco}\par
48                     bluei = {\cf22 "\\e[34;3m"}, {\cf20 // it\'E1lico}\par
49                     blues = {\cf22 "\\e[34;4m"}, {\cf20 // sublinhado}\par
50                     bluep = {\cf22 "\\e[34;5m"}, {\cf20 // piscando}\par
51                     blueb = {\cf22 "\\e[34;7m"}, {\cf20 // background}\par
52                     bluec = {\cf22 "\\e[34;9m"}, {\cf20 // cancelado}\par
53 \par
54                     purple  = {\cf22 "\\e[35;10m"}, {\cf20 // normal}\par
55                     purplen = {\cf22 "\\e[35;1m"}, {\cf20 // negrito}\par
56                     purplef = {\cf22 "\\e[35;2m"}, {\cf20 // fraco}\par
57                     purplei = {\cf22 "\\e[35;3m"}, {\cf20 // it\'E1lico}\par
58                     purples = {\cf22 "\\e[35;4m"}, {\cf20 // sublinhado}\par
59                     purplep = {\cf22 "\\e[35;5m"}, {\cf20 // piscando}\par
60                     purpleb = {\cf22 "\\e[35;7m"}, {\cf20 // background}\par
61                     purplec = {\cf22 "\\e[35;9m"}, {\cf20 // cancelado}\par
62 \par
63                     cyan  = {\cf22 "\\e[36;10m"}, {\cf20 // normal}\par
64                     cyann = {\cf22 "\\e[36;1m"}, {\cf20 // negrito}\par
65                     cyanf = {\cf22 "\\e[36;2m"}, {\cf20 // fraco}\par
66                     cyani = {\cf22 "\\e[36;3m"}, {\cf20 // it\'E1lico}\par
67                     cyans = {\cf22 "\\e[36;4m"}, {\cf20 // sublinhado}\par
68                     cyanp = {\cf22 "\\e[36;5m"}, {\cf20 // piscando}\par
69                     cyanb = {\cf22 "\\e[36;7m"}, {\cf20 // background}\par
70                     cyanc = {\cf22 "\\e[36;9m"}, {\cf20 // cancelado}\par
71 \par
72                     white  = {\cf22 "\\e[38;10m"}, {\cf20 // normal}\par
73                     whiten = {\cf22 "\\e[38;1m"}, {\cf20 // negrito}\par
74                     whitef = {\cf22 "\\e[38;2m"}, {\cf20 // fraco}\par
75                     whitei = {\cf22 "\\e[38;3m"}, {\cf20 // it\'E1lico}\par
76                     whites = {\cf22 "\\e[38;4m"}, {\cf20 // sublinhado}\par
77                     whitep = {\cf22 "\\e[38;5m"}, {\cf20 // piscando}\par
78                     whiteb = {\cf22 "\\e[38;7m"}, {\cf20 // background}\par
79                     whitec = {\cf22 "\\e[38;9m"}, {\cf20 // cancelado}\par
80 \par
81                     off = {\cf22 "\\e[m"}; {\cf20 // desativa a cor personalizada}\par
82 \}\par
83 \par
84 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v test.cpp}
{\xe \v test.cpp}
{\bkmkstart AAAAAAAAPY}
{\bkmkend AAAAAAAAPY}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include "doctest.h"}\par
{\f2 #include "Inventory.hpp"}\par
{\f2 #include "Inventory.cpp"}\par
{\f2 #include "Item.hpp"}\par
{\f2 #include "Item.cpp"}\par
{\f2 #include "Sistema.hpp"}\par
{\f2 #include "Sistema.cpp"}\par
{\f2 #include "Player.hpp"}\par
{\f2 #include "Player.cpp"}\par
{\f2 #include "Menu.hpp"}\par
{\f2 #include "Menu.cpp"}\par
{\f2 #include "StorageManager.hpp"}\par
{\f2 #include "Farmer.hpp"}\par
{\f2 #include "Farmer.cpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Sistema + Menu")\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN\:test.cpp}
{\xe \v test.cpp\:DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}}
\par
{\bkmkstart AAAAAAAAPZ}
{\bkmkend AAAAAAAAPZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST_CASE\:test.cpp}
{\xe \v test.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Sistema + Menu" )}}
\par
{\bkmkstart AAAAAAAAQA}
{\bkmkend AAAAAAAAQA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test2.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v test2.cpp}
{\xe \v test2.cpp}
{\bkmkstart AAAAAAAAQB}
{\bkmkend AAAAAAAAQB}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include "doctest.h"}\par
{\f2 #include "Inventory.hpp"}\par
{\f2 #include "Inventory.cpp"}\par
{\f2 #include "Item.hpp"}\par
{\f2 #include "Item.cpp"}\par
{\f2 #include "Player.hpp"}\par
{\f2 #include "Player.cpp"}\par
{\f2 #include "Menu.hpp"}\par
{\f2 #include "Menu.cpp"}\par
{\f2 #include "Farmer.hpp"}\par
{\f2 #include "Farmer.cpp"}\par
{\f2 #include "Livestocker.hpp"}\par
{\f2 #include "Livestocker.cpp"}\par
{\f2 #include "Fisherman.hpp"}\par
{\f2 #include "Fisherman.cpp"}\par
{\f2 #include "Miner.hpp"}\par
{\f2 #include "Miner.cpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Mostrar Menu")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Obter trigo e cenoura")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Fun\'E7\'F5es de mdifica\'E7\'E3o de valores")\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN\:test2.cpp}
{\xe \v test2.cpp\:DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}}
\par
{\bkmkstart AAAAAAAAQC}
{\bkmkend AAAAAAAAQC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST_CASE\:test2.cpp}
{\xe \v test2.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Fun\'E7\'F5es de mdifica\'E7\'E3o de valores" )}}
\par
{\bkmkstart AAAAAAAAQD}
{\bkmkend AAAAAAAAQD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE\:test2.cpp}
{\xe \v test2.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Mostrar Menu" )}}
\par
{\bkmkstart AAAAAAAAQE}
{\bkmkend AAAAAAAAQE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE\:test2.cpp}
{\xe \v test2.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Obter trigo e cenoura" )}}
\par
{\bkmkstart AAAAAAAAQF}
{\bkmkend AAAAAAAAQF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
